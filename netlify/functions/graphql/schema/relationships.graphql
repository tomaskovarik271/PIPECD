# Relationship Intelligence GraphQL Schema
# Defines types and operations for the relationship mapping and stakeholder analysis features

# =====================================
# Core Relationship Types
# =====================================

# Organization relationship between two companies
type OrganizationRelationship {
  id: ID!
  parentOrg: Organization!
  childOrg: Organization!
  relationshipType: OrganizationRelationshipType!
  ownershipPercentage: Float
  relationshipStrength: Int
  startDate: String
  endDate: String
  notes: String
  metadata: JSON
  createdAt: String!
  updatedAt: String!
  createdByUser: User
}

# Person-to-person relationship (reports-to, influences, etc.)
type PersonRelationship {
  id: ID!
  fromPerson: Person!
  toPerson: Person!
  relationshipType: PersonRelationshipType!
  relationshipStrength: Int
  isBidirectional: Boolean!
  interactionFrequency: InteractionFrequency
  relationshipContext: String
  notes: String
  metadata: JSON
  createdAt: String!
  updatedAt: String!
  createdByUser: User
}

# Person's role within an organization
type PersonOrganizationalRole {
  id: ID!
  person: Person!
  organization: Organization!
  roleTitle: String!
  department: String
  seniorityLevel: SeniorityLevel
  isPrimaryRole: Boolean!
  startDate: String
  endDate: String
  reportingStructure: JSON
  responsibilities: JSON
  budgetAuthorityUsd: Float
  teamSize: Int
  notes: String
  createdAt: String!
  updatedAt: String!
  createdByUser: User
}

# Stakeholder analysis for deals and leads
type StakeholderAnalysis {
  id: ID!
  person: Person!
  organization: Organization!
  deal: Deal
  lead: Lead
  
  # Influence & Decision Power
  influenceScore: Int
  decisionAuthority: DecisionAuthority
  budgetAuthorityLevel: BudgetAuthorityLevel
  
  # Engagement Analysis
  engagementLevel: EngagementLevel
  communicationPreference: CommunicationPreference
  preferredMeetingTime: String
  
  # Business Context
  painPoints: JSON
  motivations: JSON
  successMetrics: JSON
  concerns: JSON
  
  # Relationship Strategy
  approachStrategy: String
  nextBestAction: String
  lastInteractionDate: String
  lastInteractionType: String
  
  # AI Insights
  aiPersonalityProfile: JSON
  aiCommunicationStyle: String
  aiDecisionPattern: String
  aiInfluenceNetwork: JSON
  
  createdAt: String!
  updatedAt: String!
  createdByUser: User
}

# Territory management
type Territory {
  id: ID!
  name: String!
  territoryType: TerritoryType!
  region: String
  country: String
  stateProvince: String
  city: String
  industryFocus: [String!]
  accountSizeRange: String
  parentTerritory: Territory
  assignedUser: User
  isActive: Boolean!
  metadata: JSON
  createdAt: String!
  updatedAt: String!
  
  # Related data
  organizations: [Organization!]!
  childTerritories: [Territory!]!
}

# Account territory assignment
type AccountTerritory {
  organization: Organization!
  territory: Territory!
  isPrimary: Boolean!
  assignmentReason: String
  createdAt: String!
}

# AI-generated relationship insights
type RelationshipInsight {
  id: ID!
  insightType: InsightType!
  entityType: EntityType!
  entityId: ID!
  priorityLevel: PriorityLevel
  
  insightTitle: String!
  insightDescription: String!
  recommendedActions: JSON
  confidenceScore: Float
  
  supportingData: JSON
  aiReasoning: String
  
  status: InsightStatus!
  reviewedBy: User
  reviewedAt: String
  
  expiresAt: String
  createdAt: String!
  updatedAt: String!
}

# =====================================
# Enums
# =====================================

enum OrganizationRelationshipType {
  SUBSIDIARY
  DIVISION
  PARTNERSHIP
  SUPPLIER
  CUSTOMER
  JOINT_VENTURE
  ACQUISITION_TARGET
  COMPETITOR
}

enum PersonRelationshipType {
  REPORTS_TO
  MANAGES
  INFLUENCES
  COLLABORATES_WITH
  MENTORS
  PARTNERS_WITH
  COMPETES_WITH
  REFERS_TO
}

enum InteractionFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
  RARELY
}

enum SeniorityLevel {
  ENTRY
  MID
  SENIOR
  LEAD
  MANAGER
  DIRECTOR
  VP
  C_LEVEL
  FOUNDER
}

enum DecisionAuthority {
  FINAL_DECISION
  STRONG_INFLUENCE
  RECOMMENDER
  INFLUENCER
  GATEKEEPER
  END_USER
  BLOCKER
}

enum BudgetAuthorityLevel {
  UNLIMITED
  HIGH
  MEDIUM
  LOW
  NONE
}

enum EngagementLevel {
  CHAMPION
  SUPPORTER
  NEUTRAL
  SKEPTIC
  BLOCKER
}

enum CommunicationPreference {
  EMAIL
  PHONE
  IN_PERSON
  SLACK
  TEAMS
  FORMAL_MEETINGS
}

enum TerritoryType {
  GEOGRAPHIC
  INDUSTRY
  ACCOUNT_SIZE
  PRODUCT_LINE
  HYBRID
}

enum InsightType {
  MISSING_STAKEHOLDER
  RELATIONSHIP_GAP
  INFLUENCE_PATTERN
  DECISION_PATH
  RISK_ALERT
  OPPORTUNITY
  RELATIONSHIP_STRENGTH_CHANGE
}

enum EntityType {
  DEAL
  LEAD
  ORGANIZATION
  PERSON
}

enum PriorityLevel {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum InsightStatus {
  NEW
  REVIEWED
  ACTING_ON
  COMPLETED
  DISMISSED
}

# =====================================
# Input Types
# =====================================

input CreateOrganizationRelationshipInput {
  parentOrgId: ID!
  childOrgId: ID!
  relationshipType: OrganizationRelationshipType!
  ownershipPercentage: Float
  relationshipStrength: Int
  startDate: String
  notes: String
}

input CreatePersonRelationshipInput {
  fromPersonId: ID!
  toPersonId: ID!
  relationshipType: PersonRelationshipType!
  relationshipStrength: Int
  isBidirectional: Boolean
  interactionFrequency: InteractionFrequency
  relationshipContext: String
  notes: String
}

input CreatePersonOrganizationalRoleInput {
  personId: ID!
  organizationId: ID!
  roleTitle: String!
  department: String
  seniorityLevel: SeniorityLevel
  isPrimaryRole: Boolean
  startDate: String
  endDate: String
  reportingStructure: JSON
  responsibilities: JSON
  budgetAuthorityUsd: Float
  teamSize: Int
  notes: String
}

input CreateStakeholderAnalysisInput {
  personId: ID!
  organizationId: ID!
  dealId: ID
  leadId: ID
  influenceScore: Int
  decisionAuthority: DecisionAuthority
  budgetAuthorityLevel: BudgetAuthorityLevel
  engagementLevel: EngagementLevel
  communicationPreference: CommunicationPreference
  preferredMeetingTime: String
  painPoints: JSON
  motivations: JSON
  successMetrics: JSON
  concerns: JSON
  approachStrategy: String
  nextBestAction: String
  lastInteractionDate: String
  lastInteractionType: String
}

input CreateTerritoryInput {
  name: String!
  territoryType: TerritoryType!
  region: String
  country: String
  stateProvince: String
  city: String
  industryFocus: [String!]
  accountSizeRange: String
  parentTerritoryId: ID
  assignedUserId: ID
  metadata: JSON
}

input UpdateStakeholderAnalysisInput {
  influenceScore: Int
  decisionAuthority: DecisionAuthority
  budgetAuthorityLevel: BudgetAuthorityLevel
  engagementLevel: EngagementLevel
  communicationPreference: CommunicationPreference
  preferredMeetingTime: String
  painPoints: JSON
  motivations: JSON
  successMetrics: JSON
  concerns: JSON
  approachStrategy: String
  nextBestAction: String
  lastInteractionDate: String
  lastInteractionType: String
  aiPersonalityProfile: JSON
  aiCommunicationStyle: String
  aiDecisionPattern: String
  aiInfluenceNetwork: JSON
}

input UpdateRelationshipInsightInput {
  status: InsightStatus!
  reviewedAt: String
}

# =====================================
# Response Types
# =====================================

type StakeholderNetworkAnalysis {
  organization: Organization!
  stakeholderCount: Int!
  roleCount: Int!
  relationshipCount: Int!
  stakeholders: [StakeholderAnalysis!]!
  roles: [PersonOrganizationalRole!]!
  relationships: [PersonRelationship!]!
  networkInsights: JSON!
  coverageAnalysis: JSON!
  influenceMap: JSON!
}

type MissingStakeholderRecommendations {
  missingRoles: JSON!
  currentCoverage: Int!
  recommendedCoverage: Int!
  coveragePercentage: Float!
  priorityAdditions: JSON!
  suggestedActions: JSON!
}

# =====================================
# Queries
# =====================================

extend type Query {
  # Organization relationships
  organizationRelationships(organizationId: ID!): [OrganizationRelationship!]!
  
  # Person relationships
  personRelationships(personId: ID!): [PersonRelationship!]!
  organizationPersonRelationships(organizationId: ID!): [PersonRelationship!]!
  
  # Organizational roles
  personOrganizationalRoles(personId: ID): [PersonOrganizationalRole!]!
  organizationRoles(organizationId: ID!, includeInactive: Boolean = false): [PersonOrganizationalRole!]!
  
  # Stakeholder analysis
  stakeholderAnalyses(organizationId: ID, dealId: ID, leadId: ID): [StakeholderAnalysis!]!
  stakeholderAnalysis(id: ID!): StakeholderAnalysis
  
  # Network analysis
  analyzeStakeholderNetwork(organizationId: ID!, dealId: ID, leadId: ID, includeInactiveRoles: Boolean = false): StakeholderNetworkAnalysis!
  findMissingStakeholders(organizationId: ID!, dealId: ID, leadId: ID, industryType: String, dealSize: String): MissingStakeholderRecommendations!
  
  # Territories
  territories(assignedToUser: ID): [Territory!]!
  territory(id: ID!): Territory
  accountTerritories(organizationId: ID!): [AccountTerritory!]!
  
  # Insights
  relationshipInsights(entityType: EntityType, entityId: ID, status: InsightStatus): [RelationshipInsight!]!
  relationshipInsight(id: ID!): RelationshipInsight
}

# =====================================
# Mutations
# =====================================

extend type Mutation {
  # Organization relationships
  createOrganizationRelationship(input: CreateOrganizationRelationshipInput!): OrganizationRelationship!
  deleteOrganizationRelationship(id: ID!): Boolean!
  
  # Person relationships
  createPersonRelationship(input: CreatePersonRelationshipInput!): PersonRelationship!
  deletePersonRelationship(id: ID!): Boolean!
  
  # Organizational roles
  createPersonOrganizationalRole(input: CreatePersonOrganizationalRoleInput!): PersonOrganizationalRole!
  updatePersonOrganizationalRole(id: ID!, input: CreatePersonOrganizationalRoleInput!): PersonOrganizationalRole!
  deletePersonOrganizationalRole(id: ID!): Boolean!
  
  # Stakeholder analysis
  createStakeholderAnalysis(input: CreateStakeholderAnalysisInput!): StakeholderAnalysis!
  updateStakeholderAnalysis(id: ID!, input: UpdateStakeholderAnalysisInput!): StakeholderAnalysis!
  deleteStakeholderAnalysis(id: ID!): Boolean!
  
  # Territories
  createTerritory(input: CreateTerritoryInput!): Territory!
  updateTerritory(id: ID!, input: CreateTerritoryInput!): Territory!
  deleteTerritory(id: ID!): Boolean!
  assignAccountToTerritory(organizationId: ID!, territoryId: ID!, isPrimary: Boolean = true, assignmentReason: String): AccountTerritory!
  removeAccountFromTerritory(organizationId: ID!, territoryId: ID!): Boolean!
  
  # Insights
  updateRelationshipInsight(id: ID!, input: UpdateRelationshipInsightInput!): RelationshipInsight!
  dismissRelationshipInsight(id: ID!): Boolean!
} 