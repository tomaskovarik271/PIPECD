# Workflow Outcome Engine GraphQL Schema
# Provides configuration-driven WFM outcome management

# ===============================
# ENUMS
# ===============================

enum OutcomeType {
  WON
  LOST
  CONVERTED
}

enum RuleType {
  ALLOW_FROM_ANY
  PROBABILITY_THRESHOLD
  STEP_SPECIFIC
  WORKFLOW_SPECIFIC
}

enum BehaviorType {
  KANBAN_VISIBILITY
  BUTTON_AVAILABILITY
  UI_CUSTOMIZATION
}

# ===============================
# TYPES
# ===============================

type BusinessOutcomeRule {
  id: ID!
  ruleName: String!
  description: String
  entityType: String!
  outcomeType: OutcomeType!
  ruleType: RuleType!
  conditions: JSON!
  restrictions: JSON!
  targetStepMapping: JSON!
  sideEffects: JSON!
  isActive: Boolean!
  priority: Int!
  createdAt: String!
  updatedAt: String!
}

type WorkflowBehavior {
  id: ID!
  workflowId: ID!
  behaviorType: BehaviorType!
  configuration: JSON!
  isActive: Boolean!
  createdAt: String!
  updatedAt: String!
}

type OutcomeOption {
  outcome: OutcomeType!
  label: String!
  available: Boolean!
  reason: String
  targetStepId: String
  requiresConfirmation: Boolean!
}

type OutcomeExecutionResult {
  success: Boolean!
  message: String!
  newStepId: String
  newProbability: Float
  conversionCreated: Boolean
  errors: [String!]!
}

# ===============================
# INPUT TYPES
# ===============================

input ExecuteOutcomeInput {
  entityId: ID!
  entityType: String!
  outcome: OutcomeType!
  confirmationReason: String
  additionalData: JSON
}

# ===============================
# QUERIES
# ===============================

type Query {
  # Get available outcomes for an entity
  getAvailableOutcomes(entityId: ID!, entityType: String!): [OutcomeOption!]!
  
  # Get business outcome rules
  getBusinessOutcomeRules(entityType: String, outcomeType: OutcomeType): [BusinessOutcomeRule!]!
  
  # Get workflow behaviors
  getWorkflowBehaviors(workflowId: ID!, behaviorType: BehaviorType): [WorkflowBehavior!]!
}

# ===============================
# MUTATIONS
# ===============================

type Mutation {
  # Execute an outcome (WON/LOST/CONVERTED)
  executeOutcome(input: ExecuteOutcomeInput!): OutcomeExecutionResult!
  
  # Test outcome availability (no actual execution)
  testOutcomeAvailability(entityId: ID!, entityType: String!, outcome: OutcomeType!): OutcomeOption!
} 