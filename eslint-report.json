[{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/e2e/auth.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/e2e/deals-crud.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/e2e/organization-crud.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/e2e/people-crud.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/e2e/pipeline-crud.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/e2e/stage-crud.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/CreateDealModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1766,1769],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1766,1769],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":97,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":97,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3076,3076],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3076,3076],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":98,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":98,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3098,3098],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3098,3098],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":100,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":100,"endColumn":59,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3180,3180],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3180,3180],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":115,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3915,3918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3915,3918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":131,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":131,"endColumn":46,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4451,4451],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4451,4451],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":167,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":167,"endColumn":64},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":200,"column":15,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":200,"endColumn":56,"suggestions":[{"messageId":"addBrackets","fix":{"range":[7711,8614],"text":"{ const num = parseFloat(String(rawValue));\n              if (!isNaN(num)) {\n                valueInputPayload.numberValue = num;\n              } else if (String(rawValue).trim() === '' && !def.isRequired) {\n                // Optional number field, cleared by user, send nothing for this value part\n              } else if (def.isRequired || String(rawValue).trim() !== '') {\n                // Required number or optional with invalid data - this is a validation issue.\n                // For now, don't set numberValue if invalid to let GraphQL validation catch missing required or wrong type.\n                // Or, set an error and prevent submission. For now, we omit if invalid.\n                 console.warn(`Invalid number for required field ${def.fieldName}: ${rawValue}`);\n                 return null; // Don't submit this custom field if number is invalid\n              }\n              break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"never\" of template literal expression.","line":226,"column":60,"nodeType":"MemberExpression","messageId":"invalidType","endLine":226,"endColumn":73},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":285,"column":40,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":285,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":326,"column":34,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":326,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":334,"column":34,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":334,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":346,"column":34,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":346,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":354,"column":38,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":354,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":363,"column":34,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":363,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":374,"column":34,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":374,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":390,"column":114,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":390,"endColumn":120},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":391,"column":82,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":391,"endColumn":123},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .trim on an `any` value.","line":391,"column":119,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":391,"endColumn":123},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":491,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":491,"endColumn":35}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  NumberInput,\n  NumberInputField,\n  Select,\n  VStack,\n  FormErrorMessage,\n  Alert, \n  AlertIcon,\n  Spinner,\n  useToast,\n  Switch,\n  CheckboxGroup,\n  Checkbox,\n  Stack,\n  Text,\n} from '@chakra-ui/react';\nimport { usePeopleStore, Person } from '../stores/usePeopleStore';\nimport { useDealsStore } from '../stores/useDealsStore';\nimport { usePipelinesStore, Pipeline } from '../stores/usePipelinesStore';\nimport { useStagesStore, Stage } from '../stores/useStagesStore';\nimport { DealInput, CustomFieldType } from '../generated/graphql/graphql';\nimport { useCustomFieldDefinitionStore } from '../stores/useCustomFieldDefinitionStore';\nimport { CustomFieldEntityType, CustomFieldDefinition as GraphQLCustomFieldDefinition, CustomFieldValueInput } from '../generated/graphql/graphql';\n\ninterface CreateDealModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onDealCreated: () => void;\n}\n\nfunction CreateDealModal({ isOpen, onClose, onDealCreated }: CreateDealModalProps) {\n  const [name, setName] = useState('');\n  const [localSelectedPipelineId, setLocalSelectedPipelineId] = useState<string>('');\n  const [selectedStageId, setSelectedStageId] = useState<string>('');\n  const [amount, setAmount] = useState<string>('');\n  const [personId, setPersonId] = useState<string>('');\n  const [dealSpecificProbability, setDealSpecificProbability] = useState<string>('');\n  const [expectedCloseDate, setExpectedCloseDate] = useState<string>('');\n  \n  // State for Custom Fields\n  const [customFieldFormValues, setCustomFieldFormValues] = useState<Record<string, any>>({});\n  const [activeDealCustomFields, setActiveDealCustomFields] = useState<GraphQLCustomFieldDefinition[]>([]);\n\n  const { pipelines, fetchPipelines, pipelinesLoading, pipelinesError } = usePipelinesStore();\n\n  const { \n    stages,\n    fetchStages,\n    stagesLoading,\n    stagesError\n  } = useStagesStore();\n\n  // Custom Field Definitions Store\n  const { \n    definitions: allCustomFieldDefs, \n    fetchCustomFieldDefinitions: fetchDefinitions, \n    loading: customFieldsLoading, \n    error: customFieldsError \n  } = useCustomFieldDefinitionStore();\n\n  const { createDeal: createDealAction, dealsError, dealsLoading } = useDealsStore(); \n\n  const { people, fetchPeople, peopleLoading, peopleError } = usePeopleStore();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const toast = useToast();\n\n  useEffect(() => {\n    if (isOpen) {\n      setName('');\n      setLocalSelectedPipelineId('');\n      setSelectedStageId('');\n      setAmount('');\n      setPersonId('');\n      setError(null);\n      setDealSpecificProbability('');\n      setExpectedCloseDate('');\n      setIsLoading(false);\n      \n      // Reset custom field states\n      setCustomFieldFormValues({});\n      setActiveDealCustomFields([]); // Clear previous active fields\n\n      fetchPeople(); \n      fetchPipelines(); \n      // Fetch active custom field definitions for Deals\n      fetchDefinitions(CustomFieldEntityType.Deal, false);\n    }\n  }, [isOpen, fetchPeople, fetchPipelines, fetchDefinitions]);\n\n  useEffect(() => {\n    // Update activeDealCustomFields when definitions are fetched from the store\n    // We filter here to ensure we only use DEAL definitions and they are active (though fetchDefinitions should handle active state)\n    const activeDealDefs = allCustomFieldDefs.filter(\n      def => def.entityType === CustomFieldEntityType.Deal && def.isActive\n    );\n    setActiveDealCustomFields(activeDealDefs);\n  }, [allCustomFieldDefs]);\n\n  useEffect(() => {\n    // Initialize customFieldFormValues with default values when activeDealCustomFields are loaded\n    const initialCustomValues: Record<string, any> = {};\n    activeDealCustomFields.forEach(def => {\n      if (def.fieldType === CustomFieldType.Boolean) {\n        initialCustomValues[def.fieldName] = false;\n      } else if (def.fieldType === CustomFieldType.MultiSelect) {\n        initialCustomValues[def.fieldName] = [];\n      } else {\n        initialCustomValues[def.fieldName] = '';\n      }\n    });\n    setCustomFieldFormValues(initialCustomValues);\n  }, [activeDealCustomFields]);\n\n  useEffect(() => {\n    if (localSelectedPipelineId) {\n        setSelectedStageId('');\n        fetchStages(localSelectedPipelineId);\n    } else {\n        useStagesStore.setState({ stages: [], stagesError: null, stagesLoading: false });\n    }\n  }, [localSelectedPipelineId, fetchStages]);\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsLoading(true);\n    setError(null);\n\n    if (!name.trim()) {\n        setError('Deal name is required.');\n        setIsLoading(false);\n        return;\n    }\n    if (!selectedStageId) {\n        setError('Stage selection is required.');\n        setIsLoading(false);\n        return;\n    }\n\n    try {\n      const dealInput: DealInput = {\n        name: name.trim(),\n        stage_id: selectedStageId,\n        pipeline_id: localSelectedPipelineId,\n        amount: amount ? parseFloat(amount) : null,\n        person_id: personId || null,\n        expected_close_date: expectedCloseDate ? new Date(expectedCloseDate).toISOString() : null,\n        // customFields: [] // Initialize customFields array - will be populated below\n      };\n\n      // Populate customFields for submission\n      const customFieldsSubmission: CustomFieldValueInput[] = activeDealCustomFields\n        .map(def => {\n          const rawValue = customFieldFormValues[def.fieldName];\n          \n          const valueInputPayload: Omit<CustomFieldValueInput, 'definitionId'> = {};\n\n          // Skip if the rawValue is undefined or null, unless it's a boolean (which defaults to false)\n          // or an empty array for multi-select (which is a valid empty state).\n          // For empty strings in required text fields, validation should catch it, but we might send it.\n          if (rawValue === undefined || rawValue === null) {\n            if (def.fieldType === CustomFieldType.Boolean) {\n              // Booleans always have a value (true/false)\n              valueInputPayload.booleanValue = false; // Default to false if null/undefined somehow\n            } else if (def.fieldType === CustomFieldType.MultiSelect && Array.isArray(rawValue) && rawValue.length === 0) {\n              valueInputPayload.selectedOptionValues = []; // Send empty array for multi-select\n            } else if (def.isRequired) {\n              // A required field is null/undefined and not a boolean/empty multi-select - this is a validation issue\n              // For now, we'll let it pass and backend validation or GraphQL type system might catch it if we send nothing.\n              // Or, we could return null here to not send this field value at all if it's truly empty for a required field.\n              // Let's try to send what we have, or nothing if truly empty and not boolean/multi-select.\n               if (rawValue === undefined || rawValue === null) return null; // Skip if no value for non-boolean/non-multiselect\n            } else {\n                 // Optional field with no value\n                 return null; \n            }\n          }\n\n          switch (def.fieldType) {\n            case CustomFieldType.Text:\n              valueInputPayload.stringValue = String(rawValue);\n              break;\n            case CustomFieldType.Dropdown: // Single select dropdown\n              valueInputPayload.stringValue = String(rawValue);\n              break;\n            case CustomFieldType.Number:\n              const num = parseFloat(String(rawValue));\n              if (!isNaN(num)) {\n                valueInputPayload.numberValue = num;\n              } else if (String(rawValue).trim() === '' && !def.isRequired) {\n                // Optional number field, cleared by user, send nothing for this value part\n              } else if (def.isRequired || String(rawValue).trim() !== '') {\n                // Required number or optional with invalid data - this is a validation issue.\n                // For now, don't set numberValue if invalid to let GraphQL validation catch missing required or wrong type.\n                // Or, set an error and prevent submission. For now, we omit if invalid.\n                 console.warn(`Invalid number for required field ${def.fieldName}: ${rawValue}`);\n                 return null; // Don't submit this custom field if number is invalid\n              }\n              break;\n            case CustomFieldType.Boolean:\n              valueInputPayload.booleanValue = Boolean(rawValue);\n              break;\n            case CustomFieldType.Date:\n              // Ensure YYYY-MM-DD format if that's what your DateTime scalar expects for date-only\n              valueInputPayload.dateValue = String(rawValue); \n              break;\n            case CustomFieldType.MultiSelect:\n              if (Array.isArray(rawValue)) {\n                valueInputPayload.selectedOptionValues = rawValue.map(String);\n              }\n              break;\n            default:\n              console.warn(`Unhandled custom field type: ${def.fieldType} for field ${def.fieldName}`);\n              return null; // Skip unhandled types\n          }\n          \n          // Only return an entry if at least one value field was set in valueInputPayload\n          if (Object.keys(valueInputPayload).length > 0) {\n            return { definitionId: def.id, ...valueInputPayload };\n          }\n          return null; // If no value field was set (e.g. optional empty number)\n        })\n        .filter(cf => cf !== null) as CustomFieldValueInput[]; // Filter out any nulls from map\n      \n      dealInput.customFields = customFieldsSubmission;\n\n      const probPercent = parseFloat(dealSpecificProbability);\n      if (!isNaN(probPercent) && probPercent >= 0 && probPercent <= 100) {\n        dealInput.deal_specific_probability = probPercent / 100;\n      } else if (dealSpecificProbability.trim() === '') {\n        dealInput.deal_specific_probability = null;\n      }\n\n      console.log('Calling createDealAction with input:', dealInput);\n\n      const createdDeal = await createDealAction(dealInput);\n\n      if (createdDeal) {\n        const stageOfCreatedDeal = stages.find(s => s.id === createdDeal.stage_id);\n\n        console.log('Deal created via store action:', createdDeal);\n        toast({\n          title: \"Deal Created\",\n          description: `Deal \"${createdDeal.name}\" created${stageOfCreatedDeal ? ` in stage \"${stageOfCreatedDeal.name}\"` : ''}.`,\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n        onDealCreated();\n        onClose();\n      } else {\n        setError(dealsError || 'Failed to create deal. Please check store errors.');\n      }\n\n    } catch (err: unknown) {\n      console.error('Unexpected error during handleSubmit:', err);\n      let message = 'An unexpected error occurred.';\n      if (err instanceof Error) {\n        message = err.message;\n      } else if (typeof err === 'string') {\n        message = err;\n      }\n      setError(message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent as=\"form\" onSubmit={handleSubmit}>\n        <ModalHeader>Create New Deal</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          {error && (\n             <Alert status=\"error\" mb={4} whiteSpace=\"pre-wrap\"> \n                <AlertIcon />\n                {error}\n            </Alert>\n          )}\n          {peopleError && (\n             <Alert status=\"warning\" mb={4}>\n                <AlertIcon />\n                {peopleError}\n            </Alert>\n          )}\n          <VStack spacing={4}>\n            <FormControl isRequired isInvalid={!name.trim() && error?.includes('name')}>\n              <FormLabel>Deal Name</FormLabel>\n              <Input \n                placeholder='Enter deal name' \n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              />\n              {error?.toLowerCase().includes('name') && <FormErrorMessage>{error}</FormErrorMessage>}\n            </FormControl>\n\n            {/* Custom Fields Rendering */}\n            {customFieldsLoading && <Spinner label=\"Loading custom fields...\" />}\n            {customFieldsError && <Alert status=\"error\" mb={4}><AlertIcon />Error loading custom fields: {customFieldsError}</Alert>}\n            \n            {activeDealCustomFields.map((def) => (\n              <FormControl key={def.fieldName} isRequired={def.isRequired} mb={4}>\n                <FormLabel htmlFor={def.fieldName}>{def.fieldLabel}</FormLabel>\n                {(() => {\n                  switch (def.fieldType) {\n                    case CustomFieldType.Text:\n                      return (\n                        <Input\n                          id={def.fieldName}\n                          placeholder={def.fieldLabel}\n                          value={customFieldFormValues[def.fieldName] || ''}\n                          onChange={(e) => setCustomFieldFormValues(prev => ({ ...prev, [def.fieldName]: e.target.value }))}\n                        />\n                      );\n                    case CustomFieldType.Number:\n                      return (\n                        <NumberInput\n                          id={def.fieldName}\n                          value={customFieldFormValues[def.fieldName] || ''}\n                          onChange={(valueString) => setCustomFieldFormValues(prev => ({ ...prev, [def.fieldName]: valueString }))}\n                          allowMouseWheel\n                        >\n                          <NumberInputField placeholder={def.fieldLabel} />\n                        </NumberInput>\n                      );\n                    case CustomFieldType.Date:\n                      return (\n                        <Input\n                          id={def.fieldName}\n                          type=\"date\"\n                          value={customFieldFormValues[def.fieldName] || ''}\n                          onChange={(e) => setCustomFieldFormValues(prev => ({ ...prev, [def.fieldName]: e.target.value }))}\n                        />\n                      );\n                    case CustomFieldType.Boolean:\n                      return (\n                        <Switch\n                          id={def.fieldName}\n                          isChecked={customFieldFormValues[def.fieldName] || false}\n                          onChange={(e) => setCustomFieldFormValues(prev => ({ ...prev, [def.fieldName]: e.target.checked }))}\n                        />\n                      );\n                    case CustomFieldType.Dropdown:\n                      return (\n                        <Select\n                          id={def.fieldName}\n                          placeholder={`Select ${def.fieldLabel}...`}\n                          value={customFieldFormValues[def.fieldName] || ''}\n                          onChange={(e) => setCustomFieldFormValues(prev => ({ ...prev, [def.fieldName]: e.target.value }))}\n                        >\n                          {def.dropdownOptions?.map(opt => (\n                            <option key={opt.value} value={opt.value}>{opt.label}</option>\n                          ))}\n                        </Select>\n                      );\n                    case CustomFieldType.MultiSelect:\n                      return (\n                        <CheckboxGroup \n                          value={customFieldFormValues[def.fieldName] || []} \n                          onChange={(values) => setCustomFieldFormValues(prev => ({ ...prev, [def.fieldName]: values }))}\n                        >\n                          <Stack direction=\"column\">\n                            {def.dropdownOptions?.map(opt => (\n                              <Checkbox key={opt.value} value={opt.value}>{opt.label}</Checkbox>\n                            ))}\n                          </Stack>\n                        </CheckboxGroup>\n                      );\n                    default:\n                      return <Text color=\"red\">Unsupported field type: {def.fieldType}</Text>;\n                  }\n                })()}\n                {def.isRequired && \n                  (!customFieldFormValues[def.fieldName] || \n                    (Array.isArray(customFieldFormValues[def.fieldName]) && customFieldFormValues[def.fieldName].length === 0) ||\n                    (typeof customFieldFormValues[def.fieldName] === 'string' && customFieldFormValues[def.fieldName].trim() === '')\n                  ) && (\n                  <Text fontSize=\"sm\" color=\"red.500\" mt={1}>This field is required.</Text>\n                )}\n              </FormControl>\n            ))}\n\n            <FormControl isRequired isInvalid={!localSelectedPipelineId && error?.toLowerCase().includes('pipeline')}>\n              <FormLabel>Pipeline</FormLabel>\n              <Select \n                placeholder={pipelinesLoading ? 'Loading pipelines...' : 'Select pipeline'}\n                value={localSelectedPipelineId}\n                onChange={(e) => setLocalSelectedPipelineId(e.target.value)}\n                isDisabled={pipelinesLoading || !!pipelinesError}\n              >\n                 {!pipelinesLoading && !pipelinesError && pipelines.map((pipeline: Pipeline) => (\n                    <option key={pipeline.id} value={pipeline.id}>\n                        {pipeline.name}\n                    </option>\n                ))}\n              </Select>\n              {pipelinesError && <FormErrorMessage>Error loading pipelines: {pipelinesError}</FormErrorMessage>}\n              {!localSelectedPipelineId && error?.toLowerCase().includes('pipeline') && <FormErrorMessage>{error}</FormErrorMessage>}\n            </FormControl>\n\n            <FormControl isRequired isInvalid={!selectedStageId && error?.toLowerCase().includes('stage')}>\n              <FormLabel>Stage</FormLabel>\n              <Select \n                placeholder={stagesLoading ? 'Loading stages...' : (localSelectedPipelineId ? 'Select stage' : 'Select pipeline first') }\n                value={selectedStageId}\n                onChange={(e) => setSelectedStageId(e.target.value)}\n                isDisabled={!localSelectedPipelineId || stagesLoading || !!stagesError || stages.length === 0}\n              >\n                 {!stagesLoading && !stagesError && stages.map((stage: Stage) => (\n                    <option key={stage.id} value={stage.id}>\n                        {stage.name} (Order: {stage.order})\n                    </option>\n                ))}\n              </Select>\n              {stagesError && <FormErrorMessage>Error loading stages: {stagesError}</FormErrorMessage>}\n              {!localSelectedPipelineId && stages.length === 0 && !stagesLoading && <FormErrorMessage>Select a pipeline to see stages.</FormErrorMessage>}\n              {!selectedStageId && error?.toLowerCase().includes('stage') && <FormErrorMessage>{error}</FormErrorMessage>}\n            </FormControl>\n\n            <FormControl>\n              <FormLabel>Amount</FormLabel>\n              <NumberInput value={amount} onChange={(valueString) => setAmount(valueString)} precision={2}>\n                <NumberInputField id='amount' placeholder='e.g., 5000.00' />\n              </NumberInput>\n            </FormControl>\n\n            <FormControl mt={4}>\n              <FormLabel htmlFor='expected_close_date'>Expected Close Date</FormLabel>\n              <Input \n                id='expected_close_date'\n                type='date' \n                value={expectedCloseDate}\n                onChange={(e) => setExpectedCloseDate(e.target.value)}\n              />\n            </FormControl>\n\n            <FormControl>\n              <FormLabel>Deal Specific Probability (%)</FormLabel>\n              <NumberInput\n                min={0}\n                max={100}\n                value={dealSpecificProbability}\n                onChange={(valueString) => setDealSpecificProbability(valueString)}\n                allowMouseWheel\n              >\n                <NumberInputField placeholder=\"Optional (e.g., 75)\" />\n              </NumberInput>\n            </FormControl>\n\n            <FormControl>\n              <FormLabel>Link to Person (Optional)</FormLabel>\n              <Select \n                placeholder={peopleLoading ? 'Loading people...' : 'Select person'}\n                value={personId}\n                onChange={(e) => setPersonId(e.target.value)}\n                isDisabled={peopleLoading || !!peopleError}\n              >\n                 {!peopleLoading && !peopleError && people.map((person: Person) => (\n                    <option key={person.id} value={person.id}>\n                        {[person.first_name, person.last_name].filter(Boolean).join(' ') || person.email || `Person ID: ${person.id}`}\n                    </option>\n                ))}\n              </Select>\n            </FormControl>\n\n          </VStack>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button \n            colorScheme='blue'\n            mr={3} \n            type=\"submit\"\n            isLoading={isLoading || dealsLoading}\n            leftIcon={(isLoading || dealsLoading) ? <Spinner size=\"sm\" /> : undefined}\n            onClick={handleSubmit}\n          >\n            Save Deal\n          </Button>\n          <Button variant='ghost' onClick={onClose} isDisabled={isLoading}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default CreateDealModal; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/CreateOrganizationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1057,1060],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1057,1060],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1822,1825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1822,1825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1869,1872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1869,1872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":83,"column":28,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":83,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":111,"column":28,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":111,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":119,"column":28,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":119,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":161,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5906,5909],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5906,5909],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":179,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":179,"endColumn":71,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6553,6553],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[6553,6553],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":192,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7157,7160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7157,7160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":194,"column":13,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":194,"endColumn":90},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":216,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8061,8064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8061,8064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":218,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":218,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":220,"column":106,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":220,"endColumn":111},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":222,"column":27,"nodeType":"Property","messageId":"anyAssignment","endLine":222,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":231,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":231,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":243,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9099,9102],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9099,9102],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"never\" of template literal expression.","line":272,"column":53,"nodeType":"MemberExpression","messageId":"invalidType","endLine":272,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":277,"column":84,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":277,"endColumn":122},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":278,"column":91,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":278,"endColumn":129},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":279,"column":92,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":279,"endColumn":131},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":280,"column":89,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":280,"endColumn":125},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":282,"column":13,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":282,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":330,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":330,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":330,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13120,13123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13120,13123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .graphQLErrors on an `any` value.","line":330,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":330,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":332,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":332,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extensions on an `any` value.","line":332,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":332,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .issues on an `any` value.","line":333,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":333,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":333,"column":40,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":333,"endColumn":116},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":333,"column":50,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":333,"endColumn":110},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":333,"column":50,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":333,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .issues on an `any` value.","line":333,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":333,"endColumn":70},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":333,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":333,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13321,13324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13321,13324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":333,"column":91,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":333,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":333,"column":97,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":333,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .join on an `any` value.","line":333,"column":106,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":333,"endColumn":110},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":334,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":334,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":334,"column":46,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":334,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":334,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":334,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":335,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":335,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":335,"column":40,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":335,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":335,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":335,"endColumn":66},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":347,"column":40,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":347,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":385,"column":40,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":385,"endColumn":70}],"suppressedMessages":[],"errorCount":44,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Textarea,\n  VStack,\n  FormErrorMessage,\n  Alert, \n  AlertIcon,\n  Spinner,\n  useToast,\n  Select,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  Checkbox,\n  SimpleGrid,\n  Box,\n  Text\n} from '@chakra-ui/react';\nimport { useOrganizationsStore } from '../stores/useOrganizationsStore';\nimport { useCustomFieldDefinitionStore } from '../stores/useCustomFieldDefinitionStore';\nimport type { \n    OrganizationInput, \n    CustomFieldValueInput, \n    CustomFieldDefinition\n} from '../generated/graphql/graphql';\nimport { CustomFieldEntityType, CustomFieldType } from '../generated/graphql/graphql';\n\ninterface CreateOrganizationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onOrganizationCreated: () => void;\n}\n\nconst getDefaultValueForFieldType = (fieldType: CustomFieldType): any => {\n    switch (fieldType) {\n        case CustomFieldType.Number:\n            return undefined; \n        case CustomFieldType.Boolean:\n            return false;\n        case CustomFieldType.Date:\n        case CustomFieldType.Text: // Text and Date start as empty strings\n            return ''; \n        case CustomFieldType.Dropdown: // Dropdown (single-select) also starts as empty string\n            return '';\n        case CustomFieldType.MultiSelect:\n            return []; // Multi-select starts as an empty array\n        default:\n            return '';\n    }\n};\n\n// Helper component for rendering individual custom fields\nconst CustomFieldRenderer = ({ \n    definition, \n    value, \n    onChange \n}: { \n    definition: CustomFieldDefinition, \n    value: any, \n    onChange: (fieldName: string, value: any, fieldType: CustomFieldType) => void \n}) => {\n    const { fieldName, fieldLabel, fieldType, isRequired, dropdownOptions } = definition;\n\n    return (\n        <FormControl key={fieldName} isRequired={isRequired} mb={2}>\n            <FormLabel htmlFor={fieldName} fontSize=\"sm\">{fieldLabel}</FormLabel>\n            {fieldType === CustomFieldType.Text && (\n                <Input \n                    id={fieldName}\n                    value={value || ''} \n                    onChange={(e) => onChange(fieldName, e.target.value, fieldType)} \n                />\n            )}\n            {fieldType === CustomFieldType.Number && (\n                <NumberInput \n                    id={fieldName}\n                    value={value === null || value === undefined ? '' : String(value)}\n                    onChange={(valueString) => onChange(fieldName, valueString, fieldType)}\n                >\n                    <NumberInputField />\n                    <NumberInputStepper>\n                        <NumberIncrementStepper />\n                        <NumberDecrementStepper />\n                    </NumberInputStepper>\n                </NumberInput>\n            )}\n            {fieldType === CustomFieldType.Boolean && (\n                <Checkbox \n                    id={fieldName}\n                    isChecked={Boolean(value)} \n                    onChange={(e) => onChange(fieldName, e.target.checked, fieldType)}\n                />\n            )}\n            {fieldType === CustomFieldType.Date && (\n                <Input \n                    id={fieldName}\n                    type=\"date\" \n                    value={value || ''} \n                    onChange={(e) => onChange(fieldName, e.target.value, fieldType)} \n                />\n            )}\n            {fieldType === CustomFieldType.Dropdown && ( // Single Select\n                <Select \n                    id={fieldName}\n                    placeholder={isRequired ? \"Select option (required)\" : \"Select option\"}\n                    value={value || ''} \n                    onChange={(e) => onChange(fieldName, e.target.value, fieldType)} // Store as string\n                >\n                    {dropdownOptions?.map((opt: {value: string, label: string}) => (\n                        <option key={opt.value} value={opt.value}>{opt.label}</option>\n                    ))}\n                </Select>\n            )}\n            {fieldType === CustomFieldType.MultiSelect && (\n                 <VStack align=\"start\" spacing={1}>\n                    {dropdownOptions?.map((opt: {value: string, label: string}) => (\n                        <Checkbox \n                            key={opt.value} \n                            isChecked={(value as string[] | undefined || []).includes(opt.value)}\n                            onChange={(e) => {\n                                const currentValues = (value as string[] | undefined || []);\n                                let newValues: string[];\n                                if (e.target.checked) {\n                                    newValues = [...currentValues, opt.value];\n                                } else {\n                                    newValues = currentValues.filter((v: string) => v !== opt.value);\n                                }\n                                onChange(fieldName, newValues, fieldType);\n                            }}\n                        >\n                            {opt.label}\n                        </Checkbox>\n                    ))}\n                </VStack>\n            )}\n        </FormControl>\n    );\n};\n\nfunction CreateOrganizationModal({ isOpen, onClose, onOrganizationCreated }: CreateOrganizationModalProps) {\n  const [name, setName] = useState('');\n  const [address, setAddress] = useState('');\n  const [notes, setNotes] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [localError, setLocalError] = useState<string | null>(null);\n  const toast = useToast();\n\n  const [customFieldData, setCustomFieldData] = useState<Record<string, any>>({});\n  const [organizationCustomFieldDefinitions, setOrganizationCustomFieldDefinitions] = useState<CustomFieldDefinition[]>([]);\n  const [hasAttemptedDefFetch, setHasAttemptedDefFetch] = useState(false);\n\n  const { \n    createOrganization: createOrganizationAction, \n    organizationsError: storeError, \n  } = useOrganizationsStore();\n\n  const {\n    definitions, // This is the state variable from the store holding all definitions\n    loading: definitionsLoading,\n    fetchCustomFieldDefinitions,\n    error: definitionStoreError,\n  } = useCustomFieldDefinitionStore();\n\n  useEffect(() => {\n    if (isOpen && !hasAttemptedDefFetch) {\n      fetchCustomFieldDefinitions(CustomFieldEntityType.Organization); \n      setHasAttemptedDefFetch(true);\n    }\n  }, [isOpen, hasAttemptedDefFetch, fetchCustomFieldDefinitions]);\n\n  useEffect(() => {\n    if (isOpen) {\n        const orgDefs = (definitions || [])\n            .filter((def: CustomFieldDefinition) => def.entityType === CustomFieldEntityType.Organization && def.isActive)\n            .sort((a: CustomFieldDefinition, b: CustomFieldDefinition) => a.displayOrder - b.displayOrder);\n        \n        setOrganizationCustomFieldDefinitions(orgDefs);\n\n        const initialCustomData: Record<string, any> = {};\n        orgDefs.forEach((def: CustomFieldDefinition) => {\n            initialCustomData[def.fieldName] = getDefaultValueForFieldType(def.fieldType);\n        });\n        setCustomFieldData(initialCustomData);\n\n        // Reset standard fields only when modal opens and definitions are processed\n        setName('');\n        setAddress('');\n        setNotes('');\n        setLocalError(null);\n    } else {\n        // Clear state when modal is closed to ensure fresh state on reopen\n        setHasAttemptedDefFetch(false);\n        setOrganizationCustomFieldDefinitions([]);\n        setCustomFieldData({});\n        setName('');\n        setAddress('');\n        setNotes('');\n        setLocalError(null);\n        setIsLoading(false); // Also reset loading on close\n    }\n  }, [isOpen, definitions]); // Depend on `definitions` from store\n\n  const handleCustomFieldChange = (fieldName: string, value: any, fieldType: CustomFieldType) => {\n    setCustomFieldData(prev => {\n        let processedValue = value;\n        if (fieldType === CustomFieldType.Number) {\n            processedValue = (value === '' || value === null || value === undefined) ? null : parseFloat(value);\n        }\n        return { ...prev, [fieldName]: processedValue };\n    });\n  };\n\n  const processCustomFieldsForSubmit = (): { fields: CustomFieldValueInput[], error?: string } => {\n    const fields: CustomFieldValueInput[] = [];\n    let missingRequiredFieldLabel = '';\n\n    for (const def of organizationCustomFieldDefinitions) {\n      const rawValue = customFieldData[def.fieldName];\n      \n      if (def.isRequired) {\n        let isEmpty = false;\n        if (rawValue === undefined || rawValue === null || rawValue === '') isEmpty = true;\n        else if (Array.isArray(rawValue) && rawValue.length === 0) isEmpty = true;\n        if (isEmpty) {\n            missingRequiredFieldLabel = def.fieldLabel;\n            break;\n        }\n      }\n\n      let valueToSubmit: any = undefined;\n      let includeField = false;\n\n      switch (def.fieldType) {\n        case CustomFieldType.Text:\n          if (rawValue !== '' && rawValue !== null && rawValue !== undefined) { valueToSubmit = String(rawValue); includeField = true; }\n          else if (rawValue === null) { valueToSubmit = null; includeField = true; }\n          break;\n        case CustomFieldType.Number:\n          if (typeof rawValue === 'number' && !isNaN(rawValue)) { valueToSubmit = rawValue; includeField = true; }\n          else if (rawValue === null) { valueToSubmit = null; includeField = true; }\n          break;\n        case CustomFieldType.Boolean:\n          valueToSubmit = Boolean(rawValue); includeField = true; \n          break;\n        case CustomFieldType.Date:\n          if (rawValue && String(rawValue).trim() !== '') { valueToSubmit = String(rawValue); includeField = true; } \n          else if (rawValue === null) { valueToSubmit = null; includeField = true; }\n          break;\n        case CustomFieldType.Dropdown: \n           if (typeof rawValue === 'string' && rawValue.trim() !== '') { valueToSubmit = [rawValue]; includeField = true; }\n           else if (rawValue === null || rawValue === '') { valueToSubmit = null; includeField = true; }\n          break;\n        case CustomFieldType.MultiSelect:\n          if (Array.isArray(rawValue)) { // handles empty array [] too\n             valueToSubmit = rawValue; includeField = true; \n          }\n          else if (rawValue === null) { valueToSubmit = null; includeField = true;}\n          break;\n        default: console.warn(`Unknown field type ${def.fieldType}`);\n      }\n\n      if (includeField) {\n        const fieldInput: CustomFieldValueInput = { definitionId: def.id };\n        if (def.fieldType === CustomFieldType.Text && valueToSubmit !== undefined) fieldInput.stringValue = valueToSubmit;\n        else if (def.fieldType === CustomFieldType.Number && valueToSubmit !== undefined) fieldInput.numberValue = valueToSubmit;\n        else if (def.fieldType === CustomFieldType.Boolean && valueToSubmit !== undefined) fieldInput.booleanValue = valueToSubmit;\n        else if (def.fieldType === CustomFieldType.Date && valueToSubmit !== undefined) fieldInput.dateValue = valueToSubmit; \n        else if ((def.fieldType === CustomFieldType.Dropdown || def.fieldType === CustomFieldType.MultiSelect) && valueToSubmit !== undefined) {\n            fieldInput.selectedOptionValues = valueToSubmit;\n        }\n        if (Object.keys(fieldInput).length > 1) fields.push(fieldInput);\n      }\n    }\n\n    if (missingRequiredFieldLabel) return { fields, error: `Custom field \"${missingRequiredFieldLabel}\" is required.` };\n    return { fields };\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsLoading(true);\n    setLocalError(null);\n\n    if (!name.trim()) {\n        setLocalError('Organization name is required.');\n        setIsLoading(false);\n        return;\n    }\n\n    const { fields: processedCustomFields, error: customFieldsError } = processCustomFieldsForSubmit();\n    if (customFieldsError) {\n        setLocalError(customFieldsError);\n        setIsLoading(false);\n        return;\n    }\n\n    try {\n        const input: OrganizationInput = {\n            name: name.trim(),\n            address: address.trim() || null,\n            notes: notes.trim() || null,\n            customFields: processedCustomFields.length > 0 ? processedCustomFields : null,\n        };\n\n        const createdOrg = await createOrganizationAction(input);\n        \n        if (createdOrg) {\n            toast({ title: 'Organization Created', status: 'success', duration: 3000, isClosable: true });\n            onOrganizationCreated();\n            onClose();\n        } else {\n             setLocalError(storeError || definitionStoreError || 'Failed to create organization.');\n        }\n    } catch (err: unknown) {\n      let message = 'An unexpected error occurred.';\n       if (err instanceof Error) {\n        const gqlError = (err as any).graphQLErrors?.[0];\n        if (gqlError) {\n            const originalError = gqlError.extensions?.originalError;\n            if (originalError?.issues) message = originalError.issues.map((issue: any) => issue.message).join(', ');\n            else if (originalError?.message) message = originalError.message;\n            else if (gqlError.message) message = gqlError.message;\n        } else message = err.message;\n      } else if (typeof err === 'string') message = err;\n      setLocalError(message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered size=\"xl\" scrollBehavior=\"inside\">\n      <ModalOverlay />\n      <ModalContent as=\"form\" onSubmit={handleSubmit}>\n        <ModalHeader>Create New Organization</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          {(localError || storeError || definitionStoreError) && (\n             <Alert status=\"error\" mb={4} whiteSpace=\"pre-wrap\" borderRadius=\"md\">\n                <AlertIcon />\n                <Box flex=\"1\">\n                    {localError && <Text>{localError}</Text>}\n                    {storeError && <Text mt={localError ? 1 : 0}>Store Error: {storeError}</Text>}\n                    {definitionStoreError && <Text mt={(localError || storeError) ? 1 : 0}>Definition Store Error: {definitionStoreError}</Text>}\n                </Box>\n            </Alert>\n          )}\n          <VStack spacing={4} align=\"stretch\">\n            <FormControl isRequired isInvalid={!!localError && localError.includes('name')}>\n              <FormLabel>Organization Name</FormLabel>\n              <Input placeholder='Enter organization name' value={name} onChange={(e) => setName(e.target.value)} />\n              {!!localError && localError.includes('name') && <FormErrorMessage>{localError}</FormErrorMessage>}\n            </FormControl>\n            <FormControl>\n              <FormLabel>Address</FormLabel>\n              <Input placeholder='Enter address (optional)' value={address} onChange={(e) => setAddress(e.target.value)} />\n            </FormControl>\n            <FormControl>\n              <FormLabel>Notes</FormLabel>\n              <Textarea placeholder='Enter notes (optional)' value={notes} onChange={(e) => setNotes(e.target.value)} rows={3} />\n            </FormControl>\n            \n            {definitionsLoading && <Spinner label=\"Loading custom fields...\" /> }\n            {!definitionsLoading && organizationCustomFieldDefinitions.length > 0 && (\n                 <Box borderTopWidth=\"1px\" borderColor=\"gray.200\" mt={5} pt={5}>\n                    <Text fontSize=\"lg\" fontWeight=\"semibold\" mb={3}>Custom Fields</Text>\n                    <SimpleGrid columns={{ base: 1, md: 2 }} spacingX={6} spacingY={3}>\n                        {organizationCustomFieldDefinitions.map((def: CustomFieldDefinition) => (\n                            <CustomFieldRenderer \n                                key={def.id}\n                                definition={def}\n                                value={customFieldData[def.fieldName]}\n                                onChange={handleCustomFieldChange}\n                            />\n                        ))}\n                    </SimpleGrid>\n                 </Box>\n            )}\n             {!definitionsLoading && hasAttemptedDefFetch && organizationCustomFieldDefinitions.length === 0 && !definitionStoreError && (\n                 <Text fontSize=\"sm\" color=\"gray.500\" mt={3}>No custom fields defined for organizations.</Text>\n             )}\n             {/* Consider a more specific message if definitionStoreError is present and no defs are shown */}\n          </VStack>\n        </ModalBody>\n        <ModalFooter borderTopWidth=\"1px\" borderColor=\"gray.200\" mt={3} pt={3}>\n          <Button colorScheme='blue' mr={3} type=\"submit\" isLoading={isLoading} leftIcon={isLoading ? <Spinner size=\"sm\" /> : undefined}>\n            Save Organization\n          </Button>\n          <Button variant='ghost' onClick={onClose} isDisabled={isLoading}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default CreateOrganizationModal; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/CreatePersonForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1278,1281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1278,1281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":72,"column":10,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":72,"endColumn":35,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[2193,2201],"text":"CustomFieldEntityType.Person"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":77,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":77,"endColumn":28,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2321,2321],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2321,2321],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":80,"column":58,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":80,"endColumn":83,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[2494,2502],"text":"CustomFieldEntityType.Person"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":81,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":81,"endColumn":59,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2513,2513],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2513,2513],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3084,3087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3084,3087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":97,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":97,"endColumn":110},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":97,"column":20,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":97,"endColumn":38,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[3197,3206],"text":"CustomFieldType.Boolean"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":114,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":114,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":125,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":127,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":128,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":132,"endColumn":19},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":129,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":129,"endColumn":46,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4385,4606],"text":"{ const num = parseFloat(rawValue);\n            if (!isNaN(num)) cfInput.numberValue = num;\n            else setLocalError((prev) => (prev ? prev + `\\n` : ``) + `Invalid number for '${def.fieldLabel}'.`);\n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":129,"column":36,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":129,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":133,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":135,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":136,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":138,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":137,"column":13,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":137,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":139,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":141,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":142,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":144,"endColumn":19},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":186,"column":20,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":186,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":245,"column":16,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":245,"endColumn":40,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[9660,9666],"text":"CustomFieldType.Text"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":247,"column":26,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":247,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":251,"column":16,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":251,"endColumn":42,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[9933,9941],"text":"CustomFieldType.Number"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":253,"column":26,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":253,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":263,"column":16,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":263,"endColumn":43,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[10463,10472],"text":"CustomFieldType.Boolean"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":265,"column":30,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":265,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":271,"column":16,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":271,"endColumn":40,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[10789,10795],"text":"CustomFieldType.Date"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":274,"column":26,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":274,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":278,"column":16,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":278,"endColumn":44,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[11092,11102],"text":"CustomFieldType.Dropdown"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":281,"column":26,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":281,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":290,"column":16,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":290,"endColumn":48,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[11680,11694],"text":"CustomFieldType.MultiSelect"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":293,"column":26,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":293,"endColumn":62}],"suppressedMessages":[],"errorCount":31,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport {\n  Button,\n  Checkbox,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  ModalBody,\n  ModalFooter,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  Select,\n  Spinner,\n  Stack,\n  Textarea,\n  useToast,\n  Alert,\n  AlertIcon,\n} from '@chakra-ui/react';\nimport type {\n  PersonInput,\n  CustomFieldValueInput,\n  CustomFieldDefinition,\n  CustomFieldEntityType,\n  CustomFieldType as GQLCustomFieldType, // Renamed to avoid conflict\n} from '../generated/graphql/graphql';\nimport { usePeopleStore } from '../stores/usePeopleStore';\nimport { useOrganizationsStore, Organization } from '../stores/useOrganizationsStore';\nimport { useCustomFieldDefinitionStore } from '../stores/useCustomFieldDefinitionStore';\n\ninterface CreatePersonFormProps {\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nfunction CreatePersonForm({ onClose, onSuccess }: CreatePersonFormProps) {\n  const [formData, setFormData] = useState<PersonInput>({\n    first_name: '',\n    last_name: '',\n    email: '',\n    phone: '',\n    notes: '',\n    organization_id: null,\n    customFields: [], // Initialize customFields\n  });\n  const [customFieldData, setCustomFieldData] = useState<Record<string, any>>({});\n  const [isLoading, setIsLoading] = useState(false);\n  const toast = useToast();\n\n  const {\n    organizations,\n    organizationsLoading: orgLoading,\n    organizationsError: orgError,\n    fetchOrganizations,\n  } = useOrganizationsStore();\n\n  const { createPerson: createPersonAction, peopleError } = usePeopleStore();\n  \n  // Correctly select state and actions from useCustomFieldDefinitionStore\n  const allDefinitions = useCustomFieldDefinitionStore(state => state.definitions);\n  const definitionsLoading = useCustomFieldDefinitionStore(state => state.loading);\n  const definitionsError = useCustomFieldDefinitionStore(state => state.error);\n  const fetchDefinitions = useCustomFieldDefinitionStore(state => state.fetchCustomFieldDefinitions);\n\n  const [localError, setLocalError] = useState<string | null>(null);\n\n  const personCustomFieldDefinitions = allDefinitions.filter(\n    d => d.entityType === 'PERSON' && d.isActive\n  );\n\n  useEffect(() => {\n    if (!orgLoading && (!organizations || organizations.length === 0)) {\n      fetchOrganizations();\n    }\n    // Fetch custom field definitions for Person if not already loaded\n    if (!definitionsLoading && !allDefinitions.some(d => d.entityType === 'PERSON')) {\n      fetchDefinitions('PERSON' as CustomFieldEntityType);\n    }\n  }, [organizations, orgLoading, fetchOrganizations, definitionsLoading, allDefinitions, fetchDefinitions]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    if (name === 'organization_id' && value === '') {\n      setFormData(prev => ({ ...prev, [name]: null }));\n    } else {\n      setFormData(prev => ({ ...prev, [name]: value }));\n    }\n  };\n\n  const handleCustomFieldChange = (fieldName: string, value: any, type: GQLCustomFieldType) => {\n    setCustomFieldData(prev => ({\n      ...prev,\n      [fieldName]: type === 'BOOLEAN' ? (value as React.ChangeEvent<HTMLInputElement>).target.checked : value,\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setLocalError(null);\n\n    if (!formData.first_name && !formData.last_name && !formData.email) {\n      setLocalError('Please provide at least a first name, last name, or email.');\n      setIsLoading(false);\n      return;\n    }\n\n    const processedCustomFields: CustomFieldValueInput[] = personCustomFieldDefinitions\n      .map(def => {\n        const rawValue = customFieldData[def.fieldName];\n        if (rawValue === undefined || rawValue === null || rawValue === '') {\n          // Check for required fields if value is not provided\n          if (def.isRequired) {\n            setLocalError((prev) => (prev ? prev + `\\n` : ``) + `Field '${def.fieldLabel}' is required.`);\n          }\n          return null; // No value or empty value\n        }\n\n        const cfInput: CustomFieldValueInput = { definitionId: def.id };\n        switch (def.fieldType) {\n          case 'TEXT':\n            cfInput.stringValue = String(rawValue);\n            break;\n          case 'NUMBER':\n            const num = parseFloat(rawValue);\n            if (!isNaN(num)) cfInput.numberValue = num;\n            else setLocalError((prev) => (prev ? prev + `\\n` : ``) + `Invalid number for '${def.fieldLabel}'.`);\n            break;\n          case 'BOOLEAN':\n            cfInput.booleanValue = Boolean(rawValue);\n            break;\n          case 'DATE':\n            cfInput.dateValue = rawValue; // Assuming YYYY-MM-DD string\n            break;\n          case 'DROPDOWN':\n            cfInput.selectedOptionValues = [String(rawValue)];\n            break;\n          case 'MULTI_SELECT': // TODO: Handle multi-select properly\n            cfInput.selectedOptionValues = Array.isArray(rawValue) ? rawValue.map(String) : (rawValue ? [String(rawValue)] : []);\n            break;\n        }\n        return cfInput;\n      })\n      .filter(Boolean) as CustomFieldValueInput[];\n      \n    if (localError) { // if errors were set during custom field processing\n        setIsLoading(false);\n        return;\n    }\n\n    const mutationInput: PersonInput = {\n      first_name: formData.first_name || null,\n      last_name: formData.last_name || null,\n      email: formData.email || null,\n      phone: formData.phone || null,\n      notes: formData.notes || null,\n      organization_id: formData.organization_id || null,\n      customFields: processedCustomFields.length > 0 ? processedCustomFields : null,\n    };\n\n    try {\n      const createdPerson = await createPersonAction(mutationInput);\n      if (createdPerson) {\n        toast({ title: 'Person Created', status: 'success', duration: 3000, isClosable: true });\n        onSuccess();\n        onClose();\n      } else {\n        setLocalError(peopleError || 'Failed to create person. Please try again.');\n      }\n    } catch (error: unknown) {\n      console.error(\"Unexpected error during handleSubmit:\", error);\n      let message = 'An unexpected error occurred.';\n      if (error instanceof Error) message = error.message;\n      else if (typeof error === 'string') message = error;\n      setLocalError(message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <ModalBody>\n        {(localError || peopleError) && (\n          <Alert status=\"error\" mb={4} whiteSpace=\"pre-wrap\">\n            <AlertIcon />\n            {localError || peopleError}\n          </Alert>\n        )}\n        <Stack spacing={4}>\n          <FormControl isInvalid={!!localError && (!formData.first_name && !formData.last_name && !formData.email)}>\n            <FormLabel>First Name</FormLabel>\n            <Input name=\"first_name\" value={formData.first_name || ''} onChange={handleChange} />\n          </FormControl>\n          <FormControl isInvalid={!!localError && (!formData.first_name && !formData.last_name && !formData.email)}>\n            <FormLabel>Last Name</FormLabel>\n            <Input name=\"last_name\" value={formData.last_name || ''} onChange={handleChange} />\n          </FormControl>\n          <FormControl isInvalid={!!localError && (!formData.first_name && !formData.last_name && !formData.email)}>\n            <FormLabel>Email</FormLabel>\n            <Input type=\"email\" name=\"email\" value={formData.email || ''} onChange={handleChange} />\n            {!!localError && (!formData.first_name && !formData.last_name && !formData.email) && <FormErrorMessage>{localError}</FormErrorMessage>}\n          </FormControl>\n          <FormControl>\n            <FormLabel>Phone</FormLabel>\n            <Input type=\"tel\" name=\"phone\" value={formData.phone || ''} onChange={handleChange} />\n          </FormControl>\n          <FormControl>\n            <FormLabel>Organization</FormLabel>\n            {orgLoading && <Spinner size=\"sm\" />}\n            {orgError && <Alert status=\"error\" size=\"sm\"><AlertIcon />{orgError}</Alert>}\n            {!orgLoading && !orgError && (\n              <Select\n                name=\"organization_id\"\n                value={formData.organization_id || ''}\n                onChange={handleChange}\n                placeholder=\"Select organization (optional)\"\n                isDisabled={orgLoading || !organizations || organizations.length === 0}\n              >\n                {organizations && organizations.map((org: Organization) => (\n                  <option key={org.id} value={org.id}>{org.name}</option>\n                ))}\n              </Select>\n            )}\n            {(!orgLoading && (orgError || (!organizations || organizations.length === 0))) &&\n              <FormErrorMessage>\n                {orgError ? \"Could not load organizations.\" : \"No organizations found. Create one first.\"}\n              </FormErrorMessage>}\n          </FormControl>\n          <FormControl>\n            <FormLabel>Notes</FormLabel>\n            <Textarea name=\"notes\" value={formData.notes || ''} onChange={handleChange} />\n          </FormControl>\n\n          {/* Custom Fields Section */}\n          {definitionsLoading && <Spinner />}\n          {definitionsError && <Alert status=\"error\"><AlertIcon />Error loading custom fields: {definitionsError}</Alert>}\n          {personCustomFieldDefinitions.map((def: CustomFieldDefinition) => (\n            <FormControl key={def.id} isRequired={def.isRequired}>\n              <FormLabel>{def.fieldLabel}</FormLabel>\n              {def.fieldType === 'TEXT' && (\n                <Input\n                  value={customFieldData[def.fieldName] || ''}\n                  onChange={(e) => handleCustomFieldChange(def.fieldName, e.target.value, def.fieldType)}\n                />\n              )}\n              {def.fieldType === 'NUMBER' && (\n                <NumberInput\n                  value={customFieldData[def.fieldName] || ''}\n                  onChange={(valueString) => handleCustomFieldChange(def.fieldName, valueString, def.fieldType)}\n                >\n                  <NumberInputField />\n                  <NumberInputStepper>\n                    <NumberIncrementStepper />\n                    <NumberDecrementStepper />\n                  </NumberInputStepper>\n                </NumberInput>\n              )}\n              {def.fieldType === 'BOOLEAN' && (\n                <Checkbox\n                  isChecked={customFieldData[def.fieldName] || false}\n                  onChange={(e) => handleCustomFieldChange(def.fieldName, e, def.fieldType)}\n                >\n                  Enabled\n                </Checkbox>\n              )}\n              {def.fieldType === 'DATE' && (\n                <Input\n                  type=\"date\"\n                  value={customFieldData[def.fieldName] || ''}\n                  onChange={(e) => handleCustomFieldChange(def.fieldName, e.target.value, def.fieldType)}\n                />\n              )}\n              {def.fieldType === 'DROPDOWN' && (\n                <Select\n                  placeholder={`Select ${def.fieldLabel}`}\n                  value={customFieldData[def.fieldName] || ''}\n                  onChange={(e) => handleCustomFieldChange(def.fieldName, e.target.value, def.fieldType)}\n                >\n                  {def.dropdownOptions?.map(opt => (\n                    <option key={opt.value} value={opt.value}>{opt.label}</option>\n                  ))}\n                </Select>\n              )}\n              {/* TODO: Implement proper MULTI_SELECT component */}\n              {def.fieldType === 'MULTI_SELECT' && (\n                 <Textarea // Placeholder for MULTI_SELECT\n                  placeholder={`Enter values for ${def.fieldLabel}, comma-separated`}\n                  value={customFieldData[def.fieldName] || ''} // Assuming storing as comma-separated string for now\n                  onChange={(e) => handleCustomFieldChange(def.fieldName, e.target.value.split(',').map(s => s.trim()), def.fieldType)}\n                />\n              )}\n               {/* Display error for this specific field if its required and not filled */} \n              {localError && def.isRequired && (customFieldData[def.fieldName] === undefined || customFieldData[def.fieldName] === null || customFieldData[def.fieldName] === '') && \n                <FormErrorMessage>{`Field '${def.fieldLabel}' is required.`}</FormErrorMessage>}\n            </FormControl>\n          ))}\n        </Stack>\n      </ModalBody>\n      <ModalFooter>\n        <Button variant=\"ghost\" mr={3} onClick={onClose} disabled={isLoading}>\n          Cancel\n        </Button>\n        <Button colorScheme=\"blue\" type=\"submit\" isLoading={isLoading}>\n          Save Person\n        </Button>\n      </ModalFooter>\n    </form>\n  );\n}\n\nexport default CreatePersonForm; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/EditDealModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Textarea' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useAppStore' is defined but never used.","line":27,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2061,2064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2061,2064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":93,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":93,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2996,2996],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2996,2996],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":94,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":94,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3018,3018],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3018,3018],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":96,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":96,"endColumn":70,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3099,3099],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3099,3099],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4672,4675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4672,4675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":209,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":209,"endColumn":41,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[8314,8314],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[8314,8314],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":298,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":298,"endColumn":64},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":315,"column":17,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":315,"endColumn":58,"suggestions":[{"messageId":"addBrackets","fix":{"range":[13693,14441],"text":"{ const num = parseFloat(String(rawValue));\n                valueToSet.numberValue = !isNaN(num) ? num : null;\n                // If required and empty/invalid, backend Zod schema should catch it if it expects a number.\n                // Frontend could also add validation here.\n                if (valueToSet.numberValue === null && String(rawValue).trim() !== '') {\n                    // If it was not an empty string but failed to parse, treat as explicit null.\n                    // Or, if required, this might be an error state to flag earlier.\n                } else if (String(rawValue).trim() === '' && !def.isRequired) {\n                    valueToSet = null; // Don't submit if optional and empty\n                }\n                break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":327,"column":60,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":327,"endColumn":68},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":390,"column":40,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":390,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":519,"column":28,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":519,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":532,"column":28,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":532,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":548,"column":28,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":548,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":560,"column":32,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":560,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":573,"column":28,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":573,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":590,"column":28,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":590,"endColumn":70},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":619,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":619,"endColumn":35}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  NumberInput,\n  NumberInputField,\n  Select,\n  VStack,\n  FormErrorMessage,\n  Alert, \n  AlertIcon,\n  Spinner,\n  Textarea,\n  CheckboxGroup,\n  Checkbox,\n  Switch,\n} from '@chakra-ui/react';\nimport { useAppStore } from '../stores/useAppStore';\nimport { usePeopleStore, Person } from '../stores/usePeopleStore';\nimport { useDealsStore, Deal } from '../stores/useDealsStore';\nimport { usePipelinesStore, Pipeline } from '../stores/usePipelinesStore';\nimport { useStagesStore } from '../stores/useStagesStore';\nimport type { DealInput, Stage } from '../generated/graphql/graphql';\nimport { \n  CustomFieldDefinition, \n  CustomFieldEntityType, \n  CustomFieldType, \n  CustomFieldValueInput,\n} from '../generated/graphql/graphql';\nimport { useCustomFieldDefinitionStore } from '../stores/useCustomFieldDefinitionStore';\n\ninterface EditDealModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onDealUpdated: () => void;\n  deal: Deal | null;\n}\n\nfunction EditDealModal({ isOpen, onClose, onDealUpdated, deal }: EditDealModalProps) {\n  const [name, setName] = useState('');\n  const [selectedPipelineId, setSelectedPipelineId] = useState<string>('');\n  const [selectedStageId, setSelectedStageId] = useState<string>('');\n  const [initialPipelineId, setInitialPipelineId] = useState<string | null>(null);\n  const [initialStageId, setInitialStageId] = useState<string | null>(null);\n  const [amount, setAmount] = useState<string>('');\n  const [personId, setPersonId] = useState<string>(''); \n  const [dealSpecificProbability, setDealSpecificProbability] = useState<string>('');\n  const [expectedCloseDate, setExpectedCloseDate] = useState<string>('');\n\n  // Custom Fields State\n  const [activeDealCustomFields, setActiveDealCustomFields] = useState<CustomFieldDefinition[]>([]);\n  const [customFieldFormValues, setCustomFieldFormValues] = useState<Record<string, any>>({});\n\n  // Store State & Actions\n  const { pipelines, fetchPipelines, pipelinesLoading, pipelinesError } = usePipelinesStore();\n\n  // Stage related state from useStagesStore\n  const {\n    stages,\n    fetchStages,\n    stagesLoading,\n    stagesError\n  } = useStagesStore();\n\n  // Deals state & actions from useDealsStore\n  const { updateDeal: updateDealAction, dealsError, dealsLoading } = useDealsStore();\n\n  // Custom Field Definitions store\n  const { \n    definitions: customFieldDefinitions,\n    fetchCustomFieldDefinitions, \n    loading: customFieldDefinitionsLoading,\n    error: customFieldDefinitionsError\n  } = useCustomFieldDefinitionStore();\n\n  // People state from usePeopleStore\n  const { people, fetchPeople, peopleLoading, peopleError } = usePeopleStore();\n\n  const [isLoading, setIsLoading] = useState(false); \n  const [error, setError] = useState<string | null>(null); \n\n  useEffect(() => {\n    if (isOpen) {\n      fetchPeople(); \n      fetchPipelines();\n      // Fetch active custom field definitions for Deals\n      fetchCustomFieldDefinitions(CustomFieldEntityType.Deal, false); \n      // Clear stages using useStagesStore when modal opens, before potentially fetching new ones\n      useStagesStore.setState({ stages: [], stagesError: null, stagesLoading: false });\n    }\n  }, [isOpen, fetchPeople, fetchPipelines, fetchCustomFieldDefinitions]); \n\n  useEffect(() => {\n    if (deal) {\n      console.log(\"[EditDealModal] Initializing form. Deal data:\", JSON.stringify(deal, null, 2));\n      console.log(\"[EditDealModal] Initializing form. Active Deal Custom Field Definitions:\", JSON.stringify(activeDealCustomFields, null, 2));\n\n      setName(deal.name || '');\n      setAmount(deal.amount != null ? String(deal.amount) : '');\n      setPersonId(deal.person_id || ''); \n      setDealSpecificProbability(\n        deal.deal_specific_probability != null \n          ? String(Math.round(deal.deal_specific_probability * 100)) \n          : ''\n      );\n      setExpectedCloseDate(deal.expected_close_date ? new Date(deal.expected_close_date).toISOString().split('T')[0] : '');\n      setError(null);\n      setIsLoading(false);\n      \n      const pipelineIdFromDeal = deal.stage?.pipeline_id;\n      const stageIdFromDeal = deal.stage_id || deal.stage?.id;\n      \n      setInitialPipelineId(pipelineIdFromDeal || null);\n      setInitialStageId(stageIdFromDeal || null);\n      setSelectedPipelineId(pipelineIdFromDeal || '');\n      setSelectedStageId(''); \n      \n      // Initialize custom field form values\n      if (activeDealCustomFields.length > 0) {\n        const initialCfValues: Record<string, any> = {};\n        activeDealCustomFields.forEach(def => {\n          const cfValueFromDeal = deal.customFieldValues?.find(\n            cfv => cfv.definition.id === def.id\n          );\n          console.log(`[EditDealModal] For def ${def.fieldName} (ID: ${def.id}), found cfValueFromDeal:`, JSON.stringify(cfValueFromDeal, null, 2));\n\n          if (cfValueFromDeal) {\n            switch (def.fieldType) {\n              case CustomFieldType.Text:\n              case CustomFieldType.Dropdown: \n                initialCfValues[def.fieldName] = cfValueFromDeal.stringValue || '';\n                break;\n              case CustomFieldType.Number:\n                initialCfValues[def.fieldName] = cfValueFromDeal.numberValue !== null && cfValueFromDeal.numberValue !== undefined \n                  ? cfValueFromDeal.numberValue \n                  : '';\n                break;\n              case CustomFieldType.Boolean:\n                initialCfValues[def.fieldName] = cfValueFromDeal.booleanValue ?? false;\n                break;\n              case CustomFieldType.Date:\n                initialCfValues[def.fieldName] = cfValueFromDeal.dateValue \n                  ? new Date(cfValueFromDeal.dateValue).toISOString().split('T')[0] // Format to YYYY-MM-DD\n                  : '';\n                break;\n              case CustomFieldType.MultiSelect:\n                initialCfValues[def.fieldName] = cfValueFromDeal.selectedOptionValues || [];\n                break;\n              default:\n                initialCfValues[def.fieldName] = '';\n            }\n          } else {\n            // Default empty values if not found on deal\n            switch (def.fieldType) {\n              case CustomFieldType.Boolean:\n                initialCfValues[def.fieldName] = false;\n                break;\n              case CustomFieldType.MultiSelect:\n                initialCfValues[def.fieldName] = [];\n                break;\n              case CustomFieldType.Number:\n                 initialCfValues[def.fieldName] = ''; // Or null / undefined, to be handled by NumberInput\n                 break;\n              default:\n                initialCfValues[def.fieldName] = '';\n            }\n          }\n        });\n        setCustomFieldFormValues(initialCfValues);\n      } else {\n        // No active custom fields, reset form values\n        setCustomFieldFormValues({});\n      }\n      \n    } else {\n        setName('');\n        setAmount('');\n        setPersonId('');\n        setSelectedPipelineId('');\n        setSelectedStageId('');\n        setInitialPipelineId(null);\n        setInitialStageId(null);\n        setDealSpecificProbability('');\n        setExpectedCloseDate('');\n        // Reset custom field form values if deal is null\n        setCustomFieldFormValues({});\n    }\n  }, [deal, activeDealCustomFields]); // Depend on activeDealCustomFields to re-init if they load after deal\n\n  useEffect(() => {\n    // This effect is responsible for fetching stages for the pipeline\n    // that is currently relevant to the modal. This could be the deal's initial pipeline\n    // (via selectedPipelineId being set from `deal` prop) or a pipeline chosen by the user in the modal's dropdown.\n    \n    // `selectedPipelineId` is the primary driver here.\n    // It's updated when `deal` changes (by the useEffect above) or when the user selects a new pipeline in this modal.\n    if (selectedPipelineId) { \n        console.log(`[EditDealModal] Fetching stages for selected pipeline in modal: ${selectedPipelineId}. Deal ID: ${deal?.id}`);\n        // Effect 1 (on isOpen) clears global stages. This call will populate them for the current pipeline context.\n        fetchStages(selectedPipelineId);\n    } else {\n        // This case might occur if a deal has no pipeline and modal opens, or if somehow selection is cleared.\n        console.log(`[EditDealModal] No selectedPipelineId for modal. Clearing stages in store.`);\n        useStagesStore.setState({ stages: [], stagesError: null, stagesLoading: false });\n    }\n    // We depend on `selectedPipelineId` because if the user changes it in the modal, we need to refetch.\n    // We depend on `deal` because if a new deal is passed in (even if `selectedPipelineId` happens to resolve to the same string value\n    // as the previous deal), we still need this effect to run to ensure `fetchStages` is called for the new deal's context\n    // after Effect 1 has cleared the stages.\n    // `fetchStages` itself is a stable dependency.\n  }, [selectedPipelineId, deal, fetchStages]); // Key: `deal` ensures re-run for new deal, `selectedPipelineId` for dropdown change\n\n  useEffect(() => {\n    console.log(`[EditDealModal] Effect 4 CHECK: initialStageId=${initialStageId}, initialPipelineId=${initialPipelineId}, selectedPipelineIdModal=${selectedPipelineId}, stages_length=${stages?.length}`);\n    if (initialStageId && initialPipelineId && selectedPipelineId === initialPipelineId && Array.isArray(stages) && stages.length > 0) {\n       console.log(`[EditDealModal] Effect 4: Conditions MET. Checking for stage existence. initialStageId=${initialStageId}`);\n       const stageExists = stages.some((s: Stage) => s.id === initialStageId);\n       console.log(`[EditDealModal] Effect 4: Stage ${initialStageId} exists in loaded stages: ${stageExists}`);\n       if (stageExists) {\n           console.log(`[EditDealModal] Effect 4: Setting selectedStageId to: ${initialStageId}`);\n           setSelectedStageId(initialStageId);\n           setInitialStageId(null); // Prevent re-running for this reason\n       } else {\n           console.warn(`[EditDealModal] Effect 4: Initial stage ID ${initialStageId} not found in loaded stages for pipeline ${initialPipelineId}. Current stages:`, stages);\n           setInitialStageId(null); \n       }\n    } else {\n      console.log(`[EditDealModal] Effect 4: Conditions NOT MET or stages not loaded/empty.`);\n    }\n    // Keep `setSelectedStageId` out of deps as per React guidelines for setters if not strictly needed for logic re-evaluation based on its change\n  }, [stages, initialStageId, initialPipelineId, selectedPipelineId]);\n\n  // Effect to filter and set activeDealCustomFields once definitions are loaded from store\n  useEffect(() => {\n    if (customFieldDefinitions && customFieldDefinitions.length > 0) {\n      const activeDefsForDeal = customFieldDefinitions.filter(\n        def => def.entityType === CustomFieldEntityType.Deal && def.isActive\n      );\n      setActiveDealCustomFields(activeDefsForDeal);\n    } else {\n      setActiveDealCustomFields([]);\n    }\n  }, [customFieldDefinitions]);\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    if (!deal) return; \n\n    setIsLoading(true);\n    setError(null);\n\n    if (!name.trim()) {\n      setError('Deal name is required.');\n      setIsLoading(false);\n      return;\n    }\n    if (!selectedPipelineId) {\n        setError('Pipeline selection is required.');\n        setIsLoading(false);\n        return;\n    }\n    if (!selectedStageId) {\n        setError('Stage selection is required.');\n        setIsLoading(false);\n        return;\n    }\n\n    try {\n      const dealInput: DealInput = {\n        name: name.trim(),\n        stage_id: selectedStageId,\n        pipeline_id: selectedPipelineId,\n        amount: amount ? parseFloat(amount) : undefined,\n        person_id: personId || undefined,\n        expected_close_date: expectedCloseDate ? new Date(expectedCloseDate).toISOString() : undefined,\n      };\n\n      const probPercent = parseFloat(dealSpecificProbability);\n      if (!isNaN(probPercent) && probPercent >= 0 && probPercent <= 100) {\n        dealInput.deal_specific_probability = probPercent / 100;\n      } else if (dealSpecificProbability.trim() === '') {\n        dealInput.deal_specific_probability = null;\n      }\n\n      // Prepare custom fields for submission\n      const customFieldsToSubmit: CustomFieldValueInput[] = [];\n      if (activeDealCustomFields.length > 0) {\n        for (const def of activeDealCustomFields) {\n          const rawValue = customFieldFormValues[def.fieldName];\n          let valueToSet: CustomFieldValueInput | null = null;\n\n          // Only include the field if it has a value or if it's required (even if empty, to allow backend validation)\n          // Or if it's boolean (false is a valid value)\n          // Or if it's a multi-select (empty array is a valid value to clear it)\n          const isValueSet = rawValue !== undefined && rawValue !== null && rawValue !== '';\n          const isMultiSelectWithValue = def.fieldType === CustomFieldType.MultiSelect && Array.isArray(rawValue);\n          const isBoolean = def.fieldType === CustomFieldType.Boolean;\n\n          if (isValueSet || isBoolean || isMultiSelectWithValue || def.isRequired) {\n            valueToSet = { definitionId: def.id };\n            switch (def.fieldType) {\n              case CustomFieldType.Text:\n                valueToSet.stringValue = String(rawValue || '');\n                break;\n              case CustomFieldType.Number:\n                const num = parseFloat(String(rawValue));\n                valueToSet.numberValue = !isNaN(num) ? num : null;\n                // If required and empty/invalid, backend Zod schema should catch it if it expects a number.\n                // Frontend could also add validation here.\n                if (valueToSet.numberValue === null && String(rawValue).trim() !== '') {\n                    // If it was not an empty string but failed to parse, treat as explicit null.\n                    // Or, if required, this might be an error state to flag earlier.\n                } else if (String(rawValue).trim() === '' && !def.isRequired) {\n                    valueToSet = null; // Don't submit if optional and empty\n                }\n                break;\n              case CustomFieldType.Date:\n                valueToSet.dateValue = rawValue ? new Date(rawValue).toISOString() : null;\n                 if (!rawValue && !def.isRequired) valueToSet = null;\n                break;\n              case CustomFieldType.Boolean:\n                valueToSet.booleanValue = Boolean(rawValue || false);\n                break;\n              case CustomFieldType.Dropdown:\n                valueToSet.stringValue = String(rawValue || '');\n                 if (!rawValue && !def.isRequired) valueToSet = null; // Don't submit if optional and unselected\n                break;\n              case CustomFieldType.MultiSelect:\n                valueToSet.selectedOptionValues = Array.isArray(rawValue) ? rawValue.map(String) : [];\n                // For multi-select, an empty array is a valid value (means nothing selected)\n                // So, we don't nullify `valueToSet` even if `rawValue` is empty array.\n                break;\n            }\n          }\n          if (valueToSet) {\n            customFieldsToSubmit.push(valueToSet);\n          }\n        }\n        dealInput.customFields = customFieldsToSubmit;\n      } else {\n        // If there are no active custom fields, ensure customFields is not part of payload \n        // or explicitly an empty array if the backend expects it for updates to clear all.\n        // Based on current backend, sending undefined is fine (it won't try to update custom_field_values).\n        // If we wanted to clear all CFs, we'd send `customFields: []`.\n      }\n\n      const updatedDeal = await updateDealAction(deal.id, dealInput);\n\n      if (updatedDeal) {\n          onDealUpdated(); \n          onClose();       \n      } else {\n          setError(dealsError || 'Failed to update deal. Please check store errors.');\n      }\n\n    } catch (err: unknown) {\n      let message = 'An unexpected error occurred while updating deal.';\n      if (err instanceof Error) {\n        message = err.message;\n      } else if (typeof err === 'string') {\n        message = err;\n      }\n      setError(message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (!isOpen || !deal) {\n      return null;\n  }\n\n  // Filter stages for the dropdown based on the locally selected pipeline in the modal\n  const filteredStagesForModal = selectedPipelineId \n    ? stages.filter((stage: Stage) => stage.pipeline_id === selectedPipelineId)\n    : []; // If no pipeline selected in modal, show no stages\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent as=\"form\" onSubmit={handleSubmit}>\n        <ModalHeader>Edit Deal: {deal.name}</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          {error && (\n             <Alert status=\"error\" mb={4} whiteSpace=\"pre-wrap\">\n                <AlertIcon />\n                {error}\n            </Alert>\n          )}\n          {peopleError && ( \n             <Alert status=\"warning\" mb={4}>\n                <AlertIcon />\n                {peopleError} \n            </Alert>\n          )}\n          <VStack spacing={4}>\n            <FormControl isRequired isInvalid={!name.trim() && error?.includes('name')}>\n              <FormLabel>Deal Name</FormLabel>\n              <Input \n                placeholder='Enter deal name' \n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              />\n              {error?.toLowerCase().includes('name') && <FormErrorMessage>{error}</FormErrorMessage>}\n            </FormControl>\n\n            <FormControl isRequired isInvalid={!selectedPipelineId && error?.toLowerCase().includes('pipeline')}>\n              <FormLabel>Pipeline</FormLabel>\n              <Select \n                placeholder={pipelinesLoading ? 'Loading pipelines...' : 'Select pipeline'}\n                value={selectedPipelineId}\n                onChange={(e) => setSelectedPipelineId(e.target.value)}\n                isDisabled={pipelinesLoading || !!pipelinesError}\n              >\n                 {!pipelinesLoading && !pipelinesError && Array.isArray(pipelines) && pipelines.map((pipeline: Pipeline) => (\n                    <option key={pipeline.id} value={pipeline.id}>\n                        {pipeline.name}\n                    </option>\n                ))}\n              </Select>\n              {pipelinesError && <FormErrorMessage>Error loading pipelines: {pipelinesError}</FormErrorMessage>}\n              {!selectedPipelineId && error?.toLowerCase().includes('pipeline') && <FormErrorMessage>{error}</FormErrorMessage>}\n            </FormControl>\n\n            <FormControl isRequired isInvalid={!selectedStageId && error?.toLowerCase().includes('stage')}>\n              <FormLabel>Stage</FormLabel>\n              <Select \n                placeholder={stagesLoading ? 'Loading stages...' : (selectedPipelineId ? (filteredStagesForModal.length > 0 ? 'Select stage' : 'No stages for this pipeline') : 'Select pipeline first') }\n                value={selectedStageId}\n                onChange={(e) => setSelectedStageId(e.target.value)}\n                isDisabled={!selectedPipelineId || stagesLoading || !!stagesError || filteredStagesForModal.length === 0}\n              >\n                 {!stagesLoading && !stagesError && filteredStagesForModal.map((stage: Stage) => (\n                    <option key={stage.id} value={stage.id}>\n                        {stage.name} (Order: {stage.order})\n                    </option>\n                ))}\n              </Select>\n              {stagesError && <FormErrorMessage>Error loading stages: {stagesError}</FormErrorMessage>}\n              {!selectedPipelineId && stages.length === 0 && !stagesLoading && <FormErrorMessage>Select a pipeline to see stages.</FormErrorMessage>}\n              {selectedPipelineId && !stagesLoading && !stagesError && filteredStagesForModal.length === 0 && <FormErrorMessage>This pipeline has no stages defined.</FormErrorMessage>}\n              {!selectedStageId && error?.toLowerCase().includes('stage') && <FormErrorMessage>{error}</FormErrorMessage>}\n            </FormControl>\n\n            <FormControl>\n              <FormLabel>Amount</FormLabel>\n              <NumberInput \n                value={amount}\n                onChange={(valueString) => setAmount(valueString)} \n                precision={2} \n              >\n                <NumberInputField placeholder='Enter deal amount' />\n              </NumberInput>\n            </FormControl>\n\n            <FormControl>\n              <FormLabel>Deal Specific Probability (%)</FormLabel>\n              <NumberInput\n                min={0}\n                max={100}\n                value={dealSpecificProbability}\n                onChange={(valueString) => setDealSpecificProbability(valueString)}\n                allowMouseWheel\n              >\n                <NumberInputField placeholder=\"Optional (e.g., 75)\" />\n              </NumberInput>\n            </FormControl>\n\n            <FormControl>\n              <FormLabel>Link to Person (Optional)</FormLabel>\n                <Select \n                placeholder={peopleLoading ? 'Loading people...' : 'Select person'}\n                  value={personId}\n                  onChange={(e) => setPersonId(e.target.value)}\n                isDisabled={peopleLoading || !!peopleError}\n                >\n                 {!peopleLoading && !peopleError && Array.isArray(people) && people.map((person: Person) => (\n                      <option key={person.id} value={person.id}>\n                        {[person.first_name, person.last_name].filter(Boolean).join(' ') || person.email || `Person ID: ${person.id}`}\n                      </option>\n                  ))}\n                </Select>\n            </FormControl>\n\n            <FormControl mt={4}>\n              <FormLabel htmlFor='expected_close_date'>Expected Close Date</FormLabel>\n              <Input \n                id='expected_close_date'\n                type='date' \n                value={expectedCloseDate}\n                onChange={(e) => setExpectedCloseDate(e.target.value)}\n              />\n            </FormControl>\n\n            {/* Custom Fields Section */}\n            {customFieldDefinitionsLoading && <Spinner size=\"md\" />}\n            {customFieldDefinitionsError && (\n              <Alert status=\"error\" mb={4}>\n                <AlertIcon />\n                Error loading custom field definitions: {customFieldDefinitionsError}\n              </Alert>\n            )}\n            {activeDealCustomFields.map((def: CustomFieldDefinition) => (\n              <FormControl key={def.id} isRequired={def.isRequired} mb={4}>\n                <FormLabel htmlFor={def.fieldName}>{def.fieldLabel}</FormLabel>\n                {def.fieldType === CustomFieldType.Text && (\n                  <Input\n                    id={def.fieldName}\n                    value={customFieldFormValues[def.fieldName] || ''}\n                    onChange={(e) =>\n                      setCustomFieldFormValues(prev => ({\n                        ...prev,\n                        [def.fieldName]: e.target.value,\n                      }))\n                    }\n                    placeholder={def.fieldLabel}\n                  />\n                )}\n                {def.fieldType === CustomFieldType.Number && (\n                  <NumberInput\n                    id={def.fieldName}\n                    value={customFieldFormValues[def.fieldName] || ''}\n                    onChange={(valueString) =>\n                      setCustomFieldFormValues(prev => ({\n                        ...prev,\n                        [def.fieldName]: valueString, // Store as string, will be parsed on submit\n                      }))\n                    }\n                    precision={2} // Example precision, adjust as needed\n                  >\n                    <NumberInputField placeholder={def.fieldLabel} />\n                  </NumberInput>\n                )}\n                {def.fieldType === CustomFieldType.Date && (\n                  <Input\n                    type=\"date\"\n                    id={def.fieldName}\n                    value={customFieldFormValues[def.fieldName] || ''}\n                    onChange={(e) =>\n                      setCustomFieldFormValues(prev => ({\n                        ...prev,\n                        [def.fieldName]: e.target.value,\n                      }))\n                    }\n                  />\n                )}\n                {def.fieldType === CustomFieldType.Boolean && (\n                  <Switch\n                    id={def.fieldName}\n                    isChecked={customFieldFormValues[def.fieldName] || false}\n                    onChange={(e) =>\n                      setCustomFieldFormValues(prev => ({\n                        ...prev,\n                        [def.fieldName]: e.target.checked,\n                      }))\n                    }\n                  />\n                )}\n                {def.fieldType === CustomFieldType.Dropdown && def.dropdownOptions && (\n                  <Select\n                    id={def.fieldName}\n                    placeholder={`Select ${def.fieldLabel}`}\n                    value={customFieldFormValues[def.fieldName] || ''}\n                    onChange={(e) =>\n                      setCustomFieldFormValues(prev => ({\n                        ...prev,\n                        [def.fieldName]: e.target.value,\n                      }))\n                    }\n                  >\n                    {def.dropdownOptions.map(option => (\n                      <option key={option.value} value={option.value}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </Select>\n                )}\n                {def.fieldType === CustomFieldType.MultiSelect && def.dropdownOptions && (\n                  <CheckboxGroup\n                    value={customFieldFormValues[def.fieldName] || []}\n                    onChange={(values) =>\n                      setCustomFieldFormValues(prev => ({\n                        ...prev,\n                        [def.fieldName]: values,\n                      }))\n                    }\n                  >\n                    <VStack spacing={2} alignItems=\"flex-start\">\n                      {def.dropdownOptions.map(option => (\n                        <Checkbox key={option.value} value={option.value}>\n                          {option.label}\n                        </Checkbox>\n                      ))}\n                    </VStack>\n                  </CheckboxGroup>\n                )}\n                {/* TODO: Add FormErrorMessage for custom field validation if needed */}\n              </FormControl>\n            ))}\n          </VStack>\n        </ModalBody>\n        <ModalFooter>\n          <Button \n            colorScheme='blue' \n            mr={3} \n            type=\"submit\" \n            isLoading={isLoading || dealsLoading} \n            leftIcon={(isLoading || dealsLoading) ? <Spinner size=\"sm\" /> : undefined}\n            onClick={handleSubmit}\n          >\n            Save Changes\n          </Button>\n          <Button variant='ghost' onClick={onClose} isDisabled={isLoading}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default EditDealModal; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/EditOrganizationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1246,1249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1246,1249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1718,1721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1718,1721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1765,1768],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1765,1768],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":70,"column":81,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":70,"endColumn":92},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":77,"column":93,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":77,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":79,"column":119,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":79,"endColumn":130},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4769,4772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4769,4772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":123,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":123,"endColumn":71,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5335,5335],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[5335,5335],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6104,6107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6104,6107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":161,"column":30,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":161,"endColumn":107},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":164,"column":17,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":164,"endColumn":94},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":178,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8201,8204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8201,8204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":180,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":180,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":182,"column":106,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":182,"endColumn":111},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":184,"column":27,"nodeType":"Property","messageId":"anyAssignment","endLine":184,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":192,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":192,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":199,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9198,9201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9198,9201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"never\" of template literal expression.","line":217,"column":53,"nodeType":"MemberExpression","messageId":"invalidType","endLine":217,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":221,"column":84,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":221,"endColumn":122},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":222,"column":91,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":222,"endColumn":129},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":223,"column":92,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":223,"endColumn":131},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":224,"column":89,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":224,"endColumn":125},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":225,"column":144,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":225,"endColumn":191},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":258,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":258,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":258,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12977,12980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12977,12980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .graphQLErrors on an `any` value.","line":258,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":258,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":260,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":260,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extensions on an `any` value.","line":260,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":260,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .issues on an `any` value.","line":261,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":261,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":261,"column":40,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":261,"endColumn":116},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":261,"column":50,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":261,"endColumn":110},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":261,"column":50,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":261,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .issues on an `any` value.","line":261,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":261,"endColumn":70},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":261,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13178,13181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13178,13181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":261,"column":91,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":261,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":261,"column":97,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":261,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .join on an `any` value.","line":261,"column":106,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":261,"endColumn":110},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":262,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":262,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":262,"column":46,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":262,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":262,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":262,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":263,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":263,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":263,"column":40,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":263,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":263,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":263,"endColumn":66},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":275,"column":40,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":275,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":304,"column":87,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":304,"endColumn":117}],"suppressedMessages":[],"errorCount":45,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Textarea,\n  VStack,\n  FormErrorMessage,\n  Alert, \n  AlertIcon,\n  Spinner,\n  useToast,\n  Select,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  Checkbox,\n  SimpleGrid,\n  Box,\n  Text\n} from '@chakra-ui/react';\nimport { useOrganizationsStore, Organization, OrganizationInput } from '../stores/useOrganizationsStore';\nimport { useCustomFieldDefinitionStore } from '../stores/useCustomFieldDefinitionStore';\nimport type { \n    CustomFieldValueInput, \n    CustomFieldDefinition,\n    CustomFieldValue // For typing organization.customFieldValues\n} from '../generated/graphql/graphql';\nimport { CustomFieldEntityType, CustomFieldType } from '../generated/graphql/graphql';\n\ninterface EditOrganizationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onOrganizationUpdated: () => void;\n  organization: Organization | null;\n}\n\n// --- Helper Functions (can be moved to a shared util if used elsewhere) ---\nconst getDefaultValueForFieldType = (fieldType: CustomFieldType): any => {\n    switch (fieldType) {\n        case CustomFieldType.Number: return undefined;\n        case CustomFieldType.Boolean: return false;\n        case CustomFieldType.Date: case CustomFieldType.Text: return '';\n        case CustomFieldType.Dropdown: return '';\n        case CustomFieldType.MultiSelect: return [];\n        default: return '';\n    }\n};\n\nconst CustomFieldRenderer = ({ \n    definition, value, onChange \n}: { \n    definition: CustomFieldDefinition, value: any, \n    onChange: (fieldName: string, value: any, fieldType: CustomFieldType) => void \n}) => {\n    const { fieldName, fieldLabel, fieldType, isRequired, dropdownOptions } = definition;\n    return (\n        <FormControl key={fieldName} isRequired={isRequired} mb={2}>\n            <FormLabel htmlFor={fieldName} fontSize=\"sm\">{fieldLabel}</FormLabel>\n            {fieldType === CustomFieldType.Text && <Input id={fieldName} value={value || ''} onChange={(e) => onChange(fieldName, e.target.value, fieldType)} />}\n            {fieldType === CustomFieldType.Number && (\n                <NumberInput id={fieldName} value={value === null || value === undefined ? '' : String(value)} onChange={(valStr) => onChange(fieldName, valStr, fieldType)}>\n                    <NumberInputField /><NumberInputStepper><NumberIncrementStepper /><NumberDecrementStepper /></NumberInputStepper>\n                </NumberInput>\n            )}\n            {fieldType === CustomFieldType.Boolean && <Checkbox id={fieldName} isChecked={Boolean(value)} onChange={(e) => onChange(fieldName, e.target.checked, fieldType)} />}\n            {fieldType === CustomFieldType.Date && <Input id={fieldName} type=\"date\" value={value || ''} onChange={(e) => onChange(fieldName, e.target.value, fieldType)} />}\n            {fieldType === CustomFieldType.Dropdown && (\n                <Select id={fieldName} placeholder={isRequired ? \"Select option (required)\" : \"Select option\"} value={value || ''} onChange={(e) => onChange(fieldName, e.target.value, fieldType)}>\n                    {dropdownOptions?.map((opt: {value: string, label: string}) => <option key={opt.value} value={opt.value}>{opt.label}</option>)}\n                </Select>\n            )}\n            {fieldType === CustomFieldType.MultiSelect && (\n                 <VStack align=\"start\" spacing={1}>\n                    {dropdownOptions?.map((opt: {value: string, label: string}) => (\n                        <Checkbox key={opt.value} isChecked={(value as string[] | undefined || []).includes(opt.value)} \n                            onChange={(e) => {\n                                const currentValues = (value as string[] | undefined || []);\n                                const newValues = e.target.checked ? [...currentValues, opt.value] : currentValues.filter((v: string) => v !== opt.value);\n                                onChange(fieldName, newValues, fieldType);\n                            }}>{opt.label}</Checkbox>\n                    ))}\n                </VStack>\n            )}\n        </FormControl>\n    );\n};\n// --- End Helper Functions ---\n\nfunction EditOrganizationModal({ isOpen, onClose, onOrganizationUpdated, organization }: EditOrganizationModalProps) {\n  const [name, setName] = useState('');\n  const [address, setAddress] = useState('');\n  const [notes, setNotes] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const toast = useToast();\n  \n  const [customFieldData, setCustomFieldData] = useState<Record<string, any>>({});\n  const [organizationCustomFieldDefinitions, setOrganizationCustomFieldDefinitions] = useState<CustomFieldDefinition[]>([]);\n  const [hasAttemptedDefFetch, setHasAttemptedDefFetch] = useState(false);\n\n  const { \n    updateOrganization: updateOrganizationAction, \n    organizationsError: storeError, \n  } = useOrganizationsStore();\n\n  const {\n    definitions, loading: definitionsLoading, fetchCustomFieldDefinitions, error: definitionStoreError,\n  } = useCustomFieldDefinitionStore();\n\n  useEffect(() => {\n    if (isOpen && !hasAttemptedDefFetch) {\n      fetchCustomFieldDefinitions(CustomFieldEntityType.Organization);\n      setHasAttemptedDefFetch(true);\n    }\n  }, [isOpen, hasAttemptedDefFetch, fetchCustomFieldDefinitions]);\n\n  useEffect(() => {\n    if (isOpen && organization) {\n        const orgDefs = (definitions || [])\n            .filter((def: CustomFieldDefinition) => def.entityType === CustomFieldEntityType.Organization && def.isActive)\n            .sort((a: CustomFieldDefinition, b: CustomFieldDefinition) => a.displayOrder - b.displayOrder);\n        setOrganizationCustomFieldDefinitions(orgDefs);\n\n        setName(organization.name || '');\n        setAddress(organization.address || '');\n        setNotes(organization.notes || '');\n        setError(null);\n\n        const initialCustomData: Record<string, any> = {};\n        const orgCustomValuesMap = new Map(\n            (organization.customFieldValues || []).map((cfValue: CustomFieldValue) => [\n                cfValue.definition.fieldName,\n                cfValue\n            ])\n        );\n        orgDefs.forEach((def: CustomFieldDefinition) => {\n            const existingValueObj = orgCustomValuesMap.get(def.fieldName);\n            if (existingValueObj) {\n                switch (def.fieldType) {\n                    case CustomFieldType.Text: initialCustomData[def.fieldName] = existingValueObj.stringValue; break;\n                    case CustomFieldType.Number: initialCustomData[def.fieldName] = existingValueObj.numberValue; break;\n                    case CustomFieldType.Boolean: initialCustomData[def.fieldName] = existingValueObj.booleanValue; break;\n                    case CustomFieldType.Date: initialCustomData[def.fieldName] = existingValueObj.dateValue; break;\n                    case CustomFieldType.Dropdown:\n                        initialCustomData[def.fieldName] = (existingValueObj.selectedOptionValues && existingValueObj.selectedOptionValues.length > 0) ? existingValueObj.selectedOptionValues[0] : '';\n                        break;\n                    case CustomFieldType.MultiSelect:\n                        initialCustomData[def.fieldName] = existingValueObj.selectedOptionValues || [];\n                        break;\n                    default: initialCustomData[def.fieldName] = getDefaultValueForFieldType(def.fieldType);\n                }\n            } else {\n                initialCustomData[def.fieldName] = getDefaultValueForFieldType(def.fieldType);\n            }\n        });\n        setCustomFieldData(initialCustomData);\n        return;\n    } else if (!isOpen) { \n        setHasAttemptedDefFetch(false);\n        setName(''); setAddress(''); setNotes('');\n        setCustomFieldData({}); setOrganizationCustomFieldDefinitions([]);\n        setError(null); setIsLoading(false);\n        return;\n    }\n  }, [isOpen, organization, definitions]);\n\n  const handleCustomFieldChange = (fieldName: string, value: any, fieldType: CustomFieldType) => {\n    setCustomFieldData(prev => {\n        let processedValue = value;\n        if (fieldType === CustomFieldType.Number) {\n            processedValue = (value === '' || value === null || value === undefined) ? null : parseFloat(value);\n        }\n        return { ...prev, [fieldName]: processedValue };\n    });\n  };\n\n  const processCustomFieldsForSubmit = (): { fields: CustomFieldValueInput[], error?: string } => {\n    const fields: CustomFieldValueInput[] = [];\n    let missingRequiredFieldLabel = '';\n    for (const def of organizationCustomFieldDefinitions) {\n      const rawValue = customFieldData[def.fieldName];\n      if (def.isRequired) {\n        let isEmpty = false;\n        if (rawValue === undefined || rawValue === null || rawValue === '') isEmpty = true;\n        else if (Array.isArray(rawValue) && rawValue.length === 0) isEmpty = true;\n        if (isEmpty) { missingRequiredFieldLabel = def.fieldLabel; break; }\n      }\n      let valueToSubmit: any = undefined; let includeField = false;\n      switch (def.fieldType) {\n        case CustomFieldType.Text: \n            if (rawValue !== '' && rawValue !== null && rawValue !== undefined) { valueToSubmit = String(rawValue); includeField = true; } \n            else if (rawValue === null) { valueToSubmit = null; includeField = true; } break;\n        case CustomFieldType.Number: \n            if (typeof rawValue === 'number' && !isNaN(rawValue)) { valueToSubmit = rawValue; includeField = true; } \n            else if (rawValue === null) { valueToSubmit = null; includeField = true; } break;\n        case CustomFieldType.Boolean: valueToSubmit = Boolean(rawValue); includeField = true; break;\n        case CustomFieldType.Date: \n            if (rawValue && String(rawValue).trim() !== '') { valueToSubmit = String(rawValue); includeField = true; } \n            else if (rawValue === null) { valueToSubmit = null; includeField = true; } break;\n        case CustomFieldType.Dropdown: \n           if (typeof rawValue === 'string' && rawValue.trim() !== '') { valueToSubmit = [rawValue]; includeField = true; }\n           else if (rawValue === null || rawValue === '') { valueToSubmit = null; includeField = true; } break;\n        case CustomFieldType.MultiSelect: \n          if (Array.isArray(rawValue)) { valueToSubmit = rawValue; includeField = true; } \n          else if (rawValue === null) { valueToSubmit = null; includeField = true;} break;\n        default: console.warn(`Unknown field type ${def.fieldType}`);\n      }\n      if (includeField) {\n        const fieldInput: CustomFieldValueInput = { definitionId: def.id };\n        if (def.fieldType === CustomFieldType.Text && valueToSubmit !== undefined) fieldInput.stringValue = valueToSubmit;\n        else if (def.fieldType === CustomFieldType.Number && valueToSubmit !== undefined) fieldInput.numberValue = valueToSubmit;\n        else if (def.fieldType === CustomFieldType.Boolean && valueToSubmit !== undefined) fieldInput.booleanValue = valueToSubmit;\n        else if (def.fieldType === CustomFieldType.Date && valueToSubmit !== undefined) fieldInput.dateValue = valueToSubmit; \n        else if ((def.fieldType === CustomFieldType.Dropdown || def.fieldType === CustomFieldType.MultiSelect) && valueToSubmit !== undefined) fieldInput.selectedOptionValues = valueToSubmit;\n        if (Object.keys(fieldInput).length > 1) fields.push(fieldInput);\n      }\n    }\n    if (missingRequiredFieldLabel) return { fields, error: `Custom field \"${missingRequiredFieldLabel}\" is required.` };\n    return { fields };\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    if (!organization) return;\n    setIsLoading(true); setError(null);\n    if (!name.trim()) { setError('Organization name is required.'); setIsLoading(false); return; }\n\n    const { fields: processedCustomFields, error: customFieldsError } = processCustomFieldsForSubmit();\n    if (customFieldsError) { setError(customFieldsError); setIsLoading(false); return; }\n\n    try {\n      const input: OrganizationInput = {\n        name: name.trim(),\n        address: address.trim() || null,\n        notes: notes.trim() || null,\n        customFields: processedCustomFields.length > 0 ? processedCustomFields : null,\n      };\n      const updatedOrg = await updateOrganizationAction(organization.id, input);\n      if (updatedOrg) {\n        toast({ title: 'Organization Updated', status: 'success', duration: 3000, isClosable: true });\n        onOrganizationUpdated();\n        onClose();\n      } else { setError(storeError || definitionStoreError || 'Failed to update organization.'); }\n    } catch (err: unknown) {\n      let message = 'Failed to update organization';\n      if (err instanceof Error) {\n        const gqlError = (err as any).graphQLErrors?.[0];\n        if (gqlError) {\n            const originalError = gqlError.extensions?.originalError;\n            if (originalError?.issues) message = originalError.issues.map((issue: any) => issue.message).join(', ');\n            else if (originalError?.message) message = originalError.message;\n            else if (gqlError.message) message = gqlError.message;\n        } else message = err.message;\n      } else if (typeof err === 'string') message = err;\n      setError(message);\n    } finally { setIsLoading(false); }\n  };\n\n  if (!isOpen || !organization) return null;\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered size=\"xl\" scrollBehavior=\"inside\">\n      <ModalOverlay />\n      <ModalContent as=\"form\" onSubmit={handleSubmit}>\n        <ModalHeader>Edit Organization: {organization?.name}</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          {(error || storeError || definitionStoreError) && (\n             <Alert status=\"error\" mb={4} whiteSpace=\"pre-wrap\" borderRadius=\"md\">\n                <AlertIcon />\n                <Box flex=\"1\">\n                    {error && <Text>{error}</Text>}\n                    {storeError && <Text mt={error ? 1 : 0}>Store Error: {storeError}</Text>}\n                    {definitionStoreError && <Text mt={(error || storeError) ? 1 : 0}>Definition Error: {definitionStoreError}</Text>}\n                </Box>\n            </Alert>\n          )}\n          <VStack spacing={4} align=\"stretch\">\n            <FormControl isRequired isInvalid={!name.trim() && !!error?.includes('name')}>\n              <FormLabel>Organization Name</FormLabel>\n              <Input placeholder='Enter organization name' value={name} onChange={(e) => setName(e.target.value)} />\n              {!name.trim() && !!error?.includes('name') && <FormErrorMessage>{error}</FormErrorMessage>}\n            </FormControl>\n            <FormControl><FormLabel>Address</FormLabel><Input placeholder='Enter address' value={address} onChange={(e) => setAddress(e.target.value)} /></FormControl>\n            <FormControl><FormLabel>Notes</FormLabel><Textarea placeholder='Enter notes' value={notes} onChange={(e) => setNotes(e.target.value)} rows={3}/></FormControl>\n            \n            {definitionsLoading && <Spinner label=\"Loading custom fields...\" />}\n            {!definitionsLoading && organizationCustomFieldDefinitions.length > 0 && (\n                 <Box borderTopWidth=\"1px\" borderColor=\"gray.200\" mt={5} pt={5}>\n                    <Text fontSize=\"lg\" fontWeight=\"semibold\" mb={3}>Custom Fields</Text>\n                    <SimpleGrid columns={{ base: 1, md: 2 }} spacingX={6} spacingY={3}>\n                        {organizationCustomFieldDefinitions.map((def: CustomFieldDefinition) => (\n                            <CustomFieldRenderer key={def.id} definition={def} value={customFieldData[def.fieldName]} onChange={handleCustomFieldChange} />\n                        ))}\n                    </SimpleGrid>\n                 </Box>\n            )}\n            {!definitionsLoading && hasAttemptedDefFetch && organizationCustomFieldDefinitions.length === 0 && !definitionStoreError && (\n                 <Text fontSize=\"sm\" color=\"gray.500\" mt={3}>No custom fields defined for organizations.</Text>\n             )}\n          </VStack>\n        </ModalBody>\n        <ModalFooter borderTopWidth=\"1px\" borderColor=\"gray.200\" mt={3} pt={3}>\n          <Button colorScheme='blue' mr={3} type=\"submit\" isLoading={isLoading} leftIcon={isLoading ? <Spinner size=\"sm\" /> : undefined}>Save Changes</Button>\n          <Button variant='ghost' onClick={onClose} isDisabled={isLoading}>Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default EditOrganizationModal; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/EditPersonForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Organization' is defined but never used.","line":25,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1356,1359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1356,1359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":76,"column":12,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":76,"endColumn":37,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[2468,2476],"text":"CustomFieldEntityType.Person"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":82,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":82,"endColumn":28,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2676,2676],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2676,2676],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":84,"column":118,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":84,"endColumn":143,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[2838,2846],"text":"CustomFieldEntityType.Person"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":86,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":88,"endColumn":10,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2936,2936],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2936,2936],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5095,5098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5095,5098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5422,5425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5422,5425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":134,"column":13,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":134,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":135,"column":13,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":135,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":136,"column":13,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":136,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":137,"column":13,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":137,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":138,"column":13,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":138,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":139,"column":13,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":139,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":143,"column":13,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":143,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":173,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7295,7298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7295,7298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":176,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":176,"endColumn":110},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":176,"column":20,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":176,"endColumn":38,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[7408,7417],"text":"CustomFieldType.Boolean"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":196,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":196,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":211,"column":17,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":211,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":212,"column":17,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":212,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":213,"column":17,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":213,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":214,"column":17,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":214,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":215,"column":17,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":215,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":216,"column":17,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":216,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":220,"column":17,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":220,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":221,"column":17,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":229,"endColumn":27},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":222,"column":21,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":222,"endColumn":62,"suggestions":[{"messageId":"addBrackets","fix":{"range":[9267,9623],"text":"{ const num = parseFloat(String(rawValue));\n                    if (!isNaN(num)) {\n                        cfInput.numberValue = num;\n                    } else {\n                        accumulatedCustomFieldErrors += `Invalid number for '${def.fieldLabel}'.\\n`;\n                        fieldHasError = true;\n                    }\n                    break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":230,"column":17,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":230,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":231,"column":17,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":231,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":231,"column":30,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":231,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":232,"column":17,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":232,"endColumn":91},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":233,"column":17,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":235,"endColumn":27},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":293,"column":20,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":293,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":355,"column":16,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":355,"endColumn":40,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[14897,14903],"text":"CustomFieldType.Text"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":357,"column":26,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":357,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":361,"column":16,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":361,"endColumn":42,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[15170,15178],"text":"CustomFieldType.Number"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":363,"column":26,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":363,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":373,"column":16,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":373,"endColumn":43,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[15700,15709],"text":"CustomFieldType.Boolean"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":375,"column":30,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":375,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":381,"column":16,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":381,"endColumn":40,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[16026,16032],"text":"CustomFieldType.Date"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":384,"column":26,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":384,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":388,"column":16,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":388,"endColumn":44,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[16329,16339],"text":"CustomFieldType.Dropdown"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":391,"column":26,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":391,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":399,"column":16,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":399,"endColumn":48,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[16849,16863],"text":"CustomFieldType.MultiSelect"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":402,"column":26,"nodeType":"ConditionalExpression","messageId":"anyAssignment","endLine":402,"endColumn":156},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":402,"column":74,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":402,"endColumn":109},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .join on an `any` value.","line":402,"column":105,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":402,"endColumn":109}],"suppressedMessages":[],"errorCount":48,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\nimport {\n  Button,\n  Checkbox,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  ModalBody,\n  ModalFooter,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  Select,\n  Stack,\n  Textarea,\n  useToast,\n  Spinner,\n  Alert,\n  AlertIcon,\n} from '@chakra-ui/react';\nimport { usePeopleStore, Person } from '../stores/usePeopleStore';\nimport { useOrganizationsStore, Organization } from '../stores/useOrganizationsStore';\nimport type {\n  PersonInput,\n  CustomFieldValueInput,\n  CustomFieldDefinition,\n  CustomFieldEntityType,\n  CustomFieldType as GQLCustomFieldType,\n} from '../generated/graphql/graphql';\nimport { useCustomFieldDefinitionStore } from '../stores/useCustomFieldDefinitionStore';\n\ninterface EditPersonFormProps {\n  person: Person;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nconst EditPersonForm: React.FC<EditPersonFormProps> = ({ person, onClose, onSuccess }) => {\n  const [formData, setFormData] = useState<PersonInput>({\n    first_name: person.first_name,\n    last_name: person.last_name,\n    email: person.email,\n    phone: person.phone,\n    notes: person.notes,\n    organization_id: person.organization_id,\n    customFields: [],\n  });\n  const [customFieldData, setCustomFieldData] = useState<Record<string, any>>({});\n  const [isLoading, setIsLoading] = useState(false);\n  const toast = useToast();\n\n  const { \n    organizations, \n    organizationsLoading: orgLoading, \n    organizationsError: orgError,\n    fetchOrganizations \n  } = useOrganizationsStore();\n\n  const { updatePerson: updatePersonAction, peopleError } = usePeopleStore();\n  \n  const allDefinitions = useCustomFieldDefinitionStore(state => state.definitions);\n  const definitionsLoading = useCustomFieldDefinitionStore(state => state.loading);\n  const definitionsError = useCustomFieldDefinitionStore(state => state.error);\n  const fetchDefinitions = useCustomFieldDefinitionStore(state => state.fetchCustomFieldDefinitions);\n  \n  const [localError, setLocalError] = useState<string | null>(null);\n  const [hasAttemptedPersonDefinitionsFetch, setHasAttemptedPersonDefinitionsFetch] = useState(false);\n\n  // Memoize personCustomFieldDefinitions\n  const personCustomFieldDefinitions = useMemo(() => {\n    console.log(\"[EditPersonForm] Recalculating personCustomFieldDefinitions via useMemo.\");\n    return allDefinitions.filter(\n      d => d.entityType === 'PERSON' && d.isActive\n    );\n  }, [allDefinitions]); // Dependency is allDefinitions from the store\n\n  useEffect(() => {\n    if (Array.isArray(organizations) && !organizations.length && !orgLoading) {\n      fetchOrganizations();\n    }\n    if (!definitionsLoading && !definitionsError && !hasAttemptedPersonDefinitionsFetch && !allDefinitions.some(d => d.entityType === 'PERSON')) {\n      console.log(\"[EditPersonForm] Attempting to fetch PERSON definitions.\");\n      fetchDefinitions('PERSON' as CustomFieldEntityType).finally(() => {\n        setHasAttemptedPersonDefinitionsFetch(true);\n      });\n    }\n  }, [organizations, orgLoading, fetchOrganizations, definitionsLoading, definitionsError, allDefinitions, fetchDefinitions, hasAttemptedPersonDefinitionsFetch]);\n\n  useEffect(() => {\n    setFormData({\n      first_name: person.first_name,\n      last_name: person.last_name,\n      email: person.email,\n      phone: person.phone,\n      notes: person.notes,\n      organization_id: person.organization_id,\n      customFields: [],\n    });\n    setLocalError(null);\n\n    console.log('[EditPersonForm] useEffect for customFieldData triggered.');\n    console.log('[EditPersonForm] person.id:', person.id);\n    console.log('[EditPersonForm] person.customFieldValues:', JSON.stringify(person.customFieldValues, null, 2));\n    console.log('[EditPersonForm] personCustomFieldDefinitions:', JSON.stringify(personCustomFieldDefinitions, null, 2));\n    console.log('[EditPersonForm] definitionsLoading:', definitionsLoading);\n    console.log('[EditPersonForm] hasAttemptedPersonDefinitionsFetch:', hasAttemptedPersonDefinitionsFetch);\n    console.log('[EditPersonForm] Calculated personCustomFieldDefinitions length:', personCustomFieldDefinitions.length);\n\n    // Condition to populate customFieldData:\n    // 1. Definitions are not currently loading.\n    // 2. EITHER a fetch for definitions has been attempted OR person-specific definitions are already available.\n    // 3. The person object has custom field values.\n    // 4. There are applicable custom field definitions to map against.\n    const canPopulate = \n      !definitionsLoading && \n      (hasAttemptedPersonDefinitionsFetch || personCustomFieldDefinitions.length > 0) && \n      person.customFieldValues && \n      person.customFieldValues.length > 0 &&\n      personCustomFieldDefinitions && // Ensure this isn't prematurely empty if hasAttempted is false but defs are there\n      personCustomFieldDefinitions.length > 0;\n\n    if (canPopulate) {\n      console.log('[EditPersonForm] Conditions met to populate customFieldData.');\n      const initialCustomData: Record<string, any> = {};\n      person.customFieldValues.forEach(cfv => {\n        const def = personCustomFieldDefinitions.find(d => d.id === cfv.definition?.id);\n        if (def) {\n          console.log(`[EditPersonForm] Found matching definition: ID=${def.id}, fieldName=${def.fieldName}, fieldType=${def.fieldType}`);\n          let value: any;\n          switch (def.fieldType) {\n            case 'TEXT': value = cfv.stringValue; break;\n            case 'NUMBER': value = cfv.numberValue; break;\n            case 'BOOLEAN': value = cfv.booleanValue; break;\n            case 'DATE': value = cfv.dateValue; break;\n            case 'DROPDOWN': value = cfv.selectedOptionValues?.[0]; break;\n            case 'MULTI_SELECT': value = cfv.selectedOptionValues; break;\n            default: value = null;\n          }\n          if (value !== undefined && value !== null) {\n            initialCustomData[def.fieldName] = value;\n          }\n        } else {\n          console.warn(`[EditPersonForm] No matching active definition found in personCustomFieldDefinitions for cfv.definition.id: ${cfv.definition?.id}`);\n        }\n      });\n      console.log('[EditPersonForm] Final initialCustomData to be set:', initialCustomData);\n      setCustomFieldData(initialCustomData);\n    } else {\n      console.warn('[EditPersonForm] Conditions NOT met to populate customFieldData. Clearing. Details:',\n        {\n          definitionsLoading,\n          hasAttemptedPersonDefinitionsFetch,\n          personCustomFieldValuesCount: person.customFieldValues?.length,\n          personCustomFieldDefinitionsCount: personCustomFieldDefinitions?.length\n        }\n      );\n      setCustomFieldData({}); \n    }\n  }, [person, person.customFieldValues, personCustomFieldDefinitions, definitionsLoading, hasAttemptedPersonDefinitionsFetch]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    if (name === 'organization_id' && value === '') {\n        setFormData(prev => ({ ...prev, [name]: null }));\n    } else {\n        setFormData(prev => ({ ...prev, [name]: value }));\n    }\n  };\n\n  const handleCustomFieldChange = (fieldName: string, value: any, type: GQLCustomFieldType) => {\n    setCustomFieldData(prev => ({\n      ...prev,\n      [fieldName]: type === 'BOOLEAN' ? (value as React.ChangeEvent<HTMLInputElement>).target.checked : value,\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setLocalError(null);\n\n    if (!formData.first_name && !formData.last_name && !formData.email) {\n      setLocalError('Must have first name, last name, or email.');\n      setIsLoading(false);\n      return;\n    }\n\n    let accumulatedCustomFieldErrors = '';\n\n    const processedCustomFields: CustomFieldValueInput[] = personCustomFieldDefinitions\n      .map(def => {\n        let fieldHasError = false;\n        const rawValue = customFieldData[def.fieldName];\n        \n        if (rawValue === undefined && rawValue === null && !def.isRequired) return null;\n\n        if (def.isRequired && (rawValue === undefined || rawValue === null || String(rawValue).trim() === '')) {\n            accumulatedCustomFieldErrors += `Field '${def.fieldLabel}' is required.\\n`;\n            fieldHasError = true;\n        }\n        \n        const cfInput: CustomFieldValueInput = { definitionId: def.id };\n\n        if (fieldHasError) return null;\n\n        if (rawValue === null || rawValue === '') {\n            switch (def.fieldType) {\n                case 'TEXT': cfInput.stringValue = null; break;\n                case 'NUMBER': cfInput.numberValue = null; break;\n                case 'BOOLEAN': cfInput.booleanValue = false; break;\n                case 'DATE': cfInput.dateValue = null; break;\n                case 'DROPDOWN': cfInput.selectedOptionValues = null; break;\n                case 'MULTI_SELECT': cfInput.selectedOptionValues = null; break;\n            }\n        } else if (rawValue !== undefined) {\n            switch (def.fieldType) {\n                case 'TEXT': cfInput.stringValue = String(rawValue); break;\n                case 'NUMBER':\n                    const num = parseFloat(String(rawValue));\n                    if (!isNaN(num)) {\n                        cfInput.numberValue = num;\n                    } else {\n                        accumulatedCustomFieldErrors += `Invalid number for '${def.fieldLabel}'.\\n`;\n                        fieldHasError = true;\n                    }\n                    break;\n                case 'BOOLEAN': cfInput.booleanValue = Boolean(rawValue); break;\n                case 'DATE': cfInput.dateValue = rawValue; break;\n                case 'DROPDOWN': cfInput.selectedOptionValues = [String(rawValue)]; break;\n                case 'MULTI_SELECT': \n                    cfInput.selectedOptionValues = Array.isArray(rawValue) ? rawValue.map(String) : (rawValue ? [String(rawValue)] : []);\n                    break;\n            }\n        }\n        \n        if (fieldHasError) return null;\n        \n        return cfInput;\n      })\n      .filter(Boolean) as CustomFieldValueInput[];\n\n    if (accumulatedCustomFieldErrors) {\n        setLocalError(accumulatedCustomFieldErrors.trim());\n        setIsLoading(false);\n        return;\n    }\n    \n    const mutationInput: PersonInput = {\n      first_name: formData.first_name || null,\n      last_name: formData.last_name || null,\n      email: formData.email || null,\n      phone: formData.phone || null,\n      notes: formData.notes || null,\n      organization_id: formData.organization_id || null,\n      customFields: processedCustomFields,\n    };\n\n    try {\n      const updatedPerson = await updatePersonAction(person.id, mutationInput);\n\n      if (updatedPerson) {\n        toast({\n          title: 'Person Updated',\n          status: 'success',\n          duration: 3000,\n          isClosable: true,\n        });\n        onSuccess();\n        onClose();\n      } else {\n        setLocalError(peopleError || 'Failed to update person. Please try again.');\n        toast({ title: 'Error', description: peopleError || 'Failed to update person.', status: 'error', duration: 5000, isClosable: true });\n      }\n\n    } catch (error: unknown) {\n      console.error(`Failed to update person ${person.id}:`, error);\n      let message = 'An unexpected error occurred.';\n      if (error instanceof Error) {\n        message = error.message;\n      } else if (typeof error === 'string') {\n        message = error;\n      }\n      setLocalError(message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <ModalBody>\n        {(localError || peopleError) && (\n             <Alert status=\"error\" mb={4} whiteSpace=\"pre-wrap\">\n                <AlertIcon />\n                {localError || peopleError}\n            </Alert>\n          )}\n        <Stack spacing={4}>\n          <FormControl isInvalid={!!localError && (!formData.first_name && !formData.last_name && !formData.email)}>\n            <FormLabel>First Name</FormLabel>\n            <Input name=\"first_name\" value={formData.first_name || ''} onChange={handleChange} />\n          </FormControl>\n          <FormControl isInvalid={!!localError && (!formData.first_name && !formData.last_name && !formData.email)}>\n            <FormLabel>Last Name</FormLabel>\n            <Input name=\"last_name\" value={formData.last_name || ''} onChange={handleChange} />\n          </FormControl>\n          <FormControl isInvalid={!!localError && (!formData.first_name && !formData.last_name && !formData.email)}>\n            <FormLabel>Email</FormLabel>\n            <Input type=\"email\" name=\"email\" value={formData.email || ''} onChange={handleChange} />\n            {!!localError && (!formData.first_name && !formData.last_name && !formData.email) && <FormErrorMessage>{localError}</FormErrorMessage>}\n          </FormControl>\n          <FormControl>\n            <FormLabel>Phone</FormLabel>\n            <Input type=\"tel\" name=\"phone\" value={formData.phone || ''} onChange={handleChange} />\n          </FormControl>\n          \n          <FormControl>\n            <FormLabel>Organization</FormLabel>\n            {orgLoading && <Spinner size=\"sm\" />}\n            {orgError && (\n                <Alert status=\"error\" size=\"sm\">\n                    <AlertIcon />\n                    {orgError}\n                </Alert>\n            )}\n            {!orgLoading && !orgError && (\n                <Select \n                    name=\"organization_id\" \n                    value={formData.organization_id || ''} \n                    onChange={handleChange}\n                    placeholder=\"Select organization (optional)\"\n                    isDisabled={!Array.isArray(organizations) || organizations.length === 0}\n                >\n                    {Array.isArray(organizations) && organizations.map(org => (\n                        <option key={org.id} value={org.id}>{org.name}</option>\n                    ))}\n                </Select>\n            )}\n            {Array.isArray(organizations) && organizations.length === 0 && !orgLoading && <FormErrorMessage>No organizations found. Create one first.</FormErrorMessage>}\n          </FormControl>\n          \n          <FormControl>\n            <FormLabel>Notes</FormLabel>\n            <Textarea name=\"notes\" value={formData.notes || ''} onChange={handleChange} />\n          </FormControl>\n\n          {definitionsLoading && <Spinner />}\n          {definitionsError && <Alert status=\"error\"><AlertIcon />Error loading custom fields: {definitionsError}</Alert>}\n          {personCustomFieldDefinitions.map((def: CustomFieldDefinition) => (\n            <FormControl key={def.id} isRequired={def.isRequired}>\n              <FormLabel>{def.fieldLabel}</FormLabel>\n              {def.fieldType === 'TEXT' && (\n                <Input\n                  value={customFieldData[def.fieldName] || ''}\n                  onChange={(e) => handleCustomFieldChange(def.fieldName, e.target.value, def.fieldType)}\n                />\n              )}\n              {def.fieldType === 'NUMBER' && (\n                <NumberInput\n                  value={customFieldData[def.fieldName] || ''}\n                  onChange={(valueString) => handleCustomFieldChange(def.fieldName, valueString, def.fieldType)}\n                >\n                  <NumberInputField />\n                  <NumberInputStepper>\n                    <NumberIncrementStepper />\n                    <NumberDecrementStepper />\n                  </NumberInputStepper>\n                </NumberInput>\n              )}\n              {def.fieldType === 'BOOLEAN' && (\n                <Checkbox\n                  isChecked={customFieldData[def.fieldName] || false}\n                  onChange={(e) => handleCustomFieldChange(def.fieldName, e, def.fieldType)}\n                >\n                  Enabled\n                </Checkbox>\n              )}\n              {def.fieldType === 'DATE' && (\n                <Input\n                  type=\"date\"\n                  value={customFieldData[def.fieldName] || ''}\n                  onChange={(e) => handleCustomFieldChange(def.fieldName, e.target.value, def.fieldType)}\n                />\n              )}\n              {def.fieldType === 'DROPDOWN' && (\n                <Select\n                  placeholder={`Select ${def.fieldLabel}`}\n                  value={customFieldData[def.fieldName] || ''}\n                  onChange={(e) => handleCustomFieldChange(def.fieldName, e.target.value, def.fieldType)}\n                >\n                  {def.dropdownOptions?.map(opt => (\n                    <option key={opt.value} value={opt.value}>{opt.label}</option>\n                  ))}\n                </Select>\n              )}\n              {def.fieldType === 'MULTI_SELECT' && (\n                 <Textarea\n                  placeholder={`Enter values for ${def.fieldLabel}, comma-separated`}\n                  value={Array.isArray(customFieldData[def.fieldName]) ? customFieldData[def.fieldName].join(', ') : (customFieldData[def.fieldName] || '')} \n                  onChange={(e) => handleCustomFieldChange(def.fieldName, e.target.value.split(',').map(s => s.trim()), def.fieldType)}\n                />\n              )}\n              {localError && def.isRequired && (customFieldData[def.fieldName] === undefined || customFieldData[def.fieldName] === null || customFieldData[def.fieldName] === '') && \n                <FormErrorMessage>{`Field '${def.fieldLabel}' is required.`}</FormErrorMessage>}\n            </FormControl>\n          ))}\n        </Stack>\n      </ModalBody>\n      <ModalFooter>\n        <Button variant=\"ghost\" mr={3} onClick={onClose} disabled={isLoading}>\n          Cancel\n        </Button>\n        <Button colorScheme=\"blue\" type=\"submit\" isLoading={isLoading}>\n          Update Person\n        </Button>\n      </ModalFooter>\n    </form>\n  );\n}\n\nexport default EditPersonForm; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/activities/ActivityListItem.tsx","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function 'handleDeleteClick' has no 'await' expression.","line":72,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":72,"endColumn":40,"suggestions":[{"messageId":"removeAsync","fix":{"range":[2712,2718],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":115,"column":20,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":115,"endColumn":38},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":155,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":155,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":177,"column":19,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":177,"endColumn":40}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'; // Import React\nimport {\n  Box,\n  Text,\n  HStack,\n  Tag,\n  IconButton,\n  Checkbox,\n  Flex,\n  Spacer,\n  useToast,\n  useDisclosure, // Import useDisclosure hook\n} from '@chakra-ui/react';\nimport { EditIcon, DeleteIcon } from '@chakra-ui/icons';\n// import { useAppStore, Activity } from '../../stores/useAppStore'; // OLD IMPORT\nimport { useAppStore } from '../../stores/useAppStore'; // For userPermissions and currentUserId\nimport { useActivitiesStore, Activity } from '../../stores/useActivitiesStore'; // NEW IMPORT\nimport EditActivityModal from './EditActivityModal'; // Import the modal\nimport ConfirmationDialog from '../common/ConfirmationDialog'; // Import ConfirmationDialog\n\ninterface ActivityListItemProps {\n  activity: Activity; // This Activity type will now come from useActivitiesStore\n}\n\n// Helper to format date/time nicely\nconst formatDateTime = (isoString: string | null | undefined): string => {\n  if (!isoString) return 'No due date';\n  try {\n    return new Date(isoString).toLocaleString(undefined, {\n      dateStyle: 'medium',\n      timeStyle: 'short',\n    });\n  } catch (e) {\n    console.error('Error formatting date:', isoString, e);\n    return 'Invalid date';\n  }\n};\n\n// Helper to get tag color based on type\nconst getActivityTypeColor = (type: string): string => {\n    switch (type?.toUpperCase()) {\n        case 'TASK': return 'blue';\n        case 'MEETING': return 'purple';\n        case 'CALL': return 'green';\n        case 'EMAIL': return 'orange';\n        case 'DEADLINE': return 'red';\n        default: return 'gray';\n    }\n}\n\nfunction ActivityListItem({ activity }: ActivityListItemProps) {\n  // Select actions from the new useActivitiesStore\n  const { updateActivity, deleteActivity, activitiesError } = useActivitiesStore(); \n\n  // Fetch permissions and user ID from useAppStore (to be refactored later with useAuthStore)\n  const userPermissions = useAppStore((state) => state.userPermissions);\n  const currentUserId = useAppStore((state) => state.session?.user.id);\n\n  const toast = useToast();\n  const { isOpen: isEditOpen, onOpen: onEditOpen, onClose: onEditClose } = useDisclosure();\n  const { isOpen: isConfirmDeleteDialogOpen, onOpen: onConfirmDeleteOpen, onClose: onConfirmDeleteClose } = useDisclosure();\n  const [isDeletingViaDialog, setIsDeletingViaDialog] = React.useState(false);\n\n  const handleToggleDone = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const is_done = e.target.checked;\n    const success = await updateActivity(activity.id, { is_done });\n    if (!success) {\n        toast({ title: 'Failed to update activity status', status: 'error', duration: 3000, isClosable: true });\n    }\n  };\n\n  const handleDeleteClick = async () => {\n    onConfirmDeleteOpen();\n  };\n\n  const handleConfirmDelete = async () => {\n    setIsDeletingViaDialog(true);\n    const success = await deleteActivity(activity.id);\n    setIsDeletingViaDialog(false);\n    onConfirmDeleteClose();\n\n    if (success) {\n         toast({ title: 'Activity deleted.', status: 'success', duration: 3000, isClosable: true });\n    } else {\n         // Use activitiesError from useActivitiesStore\n         toast({ title: 'Error deleting activity', description: activitiesError || 'Unknown error', status: 'error', duration: 3000, isClosable: true });\n    }\n  };\n\n  const handleEditClick = () => {\n      onEditOpen();\n  };\n\n  // Determine linked entity for display\n  const linkedEntity = activity.deal \n    ? `Deal: ${activity.deal.name}` \n    : activity.person \n    ? `Person: ${activity.person.first_name || ''} ${activity.person.last_name || ''}`.trim()\n    : activity.organization\n    ? `Org: ${activity.organization.name}`\n    : 'No Link';\n\n  return (\n    <>\n      <Flex \n          alignItems=\"center\" \n          p={3} \n          borderWidth=\"1px\" \n          borderRadius=\"md\" \n          bg={activity.is_done ? 'gray.50' : 'white'}\n          _hover={{ bg: activity.is_done ? 'gray.100' : 'gray.50' }}\n      >\n        <Checkbox \n          isChecked={activity.is_done} \n          onChange={handleToggleDone} \n          mr={4} \n          aria-label=\"Mark activity as done\"\n          isDisabled={ // New RBAC logic\n            !(\n              userPermissions?.includes('activity:update_any') ||\n              (userPermissions?.includes('activity:update_own') && activity.user_id === currentUserId)\n            )\n          }\n        />\n        <Box flexGrow={1} opacity={activity.is_done ? 0.6 : 1}>\n          <HStack mb={1}>\n              <Tag size=\"sm\" colorScheme={getActivityTypeColor(activity.type)}>{activity.type || '-'}</Tag>\n              <Text fontWeight=\"medium\">{activity.subject}</Text>\n          </HStack>\n          <Text fontSize=\"sm\" color=\"gray.600\">Due: {formatDateTime(activity.due_date)}</Text>\n          <Text fontSize=\"xs\" color=\"gray.500\">Linked To: {linkedEntity}</Text>\n          {activity.notes && <Text fontSize=\"xs\" color=\"gray.500\" mt={1}>Notes: {activity.notes}</Text>}\n        </Box>\n        <Spacer />\n        <HStack spacing={1}>\n          <IconButton\n            aria-label=\"Edit activity\"\n            icon={<EditIcon />}\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleEditClick}\n            isDisabled={ // New RBAC logic\n                !(\n                  userPermissions?.includes('activity:update_any') ||\n                  (userPermissions?.includes('activity:update_own') && activity.user_id === currentUserId)\n                )\n            }\n          />\n          <IconButton\n            aria-label=\"Delete activity\"\n            icon={<DeleteIcon />}\n            colorScheme=\"red\"\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleDeleteClick}\n            isDisabled={ // New RBAC logic\n                !(\n                    userPermissions?.includes('activity:delete_any') ||\n                    (userPermissions?.includes('activity:delete_own') && activity.user_id === currentUserId)\n                )\n            }\n          />\n        </HStack>\n      </Flex>\n\n      {/* Render the Edit Modal */}\n      <EditActivityModal \n        isOpen={isEditOpen} \n        onClose={onEditClose} \n        activity={activity} \n      />\n\n      {/* Confirmation Dialog for Deleting Activity */}\n      <ConfirmationDialog \n        isOpen={isConfirmDeleteDialogOpen}\n        onClose={onConfirmDeleteClose}\n        onConfirm={handleConfirmDelete}\n        headerText=\"Delete Activity\"\n        bodyText=\"Are you sure you want to delete this activity? This action cannot be undone.\"\n        confirmButtonText=\"Delete\"\n        confirmButtonColorScheme=\"red\"\n        isLoading={isDeletingViaDialog} // Use specific loading state for dialog\n      />\n    </>\n  );\n}\n\nexport default ActivityListItem; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/activities/CreateActivityForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_peopleError' is assigned a value but never used.","line":55,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_dealsError' is assigned a value but never used.","line":58,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_organizationsError' is assigned a value but never used.","line":61,"column":88,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":107},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":90,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":90,"endColumn":18,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2821,2821],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2821,2821],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":91,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":91,"endColumn":19,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2840,2840],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2840,2840],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":92,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":92,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2859,2859],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2859,2859],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":165,"column":20,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":165,"endColumn":44}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useForm, SubmitHandler } from 'react-hook-form';\nimport React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Select,\n  Textarea,\n  Checkbox,\n  VStack,\n  useToast,\n  RadioGroup,\n  Radio,\n  HStack,\n  Spinner,\n  Alert,\n  AlertIcon,\n} from '@chakra-ui/react';\nimport { useActivitiesStore, GeneratedCreateActivityInput as CreateActivityInput, ActivityType } from '../../stores/useActivitiesStore';\nimport { usePeopleStore, Person } from '../../stores/usePeopleStore';\nimport { useDealsStore, Deal } from '../../stores/useDealsStore';\nimport { useOrganizationsStore, Organization } from '../../stores/useOrganizationsStore';\n\n// Define Activity Types matching GraphQL Enum\nconst activityTypes = [\n  'TASK',\n  'MEETING',\n  'CALL',\n  'EMAIL',\n  'DEADLINE',\n];\n\ninterface CreateActivityFormProps {\n  onClose: () => void;\n  onSuccess?: () => void; // Optional callback on successful creation\n  // Pass pre-filled links if creating from Deal/Person/Org page?\n  // initialDealId?: string;\n  // initialPersonId?: string;\n  // initialOrganizationId?: string;\n}\n\n// Use the store's CreateActivityInput for form values\ntype FormValues = CreateActivityInput;\n\n// Define type for link selection\ntype LinkType = 'deal' | 'person' | 'organization' | 'none';\n\nfunction CreateActivityForm({ onClose, onSuccess }: CreateActivityFormProps) {\n  // Actions and state from useActivitiesStore\n  const { createActivity, activitiesError, activitiesLoading } = useActivitiesStore();\n\n  // People state & actions from usePeopleStore\n  const { people, fetchPeople, peopleLoading, peopleError: _peopleError } = usePeopleStore();\n\n  // Deals state & actions from useDealsStore\n  const { deals, fetchDeals, dealsLoading, dealsError: _dealsError } = useDealsStore();\n\n  // Organizations state & actions from useOrganizationsStore\n  const { organizations, fetchOrganizations, organizationsLoading, organizationsError: _organizationsError } = useOrganizationsStore();\n\n  const toast = useToast();\n  const { \n    handleSubmit, \n    register, \n    formState: { errors, isSubmitting },\n    reset, \n    setValue, \n  } = useForm<FormValues>({\n      defaultValues: {\n          type: activityTypes[0] as ActivityType,\n          subject: '',\n          due_date: null,\n          notes: '',\n          is_done: false,\n          deal_id: null,\n          person_id: null,\n          organization_id: null,\n      }\n  });\n\n  // State for the selected link type\n  const [selectedLinkType, setSelectedLinkType] = useState<LinkType>('none');\n\n  // Fetch related entities when the form mounts (or modal opens)\n  useEffect(() => {\n    // Fetch data for dropdowns when the component mounts.\n    // The stores themselves should ideally prevent redundant fetches if data is already loaded or loading.\n    fetchDeals(); \n    fetchPeople();\n    fetchOrganizations();\n    // Dependency array includes the fetch functions. These should be stable references from Zustand.\n    // If they were unstable, this could loop. Assuming they are stable.\n  }, [fetchDeals, fetchPeople, fetchOrganizations]);\n\n  // Clear other link IDs when radio selection changes\n  const handleLinkTypeChange = (nextValue: string) => {\n      const linkType = nextValue as LinkType;\n      setSelectedLinkType(linkType);\n      // Clear other fields when changing type\n      if (linkType !== 'deal') setValue('deal_id', null);\n      if (linkType !== 'person') setValue('person_id', null);\n      if (linkType !== 'organization') setValue('organization_id', null);\n  };\n\n  const onSubmit: SubmitHandler<FormValues> = async (values) => {\n    console.log('Submitting activity:', values);\n    \n    // Ensure at least one link is present (client-side check mimicking backend)\n    if (!values.deal_id && !values.person_id && !values.organization_id) {\n        toast({ title: 'Link Required', description: 'Please link the activity to a Deal, Person, or Organization.', status: 'warning', duration: 4000, isClosable: true });\n        return; // Prevent submission\n    }\n\n    // Convert empty strings to null for optional fields if necessary (esp. links)\n    const submissionData = { ...values };\n    if (!submissionData.deal_id) submissionData.deal_id = null;\n    if (!submissionData.person_id) submissionData.person_id = null;\n    if (!submissionData.organization_id) submissionData.organization_id = null;\n    if (!submissionData.notes) submissionData.notes = null;\n\n    // Format due_date to ISO 8601 if it exists\n    if (submissionData.due_date) {\n      try {\n        // Create a Date object from the local datetime string\n        const date = new Date(submissionData.due_date);\n        // Check if the date is valid before converting\n        if (!isNaN(date.getTime())) {\n          submissionData.due_date = date.toISOString();\n        } else {\n          // Handle invalid date input from the browser - could clear or keep original string based on desired UX\n          console.warn(\"Invalid date string from datetime-local input:\", submissionData.due_date);\n          // Setting to null to avoid sending invalid string to backend\n          submissionData.due_date = null; \n        }\n      } catch (error) {\n          console.error(\"Error parsing date:\", error);\n          // Handle potential errors during Date construction/conversion, set to null\n          submissionData.due_date = null;\n      }\n    } else {\n       // Ensure it's explicitly null if not provided or cleared\n       submissionData.due_date = null;\n    }\n\n    const createdActivity = await createActivity(submissionData);\n\n    if (createdActivity) {\n      toast({ title: 'Activity created.', status: 'success', duration: 3000, isClosable: true });\n      reset(); // Reset form on success\n      onSuccess?.(); // Call optional success callback (e.g., refresh list)\n      onClose(); // Close modal\n    } else {\n      // Error toast is likely handled by the store hook or generic error boundary\n      // but we can add a specific one here if desired.\n      toast({ title: 'Failed to create activity', description: activitiesError || 'Please check the details and try again.', status: 'error', duration: 5000, isClosable: true });\n    }\n  };\n\n  // Loading state for dropdowns\n  const isLoadingLinks = dealsLoading || peopleLoading || organizationsLoading;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <VStack spacing={4} p={4}>\n        {/* Optionally display activityError if it means form submission error */}\n        {activitiesError && (\n            <Alert status=\"error\" mb={4}>\n                <AlertIcon />\n                {activitiesError}\n            </Alert>\n        )}\n        <FormControl isInvalid={!!errors.subject}>\n          <FormLabel htmlFor='subject'>Subject</FormLabel>\n          <Input\n            id='subject'\n            {...register('subject', { required: 'Subject is required' })}\n          />\n          <FormErrorMessage>{errors.subject?.message}</FormErrorMessage>\n        </FormControl>\n\n        <FormControl isInvalid={!!errors.type}>\n            <FormLabel htmlFor='type'>Type</FormLabel>\n            <Select id='type' {...register('type', { required: 'Type is required' })} defaultValue={activityTypes[0] as ActivityType}>\n                {activityTypes.map(type => (\n                    <option key={type} value={type}>{type}</option>\n                ))}\n            </Select>\n            <FormErrorMessage>{errors.type?.message}</FormErrorMessage>\n        </FormControl>\n\n        <FormControl isInvalid={!!errors.due_date}>\n          <FormLabel htmlFor='due_date'>Due Date/Time</FormLabel>\n          <Input\n            id='due_date'\n            type='datetime-local' // Use datetime-local for combined date and time\n            {...register('due_date')}\n          />\n          <FormErrorMessage>{errors.due_date?.message as string}</FormErrorMessage>\n        </FormControl>\n        \n        {/* --- Linked Entity Selection --- */}\n        <FormControl isInvalid={!!errors.deal_id || !!errors.person_id || !!errors.organization_id}>\n             <FormLabel>Linked To</FormLabel>\n             <RadioGroup onChange={handleLinkTypeChange} value={selectedLinkType}>\n                 <HStack spacing='20px' mb={2}>\n                     <Radio value='deal'>Deal</Radio>\n                     <Radio value='person'>Person</Radio>\n                     <Radio value='organization'>Organization</Radio>\n                     <Radio value='none' isDisabled={true} hidden={true}>None</Radio> {/* Hidden option for default/cleared */} \n                 </HStack>\n             </RadioGroup>\n             \n             {isLoadingLinks && <Spinner size=\"sm\" my={2}/>}\n\n             {!isLoadingLinks && selectedLinkType === 'deal' && (\n                 <Select \n                    id='deal_id' \n                    placeholder='Select Deal' \n                    {...register('deal_id')} // Register deal_id\n                >\n                     {deals.map((deal: Deal) => (\n                        <option key={deal.id} value={deal.id}>{deal.name}</option>\n                     ))}\n                 </Select>\n             )}\n            {!isLoadingLinks && selectedLinkType === 'person' && (\n                 <Select \n                    id='person_id' \n                    placeholder='Select Person' \n                    {...register('person_id')} // Register person_id\n                 >\n                     {people.map((person: Person) => (\n                        <option key={person.id} value={person.id}>\n                            {[person.first_name, person.last_name].filter(Boolean).join(' ') || person.email}\n                        </option>\n                     ))}\n                 </Select>\n             )}\n             {!isLoadingLinks && selectedLinkType === 'organization' && (\n                 <Select \n                    id='organization_id' \n                    placeholder='Select Organization' \n                    {...register('organization_id')} // Register organization_id\n                 >\n                     {organizations.map((org: Organization) => (\n                        <option key={org.id} value={org.id}>{org.name}</option>\n                     ))}\n                 </Select>\n             )}\n             {(errors.deal_id || errors.person_id || errors.organization_id) && \n                <FormErrorMessage>Please select a linked entity if a type is chosen.</FormErrorMessage> }\n        </FormControl>\n        {/* --- End Linked Entity Selection --- */}\n        \n        <FormControl isInvalid={!!errors.notes}>\n          <FormLabel htmlFor='notes'>Notes</FormLabel>\n          <Textarea id='notes' {...register('notes')} />\n          <FormErrorMessage>{errors.notes?.message}</FormErrorMessage>\n        </FormControl>\n\n        <FormControl>\n          <Checkbox {...register('is_done')}>Mark as Done</Checkbox>\n        </FormControl>\n\n        <Button type=\"submit\" colorScheme=\"blue\" isLoading={isSubmitting || activitiesLoading}>\n          Create Activity\n        </Button>\n      </VStack>\n    </form>\n  );\n}\n\nexport default CreateActivityForm; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/activities/EditActivityForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ActivityType' is defined but never used.","line":24,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'getInitialLinkType'. Either include it or remove the dependency array.","line":100,"column":6,"nodeType":"ArrayExpression","endLine":100,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [activity, getInitialLinkType, reset]","fix":{"range":[3160,3177],"text":"[activity, getInitialLinkType, reset]"}}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":104,"column":46,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":104,"endColumn":59,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3274,3274],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3274,3274],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":105,"column":48,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":105,"endColumn":62,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3335,3335],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3335,3335],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":106,"column":62,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":106,"endColumn":83,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3411,3411],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3411,3411],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":148,"column":20,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":148,"endColumn":44}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Select,\n  Textarea,\n  Checkbox,\n  VStack,\n  useToast,\n  Alert,\n  AlertIcon,\n  RadioGroup,\n  Radio,\n  HStack,\n  Spinner\n} from '@chakra-ui/react';\nimport { \n    useActivitiesStore, \n    GeneratedUpdateActivityInput as UpdateActivityInput,\n    ActivityType, \n    Activity \n} from '../../stores/useActivitiesStore';\nimport { useDealsStore, Deal } from '../../stores/useDealsStore';\nimport { usePeopleStore, Person } from '../../stores/usePeopleStore';\nimport { useOrganizationsStore, Organization } from '../../stores/useOrganizationsStore';\n\n// Define Activity Types matching GraphQL Enum\nconst activityTypes = [\n  'TASK',\n  'MEETING',\n  'CALL',\n  'EMAIL',\n  'DEADLINE',\n];\n\ninterface EditActivityFormProps {\n  activity: Activity; // Use Activity type from store\n  onClose: () => void;\n  onSuccess?: () => void;\n}\n\n// Define type for link selection (same as CreateActivityForm)\ntype LinkType = 'deal' | 'person' | 'organization' | 'none';\n\nfunction EditActivityForm({ activity, onClose, onSuccess }: EditActivityFormProps) {\n  // Actions and state from useActivitiesStore\n  const { updateActivity, activitiesError, activitiesLoading } = useActivitiesStore();\n  const toast = useToast();\n  \n  // Fetching data for linked entities\n  const { deals, fetchDeals, dealsLoading } = useDealsStore();\n  const { people, fetchPeople, peopleLoading } = usePeopleStore();\n  const { organizations, fetchOrganizations, organizationsLoading } = useOrganizationsStore();\n\n  const getInitialLinkType = (): LinkType => {\n    if (activity.deal_id) return 'deal';\n    if (activity.person_id) return 'person';\n    if (activity.organization_id) return 'organization';\n    return 'none'; // Should ideally not be 'none' for an existing activity if links are mandatory\n  };\n  \n  const [selectedLinkType, setSelectedLinkType] = useState<LinkType>(getInitialLinkType());\n\n  const { \n    handleSubmit, \n    register, \n    formState: { errors, isSubmitting }, \n    reset, \n    setValue\n  } = useForm<UpdateActivityInput>({\n      defaultValues: {\n      type: activity.type,\n          subject: activity.subject,\n      due_date: activity.due_date ? new Date(activity.due_date).toISOString().substring(0, 16) : null,\n      notes: activity.notes || '',\n          is_done: activity.is_done,\n          deal_id: activity.deal_id,\n          person_id: activity.person_id,\n          organization_id: activity.organization_id,\n      }\n  });\n\n  // Reset form if activity prop changes (e.g. modal is reused for different activities)\n  useEffect(() => {\n    reset({\n      type: activity.type,\n      subject: activity.subject,\n      due_date: activity.due_date ? new Date(activity.due_date).toISOString().substring(0, 16) : null,\n      notes: activity.notes || '',\n      is_done: activity.is_done,\n      deal_id: activity.deal_id,\n      person_id: activity.person_id,\n      organization_id: activity.organization_id,\n    });\n    setSelectedLinkType(getInitialLinkType()); // Reset link type when activity changes\n  }, [activity, reset]);\n\n  // Fetch related entities\n  useEffect(() => {\n    if (deals.length === 0 && !dealsLoading) fetchDeals();\n    if (people.length === 0 && !peopleLoading) fetchPeople();\n    if (organizations.length === 0 && !organizationsLoading) fetchOrganizations();\n  }, [fetchDeals, fetchPeople, fetchOrganizations, deals, people, organizations, dealsLoading, peopleLoading, organizationsLoading]);\n\n  const handleLinkTypeChange = (nextValue: string) => {\n    const linkType = nextValue as LinkType;\n    setSelectedLinkType(linkType);\n    setValue('deal_id', linkType === 'deal' ? (activity.deal_id || null) : null, { shouldDirty: true });\n    setValue('person_id', linkType === 'person' ? (activity.person_id || null) : null, { shouldDirty: true });\n    setValue('organization_id', linkType === 'organization' ? (activity.organization_id || null) : null, { shouldDirty: true });\n  };\n\n  const onSubmit: SubmitHandler<UpdateActivityInput> = async (values) => {\n    const submissionData: UpdateActivityInput = { ...values }; \n\n    if (!submissionData.deal_id && !submissionData.person_id && !submissionData.organization_id) {\n        toast({ title: 'Link Required', description: 'Activity must be linked to a Deal, Person, or Organization.', status: 'warning', duration: 4000, isClosable: true });\n        return;\n    }\n\n    if (submissionData.notes === '') submissionData.notes = null;\n    if (submissionData.due_date) {\n                    try {\n        const date = new Date(submissionData.due_date);\n        submissionData.due_date = !isNaN(date.getTime()) ? date.toISOString() : null;\n      } catch { submissionData.due_date = null; }\n                        } else {\n      submissionData.due_date = null;\n    }\n\n    const updatedActivity = await updateActivity(activity.id, submissionData);\n    if (updatedActivity) {\n      toast({ title: 'Activity updated.', status: 'success', duration: 3000, isClosable: true });\n      onSuccess?.();\n      onClose();\n    } else {\n      toast({ title: 'Failed to update activity', description: activitiesError || 'Please check details and try again.', status: 'error', duration: 5000, isClosable: true });\n    }\n  };\n\n  const isLoadingLinks = dealsLoading || peopleLoading || organizationsLoading;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <VStack spacing={4} p={4}>\n        {activitiesError && (\n            <Alert status=\"error\" mb={4}>\n                <AlertIcon />\n                {activitiesError}\n            </Alert>\n        )}\n        \n        <FormControl isInvalid={!!errors.subject}>\n          <FormLabel htmlFor='subject'>Subject</FormLabel>\n          <Input\n            id='subject'\n            {...register('subject', { required: 'Subject is required' })}\n          />\n          <FormErrorMessage>{errors.subject?.message}</FormErrorMessage>\n        </FormControl>\n\n        <FormControl isInvalid={!!errors.type}>\n            <FormLabel htmlFor='type'>Type</FormLabel>\n            <Select id='type' {...register('type', { required: 'Type is required' })}>\n                {activityTypes.map(type => (\n                    <option key={type} value={type}>{type}</option>\n                ))}\n            </Select>\n            <FormErrorMessage>{errors.type?.message}</FormErrorMessage>\n        </FormControl>\n\n        <FormControl isInvalid={!!errors.due_date}>\n          <FormLabel htmlFor='due_date'>Due Date/Time</FormLabel>\n          <Input\n            id='due_date'\n            type='datetime-local'\n            {...register('due_date')}\n          />\n          <FormErrorMessage>{errors.due_date?.message as string}</FormErrorMessage>\n        </FormControl>\n        \n        <FormControl isInvalid={!!errors.deal_id || !!errors.person_id || !!errors.organization_id}>\n             <FormLabel>Linked To</FormLabel>\n             <RadioGroup onChange={handleLinkTypeChange} value={selectedLinkType}>\n                 <HStack spacing='20px' mb={2}>\n                     <Radio value='deal'>Deal</Radio>\n                     <Radio value='person'>Person</Radio>\n                     <Radio value='organization'>Organization</Radio>\n                 </HStack>\n             </RadioGroup>\n             \n             {isLoadingLinks && <Spinner size=\"sm\" my={2}/>}\n\n             {!isLoadingLinks && selectedLinkType === 'deal' && (\n                 <Select id='deal_id' placeholder='Select Deal' {...register('deal_id')} defaultValue={activity.deal_id || ''}>\n                     {deals.map((deal: Deal) => (<option key={deal.id} value={deal.id}>{deal.name}</option>))}\n                 </Select>\n             )}\n            {!isLoadingLinks && selectedLinkType === 'person' && (\n                 <Select id='person_id' placeholder='Select Person' {...register('person_id')} defaultValue={activity.person_id || ''}>\n                     {people.map((person: Person) => (<option key={person.id} value={person.id}>{`${person.first_name || ''} ${person.last_name || ''}`.trim() || person.email}</option>))}\n                 </Select>\n             )}\n             {!isLoadingLinks && selectedLinkType === 'organization' && (\n                 <Select id='organization_id' placeholder='Select Organization' {...register('organization_id')} defaultValue={activity.organization_id || ''}>\n                     {organizations.map((org: Organization) => (<option key={org.id} value={org.id}>{org.name}</option>))}\n                 </Select>\n             )}\n             {(errors.deal_id && selectedLinkType ==='deal' || errors.person_id && selectedLinkType ==='person' || errors.organization_id && selectedLinkType ==='organization') && \n                <FormErrorMessage>Please select a linked entity.</FormErrorMessage> }\n        </FormControl>\n        \n        <FormControl isInvalid={!!errors.notes}>\n          <FormLabel htmlFor='notes'>Notes</FormLabel>\n          <Textarea\n            id='notes'\n            {...register('notes')}\n          />\n          <FormErrorMessage>{errors.notes?.message}</FormErrorMessage>\n        </FormControl>\n\n        <FormControl>\n          <Checkbox id='is_done' {...register('is_done')}>\n            Mark as Done\n          </Checkbox>\n        </FormControl>\n\n        <Button type=\"submit\" colorScheme=\"blue\" isLoading={isSubmitting || activitiesLoading}>\n          Update Activity\n        </Button>\n      </VStack>\n    </form>\n  );\n}\n\nexport default EditActivityForm; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/activities/EditActivityModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/admin/customFields/CustomFieldDefinitionForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":99,"column":20,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":99,"endColumn":48}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { useForm, Controller, useFieldArray } from 'react-hook-form';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Select,\n  Checkbox,\n  VStack,\n  Text,\n  SimpleGrid,\n  IconButton,\n  HStack,\n} from '@chakra-ui/react';\nimport { AddIcon, DeleteIcon } from '@chakra-ui/icons';\nimport {\n  CustomFieldDefinitionInput,\n  CustomFieldEntityType,\n  CustomFieldType,\n  CustomFieldOptionInput,\n} from '../../../generated/graphql/graphql';\n\nexport interface CustomFieldDefinitionFormValues extends Omit<CustomFieldDefinitionInput, 'dropdownOptions' | 'entityType'> {\n  entityType: CustomFieldEntityType;\n  dropdownOptions?: CustomFieldOptionInput[];\n}\n\ninterface CustomFieldDefinitionFormProps {\n  onSubmit: (values: CustomFieldDefinitionInput) => Promise<void>;\n  initialValues?: Partial<CustomFieldDefinitionFormValues>;\n  entityType: CustomFieldEntityType;\n  isSubmitting: boolean;\n}\n\nconst CustomFieldDefinitionForm: React.FC<CustomFieldDefinitionFormProps> = ({\n  onSubmit,\n  initialValues,\n  entityType,\n  isSubmitting,\n}) => {\n  const {\n    handleSubmit,\n    register,\n    control,\n    watch,\n    reset,\n    formState: { errors },\n  } = useForm<CustomFieldDefinitionFormValues>({\n    defaultValues: {\n      ...initialValues,\n      entityType: entityType,\n      isRequired: initialValues?.isRequired ?? false,\n      displayOrder: initialValues?.displayOrder ?? 0,\n      fieldType: initialValues?.fieldType || CustomFieldType.Text,\n      dropdownOptions: initialValues?.dropdownOptions || [],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: \"dropdownOptions\",\n  });\n\n  const isEditMode = !!initialValues?.fieldName;\n\n  useEffect(() => {\n    const defaultVals = {\n      ...initialValues,\n      entityType: entityType,\n      isRequired: initialValues?.isRequired ?? false,\n      displayOrder: initialValues?.displayOrder ?? 0,\n      fieldType: initialValues?.fieldType || CustomFieldType.Text,\n      dropdownOptions: initialValues?.dropdownOptions || [],\n    };\n    reset(defaultVals);\n  }, [initialValues, entityType, reset]);\n\n  const fieldTypeWatch = watch('fieldType');\n\n  const onFormSubmit = (values: CustomFieldDefinitionFormValues) => {\n    const submissionValues: CustomFieldDefinitionInput = {\n      entityType: entityType,\n      fieldName: values.fieldName,\n      fieldLabel: values.fieldLabel,\n      fieldType: values.fieldType,\n      isRequired: values.isRequired,\n      displayOrder: values.displayOrder,\n      dropdownOptions: (values.fieldType === CustomFieldType.Dropdown || values.fieldType === CustomFieldType.MultiSelect) && values.dropdownOptions && values.dropdownOptions.length > 0 \n        ? values.dropdownOptions \n        : null,\n    };\n    return onSubmit(submissionValues);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onFormSubmit)}>\n      <VStack spacing={4} align=\"stretch\">\n        <FormControl isInvalid={!!errors.fieldLabel} isRequired>\n          <FormLabel htmlFor=\"fieldLabel\">Field Label</FormLabel>\n          <Input\n            id=\"fieldLabel\"\n            {...register('fieldLabel', { required: 'Field Label is required' })}\n          />\n          <FormErrorMessage>{errors.fieldLabel?.message}</FormErrorMessage>\n        </FormControl>\n\n        <FormControl isInvalid={!!errors.fieldName} isRequired>\n          <FormLabel htmlFor=\"fieldName\">Field Name (Internal)</FormLabel>\n          <Input\n            id=\"fieldName\"\n            {...register('fieldName', {\n              required: 'Field Name is required',\n              pattern: {\n                value: /^[a-zA-Z0-9_]+$/,\n                message: 'Field Name can only contain letters, numbers, and underscores.',\n              },\n            })}\n            placeholder=\"e.g., contact_source or deal_priority\"\n            isDisabled={isEditMode}\n          />\n          <FormErrorMessage>{errors.fieldName?.message}</FormErrorMessage>\n        </FormControl>\n\n        <FormControl isInvalid={!!errors.fieldType} isRequired>\n          <FormLabel htmlFor=\"fieldType\">Field Type</FormLabel>\n          <Controller\n            name=\"fieldType\"\n            control={control}\n            rules={{ required: 'Field Type is required' }}\n            defaultValue={CustomFieldType.Text}\n            render={({ field }) => (\n              <Select {...field} id=\"fieldType\" isDisabled={isEditMode}>\n                {Object.values(CustomFieldType).map((type) => (\n                  <option key={type} value={type}>\n                    {type}\n                  </option>\n                ))}\n              </Select>\n            )}\n          />\n          <FormErrorMessage>{errors.fieldType?.message}</FormErrorMessage>\n        </FormControl>\n\n        {(fieldTypeWatch === CustomFieldType.Dropdown || fieldTypeWatch === CustomFieldType.MultiSelect) && (\n          <Box borderWidth=\"1px\" borderRadius=\"md\" p={4}>\n            <HStack justifyContent=\"space-between\" mb={2}>\n                <FormLabel mb={0}>Dropdown Options</FormLabel>\n                <Button leftIcon={<AddIcon />} size=\"sm\" onClick={() => append({ value: '', label: '' })}>\n                    Add Option\n                </Button>\n            </HStack>\n            {fields.map((item, index) => (\n              <SimpleGrid columns={3} spacing={2} key={item.id} mb={2} alignItems=\"center\">\n                <FormControl isInvalid={!!errors.dropdownOptions?.[index]?.value}>\n                  <Input\n                    {...register(`dropdownOptions.${index}.value` as const, { required: 'Value is required' })}\n                    placeholder=\"Option Value\"\n                    defaultValue={item.value} \n                  />\n                  <FormErrorMessage>{errors.dropdownOptions?.[index]?.value?.message}</FormErrorMessage>\n                </FormControl>\n                <FormControl isInvalid={!!errors.dropdownOptions?.[index]?.label}>\n                  <Input\n                    {...register(`dropdownOptions.${index}.label` as const, { required: 'Label is required' })}\n                    placeholder=\"Option Label\"\n                    defaultValue={item.label}\n                  />\n                  <FormErrorMessage>{errors.dropdownOptions?.[index]?.label?.message}</FormErrorMessage>\n                </FormControl>\n                <IconButton\n                  aria-label=\"Remove option\"\n                  icon={<DeleteIcon />}\n                  size=\"sm\"\n                  colorScheme=\"red\"\n                  onClick={() => remove(index)}\n                />\n              </SimpleGrid>\n            ))}\n            {fields.length === 0 && <Text fontSize=\"sm\" color=\"gray.500\">No options defined. Click \"Add Option\".</Text>}\n          </Box>\n        )}\n\n        <FormControl isInvalid={!!errors.displayOrder}>\n          <FormLabel htmlFor=\"displayOrder\">Display Order</FormLabel>\n          <Controller\n            name=\"displayOrder\"\n            control={control}\n            defaultValue={0}\n            render={({ field }) => (\n              <Input \n                {...field} \n                id=\"displayOrder\" \n                type=\"number\" \n                value={field.value ?? ''}\n                onChange={e => field.onChange(parseInt(e.target.value, 10) || 0)} \n              />\n            )}\n          />\n          <FormErrorMessage>{errors.displayOrder?.message}</FormErrorMessage>\n        </FormControl>\n\n        <FormControl isInvalid={!!errors.isRequired}>\n          <Checkbox id=\"isRequired\" {...register('isRequired')}>\n            Is Required?\n          </Checkbox>\n          <FormErrorMessage>{errors.isRequired?.message}</FormErrorMessage>\n        </FormControl>\n\n        <Button mt={4} colorScheme=\"blue\" isLoading={isSubmitting} type=\"submit\">\n          {initialValues?.fieldName ? 'Update Definition' : 'Create Definition'}\n        </Button>\n      </VStack>\n    </form>\n  );\n};\n\nexport default CustomFieldDefinitionForm; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/admin/customFields/CustomFieldDefinitionList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ModalFooter' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":14},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":75,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":75,"endColumn":59,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2020,2020],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2020,2020],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4145,4148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4145,4148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":135,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":135,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":135,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":135,"endColumn":33},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":144,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":144,"endColumn":61,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4594,4594],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4594,4594],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function 'handleDeactivate' has no 'await' expression.","line":148,"column":62,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":148,"endColumn":64,"suggestions":[{"messageId":"removeAsync","fix":{"range":[4711,4717],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function 'handleReactivate' has no 'await' expression.","line":153,"column":62,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":153,"endColumn":64,"suggestions":[{"messageId":"removeAsync","fix":{"range":[4861,4867],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6065,6068],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6065,6068],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":192,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":192,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":192,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":192,"endColumn":33},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":293,"column":33,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":293,"endColumn":81},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":302,"column":33,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":302,"endColumn":81},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":375,"column":27,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":375,"endColumn":42}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Box,\n  Text,\n  Spinner,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n  Button,\n  Flex,\n  Select,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  Tag,\n  IconButton,\n  HStack,\n  useDisclosure,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  useToast,\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n} from '@chakra-ui/react';\nimport { EditIcon, CheckIcon, NotAllowedIcon, AddIcon } from '@chakra-ui/icons';\nimport { useCustomFieldDefinitionStore } from '../../../stores/useCustomFieldDefinitionStore';\nimport {\n  CustomFieldEntityType,\n  CustomFieldDefinition,\n  CustomFieldDefinitionInput,\n} from '../../../generated/graphql/graphql';\nimport CustomFieldDefinitionForm from './CustomFieldDefinitionForm';\n\nconst CustomFieldDefinitionList: React.FC = () => {\n  const {\n    definitions,\n    loading,\n    error,\n    fetchCustomFieldDefinitions,\n    createCustomFieldDefinition,\n    updateCustomFieldDefinition, // For edit later\n    deactivateCustomFieldDefinition,\n    reactivateCustomFieldDefinition,\n  } = useCustomFieldDefinitionStore();\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const toast = useToast();\n\n  // TODO: Add state for currentDefinitionToEdit: CustomFieldDefinition | null\n  const [currentDefinitionToEdit, setCurrentDefinitionToEdit] = React.useState<CustomFieldDefinition | null>(null);\n  \n  const { isOpen: isAlertOpen, onOpen: onAlertOpen, onClose: onAlertClose } = useDisclosure();\n  const [actionToConfirm, setActionToConfirm] = React.useState<{ id: string; type: 'deactivate' | 'reactivate'; label: string} | null>(null);\n  const cancelRef = React.useRef<HTMLButtonElement>(null);\n\n  const [selectedEntityType, setSelectedEntityType] = React.useState<CustomFieldEntityType>(\n    CustomFieldEntityType.Deal\n  );\n\n  React.useEffect(() => {\n    fetchCustomFieldDefinitions(selectedEntityType, true);\n  }, [selectedEntityType, fetchCustomFieldDefinitions]);\n\n  const handleEntityTypeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedEntityType(event.target.value as CustomFieldEntityType);\n  };\n\n  const handleOpenCreateModal = () => {\n    // TODO: Set currentDefinitionToEdit(null) for create mode\n    setCurrentDefinitionToEdit(null);\n    onOpen();\n  };\n\n  const handleOpenEditModal = (definition: CustomFieldDefinition) => {\n    setCurrentDefinitionToEdit(definition);\n    onOpen();\n  };\n\n  const handleFormSubmit = async (submissionInput: CustomFieldDefinitionInput) => {\n    setIsSubmitting(true);\n    try {\n      // console.log('Submitting Custom Field Definition:', submissionInput, 'Edit Mode:', !!currentDefinitionToEdit); \n\n      let result: CustomFieldDefinition | null = null;\n      if (currentDefinitionToEdit && currentDefinitionToEdit.id) {\n        result = await updateCustomFieldDefinition(currentDefinitionToEdit.id, submissionInput);\n        if (result) {\n          toast({\n            title: 'Custom Field Definition Updated',\n            description: `Successfully updated field: ${result.fieldLabel}`,\n            status: 'success',\n            duration: 5000,\n            isClosable: true,\n          });\n        }\n      } else {\n        result = await createCustomFieldDefinition(submissionInput);\n        if (result) {\n          toast({\n            title: 'Custom Field Definition Created',\n            description: `Successfully created field: ${result.fieldLabel}`,\n            status: 'success',\n            duration: 5000,\n            isClosable: true,\n          });\n        }\n      }\n\n      if (result) {\n        onClose(); // Close modal on success\n        setCurrentDefinitionToEdit(null); // Reset edit state\n      } else {\n        // Error might be in storeError, or result is null without throwing\n        throw new Error(useCustomFieldDefinitionStore.getState().error || \n          (currentDefinitionToEdit ? 'Failed to update definition.' : 'Failed to create definition.')\n        );\n      }\n    } catch (err: any) {\n      toast({\n        title: currentDefinitionToEdit ? 'Error Updating Definition' : 'Error Creating Definition',\n        description: err.message || 'An unexpected error occurred.',\n        status: 'error',\n        duration: 9000,\n        isClosable: true,\n      });\n    } finally {\n      setIsSubmitting(false);\n      onClose(); // Ensure modal always closes\n      setCurrentDefinitionToEdit(null); // Also ensure edit state is reset\n      fetchCustomFieldDefinitions(selectedEntityType, true); // Refetch definitions\n    }\n  };\n\n  const handleDeactivate = async (id: string, label: string) => {\n    setActionToConfirm({ id, type: 'deactivate', label });\n    onAlertOpen();\n  };\n\n  const handleReactivate = async (id: string, label: string) => {\n    setActionToConfirm({ id, type: 'reactivate', label });\n    onAlertOpen();\n  };\n  \n  const confirmAction = async () => {\n    if (!actionToConfirm) return;\n\n    const { id, type, label } = actionToConfirm;\n    setIsSubmitting(true); \n    let result: CustomFieldDefinition | null = null;\n    let successMessage = '';\n    let errorMessage = '';\n\n    try {\n      if (type === 'deactivate') {\n        result = await deactivateCustomFieldDefinition(id);\n        successMessage = `Successfully deactivated ${label}`;\n        errorMessage = 'Failed to deactivate definition.';\n      } else {\n        result = await reactivateCustomFieldDefinition(id);\n        successMessage = `Successfully reactivated ${label}`;\n        errorMessage = 'Failed to reactivate definition.';\n      }\n\n      if (result) {\n        toast({\n          title: `Definition ${type === 'deactivate' ? 'Deactivated' : 'Reactivated'}`,\n          description: successMessage,\n          status: 'success',\n          duration: 3000,\n          isClosable: true,\n        });\n      } else {\n        throw new Error(useCustomFieldDefinitionStore.getState().error || errorMessage);\n      }\n    } catch (err: any) {\n      toast({\n        title: `Error ${type === 'deactivate' ? 'Deactivating' : 'Reactivating'} Definition`,\n        description: err.message || 'An unexpected error occurred.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    } finally {\n      setIsSubmitting(false);\n      onAlertClose();\n      setActionToConfirm(null);\n    }\n  };\n\n  return (\n    <Box borderWidth=\"1px\" borderRadius=\"lg\" p={6} shadow=\"sm\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb={4}>\n        <HStack spacing={3} alignItems=\"center\">\n            <Text fontSize=\"xl\" fontWeight=\"semibold\">\n            Custom Field Definitions for:\n            </Text>\n            <Select \n                value={selectedEntityType} \n                onChange={handleEntityTypeChange} \n                width=\"200px\"\n                isDisabled={loading || isSubmitting}\n            >\n                <option value={CustomFieldEntityType.Deal}>Deals</option>\n                <option value={CustomFieldEntityType.Person}>People</option>\n                <option value={CustomFieldEntityType.Organization}>Organizations</option>\n            </Select>\n        </HStack>\n        <Button \n            leftIcon={<AddIcon />} \n            colorScheme=\"blue\" \n            onClick={handleOpenCreateModal} \n            ml=\"auto\"\n            isDisabled={loading || isSubmitting}\n        >\n          Add New Definition\n        </Button>\n      </Flex>\n\n      {loading && (\n        <Flex justifyContent=\"center\" my={8}>\n          <Spinner thickness=\"4px\" speed=\"0.65s\" emptyColor=\"gray.200\" color=\"blue.500\" size=\"xl\" />\n        </Flex>\n      )}\n\n      {error && (\n        <Alert status=\"error\" my={4}>\n          <AlertIcon />\n          <AlertTitle>Error loading definitions!</AlertTitle>\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {!loading && !error && (\n        <Table variant=\"simple\" size=\"sm\">\n          <Thead>\n            <Tr>\n              <Th>Label</Th>\n              <Th>Name (Internal)</Th>\n              <Th>Type</Th>\n              <Th>Required</Th>\n              <Th>Status</Th>\n              <Th>Order</Th>\n              <Th>Actions</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {definitions.length === 0 && (\n              <Tr>\n                <Td colSpan={6} textAlign=\"center\">No custom field definitions found for {selectedEntityType.toLowerCase()}.</Td>\n              </Tr>\n            )}\n            {definitions.map((def: CustomFieldDefinition) => (\n              <Tr key={def.id}>\n                <Td>{def.fieldLabel}</Td>\n                <Td><code>{def.fieldName}</code></Td>\n                <Td>{def.fieldType}</Td>\n                <Td>{def.isRequired ? 'Yes' : 'No'}</Td>\n                <Td>\n                  <Tag colorScheme={def.isActive ? 'green' : 'red'}>\n                    {def.isActive ? 'Active' : 'Inactive'}\n                  </Tag>\n                </Td>\n                <Td>{def.displayOrder}</Td>\n                <Td>\n                  <HStack spacing={2}>\n                    <IconButton \n                      aria-label=\"Edit definition\" \n                      icon={<EditIcon />} \n                      size=\"sm\" \n                      onClick={() => handleOpenEditModal(def)}\n                      isDisabled={isSubmitting}\n                    />\n                    {def.isActive ? (\n                      <IconButton \n                        aria-label=\"Deactivate definition\" \n                        icon={<NotAllowedIcon />} \n                        size=\"sm\" \n                        colorScheme=\"red\"\n                        onClick={() => handleDeactivate(def.id, def.fieldLabel)}\n                        isDisabled={isSubmitting}\n                      />\n                    ) : (\n                      <IconButton \n                        aria-label=\"Reactivate definition\" \n                        icon={<CheckIcon />} \n                        size=\"sm\" \n                        colorScheme=\"green\"\n                        onClick={() => handleReactivate(def.id, def.fieldLabel)}\n                        isDisabled={isSubmitting}\n                      />\n                    )}\n                  </HStack>\n                </Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n      )}\n\n      <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" closeOnOverlayClick={false}>\n        <ModalOverlay />\n        <ModalContent>\n          {/* TODO: Change header based on edit mode */}\n          <ModalHeader>{currentDefinitionToEdit ? 'Edit Custom Field Definition' : 'Add New Custom Field Definition'}</ModalHeader>\n          <ModalCloseButton isDisabled={isSubmitting} />\n          <ModalBody pb={6}>\n            <CustomFieldDefinitionForm \n              entityType={selectedEntityType} \n              onSubmit={handleFormSubmit} \n              isSubmitting={isSubmitting}\n              initialValues={currentDefinitionToEdit ? \n                { \n                  ...currentDefinitionToEdit, \n                  // Ensure dropdownOptions is in the format expected by the form if it exists\n                  dropdownOptions: currentDefinitionToEdit.dropdownOptions?.map(opt => ({ value: opt.value, label: opt.label })) \n                }\n                : { entityType: selectedEntityType } \n              }\n              // onCancel={onClose}\n            />\n          </ModalBody>\n          {/* ModalFooter can be removed if form has its own submit/cancel buttons */}\n          {/* <ModalFooter>\n            <Button onClick={onClose} mr={3} isDisabled={isSubmitting}>Cancel</Button>\n            <Button colorScheme=\"blue\" form=\"custom-field-form\" type=\"submit\" isLoading={isSubmitting}>\n              Save Definition\n            </Button>\n          </ModalFooter> */}\n        </ModalContent>\n      </Modal>\n\n      {actionToConfirm && (\n        <AlertDialog\n          isOpen={isAlertOpen}\n          leastDestructiveRef={cancelRef}\n          onClose={() => {\n            onAlertClose();\n            setActionToConfirm(null);\n          }}\n          isCentered\n        >\n          <AlertDialogOverlay>\n            <AlertDialogContent>\n              <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n                {actionToConfirm.type === 'deactivate' ? 'Deactivate' : 'Reactivate'} Definition\n              </AlertDialogHeader>\n\n              <AlertDialogBody>\n                Are you sure you want to {actionToConfirm.type} the custom field definition \"{actionToConfirm.label}\"?\n              </AlertDialogBody>\n\n              <AlertDialogFooter>\n                <Button ref={cancelRef} onClick={() => {\n                  onAlertClose();\n                  setActionToConfirm(null);\n                }} isDisabled={isSubmitting}>\n                  Cancel\n                </Button>\n                <Button \n                  colorScheme={actionToConfirm.type === 'deactivate' ? 'red' : 'green'} \n                  onClick={confirmAction} \n                  ml={3}\n                  isLoading={isSubmitting}\n                >\n                  {actionToConfirm.type === 'deactivate' ? 'Deactivate' : 'Reactivate'}\n                </Button>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialogOverlay>\n        </AlertDialog>\n      )}\n\n    </Box>\n  );\n};\n\nexport default CustomFieldDefinitionList; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/common/ColumnSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onReset' is defined but never used. Allowed unused args must match /^_/u.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  VStack,\n  Checkbox,\n  Text,\n  InputGroup,\n  InputLeftElement,\n  Input,\n  Box,\n  Divider,\n  HStack,\n} from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport type { ColumnDefinition } from './SortableTable'; // Assuming SortableTable exports this\n\ninterface ColumnSelectorProps<T> {\n  isOpen: boolean;\n  onClose: () => void;\n  allAvailableColumns: ColumnDefinition<T>[];\n  currentVisibleColumnKeys: string[];\n  defaultVisibleColumnKeys: string[];\n  onApply: (newVisibleColumnKeys: string[]) => void;\n  onReset: () => void;\n  // tableKey: string; // Not directly needed by this component if callbacks handle it\n}\n\nfunction ColumnSelector<T>({\n  isOpen,\n  onClose,\n  allAvailableColumns,\n  currentVisibleColumnKeys,\n  defaultVisibleColumnKeys,\n  onApply,\n  onReset,\n}: ColumnSelectorProps<T>) {\n  const [selectedKeys, setSelectedKeys] = useState<Set<string>>(new Set(currentVisibleColumnKeys));\n  const [searchTerm, setSearchTerm] = useState('');\n\n  useEffect(() => {\n    setSelectedKeys(new Set(currentVisibleColumnKeys));\n  }, [currentVisibleColumnKeys, isOpen]); // Reset internal state when currentVisibleKeys change or modal opens\n\n  const handleToggle = (key: string) => {\n    setSelectedKeys(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(key)) {\n        // Prevent unchecking the 'actions' column if it's the only one and meant to be sticky\n        // This logic can be enhanced or made configurable if 'actions' is not always special\n        if (key === 'actions' && newSet.size === 1) {\n            return newSet; // Don't allow unchecking the last item if it's actions\n        }\n        newSet.delete(key);\n      } else {\n        newSet.add(key);\n      }\n      return newSet;\n    });\n  };\n\n  const handleApply = () => {\n    onApply(Array.from(selectedKeys));\n    onClose();\n  };\n\n  const handleReset = () => {\n    setSelectedKeys(new Set(defaultVisibleColumnKeys));\n    // Intentionally not calling onApply here, user must explicitly apply reset\n    // Or, if direct reset is preferred: \n    // onReset(); \n    // onClose(); \n  };\n\n  const filteredColumns = allAvailableColumns.filter(col => \n    col.header.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Separate standard and custom fields for display, excluding 'actions' from main list if handled separately\n  const standardFields = filteredColumns.filter(col => {\n    const keyStr = String(col.key);\n    return !keyStr.startsWith('cf_') && keyStr !== 'actions';\n  });\n  const customFields = filteredColumns.filter(col => String(col.key).startsWith('cf_'));\n  const actionsField = filteredColumns.find(col => String(col.key) === 'actions');\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} size=\"md\" scrollBehavior=\"inside\">\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Select Columns to Display</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          <VStack spacing={4} align=\"stretch\">\n            <InputGroup>\n              <InputLeftElement pointerEvents=\"none\">\n                <SearchIcon color=\"gray.300\" />\n              </InputLeftElement>\n              <Input \n                placeholder=\"Search columns...\" \n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n            </InputGroup>\n            \n            <Box maxHeight=\"40vh\" overflowY=\"auto\" borderWidth=\"1px\" borderRadius=\"md\" p={3}>\n              <VStack spacing={3} align=\"stretch\">\n                {actionsField && (\n                  <Checkbox \n                    key={String(actionsField.key)} \n                    isChecked={selectedKeys.has(String(actionsField.key))} \n                    onChange={() => handleToggle(String(actionsField.key))}\n                    isDisabled={selectedKeys.has(String(actionsField.key)) && selectedKeys.size === 1} // Cannot uncheck if it's the only one selected\n                  >\n                    {actionsField.header}\n                  </Checkbox>\n                )}\n                {actionsField && (standardFields.length > 0 || customFields.length > 0) && <Divider my={2}/>}\n\n                {standardFields.length > 0 && <Text fontWeight=\"semibold\">Standard Fields</Text>}\n                {standardFields.map(col => (\n                  <Checkbox \n                    key={String(col.key)} \n                    isChecked={selectedKeys.has(String(col.key))} \n                    onChange={() => handleToggle(String(col.key))}\n                  >\n                    {col.header}\n                  </Checkbox>\n                ))}\n\n                {standardFields.length > 0 && customFields.length > 0 && <Divider my={2}/>}\n\n                {customFields.length > 0 && <Text fontWeight=\"semibold\">Custom Fields</Text>}\n                {customFields.map(col => (\n                  <Checkbox \n                    key={String(col.key)} \n                    isChecked={selectedKeys.has(String(col.key))} \n                    onChange={() => handleToggle(String(col.key))}\n                  >\n                    {col.header}\n                  </Checkbox>\n                ))}\n                \n                {filteredColumns.length === 0 && searchTerm && (\n                    <Text textAlign=\"center\" color=\"gray.500\">No columns match \"{searchTerm}\".</Text>\n                )}\n              </VStack>\n            </Box>\n          </VStack>\n        </ModalBody>\n\n        <ModalFooter>\n          <HStack justifyContent=\"space-between\" width=\"100%\">\n            <Button variant=\"outline\" onClick={handleReset} isDisabled={JSON.stringify(Array.from(selectedKeys).sort()) === JSON.stringify(defaultVisibleColumnKeys.sort())}>\n              Reset to Defaults\n            </Button>\n            <Box>\n              <Button variant=\"ghost\" mr={3} onClick={onClose}>\n                Cancel\n              </Button>\n              <Button colorScheme=\"blue\" onClick={handleApply}>\n                Apply\n              </Button>\n            </Box>\n          </HStack>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default ColumnSelector; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/common/ConfirmationDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/common/EmptyState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/common/QuickFilterControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/common/SortableTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":76,"column":13,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":76,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [sortConfig.key] on an `any` value.","line":76,"column":34,"nodeType":"MemberExpression","messageId":"unsafeMemberExpression","endLine":76,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":79,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":79,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":80,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":80,"endColumn":37}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2391,2394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2391,2394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  TableContainer,\n} from '@chakra-ui/react';\nimport { TriangleDownIcon, TriangleUpIcon } from '@chakra-ui/icons';\n\n// Generic Column Definition\nexport interface ColumnDefinition<T> {\n  key: keyof T | string; // Can be a key of T or a custom string for non-direct fields\n  header: string;\n  renderCell: (item: T) => React.ReactNode;\n  isSortable: boolean;\n  isNumeric?: boolean;\n  sortAccessor?: (item: T) => unknown; // Changed any to unknown\n}\n\n// Sort Configuration\ninterface SortConfig {\n  key: string;\n  direction: 'ascending' | 'descending';\n}\n\n// Component Props\ninterface SortableTableProps<T extends { id: string }> {\n  data: T[];\n  columns: ColumnDefinition<T>[];\n  initialSortKey: string; // Use string to match ColumnDefinition key type\n  initialSortDirection?: 'ascending' | 'descending';\n  // Include TableContainer props if needed, e.g., borderWidth, borderRadius\n  borderWidth?: string | number;\n  borderRadius?: string | number;\n}\n\nfunction SortableTable<T extends { id: string }>({ \n  data, \n  columns, \n  initialSortKey, \n  initialSortDirection = 'ascending',\n  borderWidth = \"1px\", // Default border\n  borderRadius = \"lg\"  // Default radius\n}: SortableTableProps<T>) {\n  \n  const [sortConfig, setSortConfig] = useState<SortConfig>({ \n      key: initialSortKey,\n      direction: initialSortDirection \n  });\n\n  const requestSort = (key: string) => {\n    let direction: 'ascending' | 'descending' = 'ascending';\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n      direction = 'descending';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  const sortedData = useMemo(() => {\n    const sortableItems = [...data];\n    const currentColumn = columns.find(col => col.key === sortConfig.key);\n    \n    if (!currentColumn?.isSortable) return sortableItems; // Return unsorted if column not found or not sortable\n\n    sortableItems.sort((a, b) => {\n        // Use sortAccessor if provided, otherwise direct key access\n        const getSortValue = (item: T) => {\n            if (currentColumn.sortAccessor) {\n                return currentColumn.sortAccessor(item);\n            }\n            // Fallback to direct key access using sortConfig.key\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            return (item as any)[sortConfig.key]; \n        };\n\n        let aValue = getSortValue(a);\n        let bValue = getSortValue(b);\n\n        // Basic type handling for comparison (can be expanded)\n        if (typeof aValue === 'string' && typeof bValue === 'string') {\n            aValue = aValue.toLowerCase();\n            bValue = bValue.toLowerCase();\n        } else if (aValue instanceof Date && bValue instanceof Date) {\n             aValue = aValue.getTime();\n             bValue = bValue.getTime();\n        } else if (typeof aValue === 'boolean' && typeof bValue === 'boolean') {\n             aValue = aValue ? 1 : 0;\n             bValue = bValue ? 1 : 0;\n        }\n        \n        // Handle null/undefined consistently (e.g., sort to end when ascending)\n        const isAscending = sortConfig.direction === 'ascending';\n        if (aValue == null && bValue != null) return isAscending ? 1 : -1;\n        if (aValue != null && bValue == null) return isAscending ? -1 : 1;\n        if (aValue == null && bValue == null) return 0;\n\n        // Standard comparison\n        if (aValue < bValue) return isAscending ? -1 : 1;\n        if (aValue > bValue) return isAscending ? 1 : -1;\n        return 0;\n    });\n    return sortableItems;\n  }, [data, columns, sortConfig]);\n\n  const renderSortIcon = (columnKey: string) => {\n      if (sortConfig.key !== columnKey) return null;\n      return sortConfig.direction === 'ascending' ? \n             <TriangleUpIcon aria-label=\"sorted ascending\" ml={1} w={3} h={3} /> : \n             <TriangleDownIcon aria-label=\"sorted descending\" ml={1} w={3} h={3} />;\n  };\n\n  return (\n    <TableContainer width=\"100%\" borderWidth={borderWidth} borderRadius={borderRadius}>\n      <Table variant=\"simple\" size=\"sm\" width=\"100%\">\n        <Thead>\n          <Tr borderBottomWidth=\"1px\" borderColor=\"gray.200\">\n            {columns.map((column) => (\n              <Th\n                key={String(column.key)} // Ensure key is string\n                isNumeric={column.isNumeric}\n                cursor={column.isSortable ? \"pointer\" : \"default\"}\n                _hover={column.isSortable ? { bg: 'gray.100' } : {}}\n                onClick={column.isSortable ? () => requestSort(String(column.key)) : undefined}\n              >\n                {column.header}\n                {column.isSortable && renderSortIcon(String(column.key))}\n              </Th>\n            ))}\n          </Tr>\n        </Thead>\n        <Tbody>\n          {sortedData.map((item) => (\n            <Tr key={item.id} bg=\"white\">\n              {columns.map((column) => (\n                <Td key={`${item.id}-${String(column.key)}`} isNumeric={column.isNumeric}>\n                  {column.renderCell(item)}\n                </Td>\n              ))}\n            </Tr>\n          ))}\n        </Tbody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nexport default SortableTable; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/common/ThemeSwitcher.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StarIcon' is defined but never used.","line":4,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":54}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useThemeStore, ThemeMode } from '../../stores/useThemeStore';\nimport { IconButton, useColorMode, Menu, MenuButton, MenuList, MenuItem, Text } from '@chakra-ui/react';\nimport { SunIcon, MoonIcon, ChevronDownIcon, StarIcon } from '@chakra-ui/icons';\n\nconst ThemeSwitcher: React.FC = () => {\n  const currentTheme = useThemeStore((state) => state.currentTheme);\n  const setCurrentTheme = useThemeStore((state) => state.setCurrentTheme);\n  const { setColorMode } = useColorMode();\n\n  // Chakra's useColorMode can still be useful for components that inherently use it,\n  // but our primary theme switching is now manual via Zustand.\n  // We might not need toggleColorMode directly if our themes explicitly set colors.\n  // const { colorMode, toggleColorMode } = useColorMode(); \n\n  const handleThemeChange = (newTheme: ThemeMode) => {\n    setCurrentTheme(newTheme);\n    // For Chakra's internal mode, Ocean Breeze, Bowie & Industrial are considered 'light' or 'dark'\n    // based on their overall brightness. Bowie & Industrial are dark-based.\n    let chakraColorMode: 'light' | 'dark';\n    if (newTheme === 'dark' || newTheme === 'bowie' || newTheme === 'industrialMetal' || newTheme === 'daliDark') {\n      chakraColorMode = 'dark';\n    } else {\n      chakraColorMode = 'light';\n    }\n    setColorMode(chakraColorMode);\n  };\n\n  const getThemeIcon = (theme: ThemeMode) => {\n    if (theme === 'light') return <SunIcon />;\n    if (theme === 'dark') return <MoonIcon />;\n    if (theme === 'daliDark') return <Text as=\"span\">👁️</Text>; // Dali Eye Icon\n    if (theme === 'bowie') return <Text as=\"span\">⚡</Text>;\n    if (theme === 'industrialMetal') return <Text as=\"span\">⚙️</Text>;\n    if (theme === 'andyWarhol') return <Text as=\"span\">🥫</Text>;\n    return <ChevronDownIcon />; // Fallback for button\n  };\n\n  const themeLabels: Record<ThemeMode, string> = {\n    light: 'Light Mode',\n    dark: 'Dark Mode',\n    daliDark: 'Dark Salvador Dali', // Renamed and relabeled\n    bowie: 'David Bowie',\n    industrialMetal: 'Industrial Metal',\n    andyWarhol: 'Andy Warhol',\n  };\n\n  return (\n    <Menu>\n      <MenuButton\n        as={IconButton}\n        aria-label=\"Select theme\"\n        icon={getThemeIcon(currentTheme)}\n        variant=\"ghost\"\n      />\n      <MenuList>\n        {(Object.keys(themeLabels) as ThemeMode[]).map((themeKey) => (\n          <MenuItem\n            key={themeKey}\n            icon={getThemeIcon(themeKey)}\n            onClick={() => handleThemeChange(themeKey)}\n            fontWeight={currentTheme === themeKey ? 'bold' : 'normal'}\n          >\n            {themeLabels[themeKey]}\n          </MenuItem>\n        ))}\n      </MenuList>\n    </Menu>\n  );\n};\n\nexport default ThemeSwitcher; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/deals/DealCardKanban.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":38,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":38,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gray on an `any` value.","line":38,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":39,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":39,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .blue on an `any` value.","line":39,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":40,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":40,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .yellow on an `any` value.","line":40,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":41,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":41,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gray on an `any` value.","line":41,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":42,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":42,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gray on an `any` value.","line":42,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":43,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":43,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .green on an `any` value.","line":43,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":44,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":44,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gray on an `any` value.","line":44,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":46,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":46,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":47,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":47,"endColumn":102},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":48,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":48,"endColumn":105},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":49,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":49,"endColumn":105},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":50,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":50,"endColumn":114},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":51,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":51,"endColumn":120},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":52,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":52,"endColumn":141},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useColorModeValue\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":52,"column":77,"nodeType":"Identifier","endLine":52,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gray on an `any` value.","line":52,"column":108,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":112},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gray on an `any` value.","line":52,"column":132,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":136},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":62,"column":15,"nodeType":"ConditionalExpression","messageId":"anyAssignment","endLine":62,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":66,"column":24,"nodeType":"Identifier","messageId":"anyAssignment","endLine":66,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":76,"column":100,"nodeType":"Identifier","messageId":"anyAssignment","endLine":76,"endColumn":112},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":79,"column":40,"nodeType":"Identifier","messageId":"anyAssignment","endLine":79,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":85,"column":42,"nodeType":"Identifier","messageId":"anyAssignment","endLine":85,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":90,"column":42,"nodeType":"Identifier","messageId":"anyAssignment","endLine":90,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":94,"column":40,"nodeType":"Identifier","messageId":"anyAssignment","endLine":94,"endColumn":60}],"suppressedMessages":[],"errorCount":31,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Box, Text, VStack, Heading, Tooltip, useColorModeValue, useTheme } from '@chakra-ui/react';\nimport { Deal } from '../../stores/useDealsStore';\nimport { Draggable, DraggableProvided, DraggableStateSnapshot } from '@hello-pangea/dnd'; // Import Draggable & its types\nimport { Link as RouterLink } from 'react-router-dom'; // Import Link\nimport { useThemeStore } from '../../stores/useThemeStore'; // Import theme store\n\ninterface DealCardKanbanProps {\n  deal: Deal;\n  index: number; // Required by react-beautiful-dnd for Draggable\n}\n\nconst DealCardKanban: React.FC<DealCardKanbanProps> = ({ deal, index }) => {\n  const { currentTheme } = useThemeStore();\n  const theme = useTheme();\n\n  // Function to calculate effective probability for display (can be expanded)\n  const getEffectiveProbabilityDisplay = () => {\n    let probability = deal.deal_specific_probability;\n    let source = 'deal';\n    if (probability == null && deal.stage?.deal_probability != null) {\n      probability = deal.stage.deal_probability;\n      source = 'stage';\n    }\n    if (probability == null) return 'N/A';\n    return `${Math.round(probability * 100)}% (${source})`;\n  };\n\n  // Default Theme-aware colors\n  const defaultCardBgBase = useColorModeValue('white', 'gray.800');\n  const defaultCardBgDragging = useColorModeValue('green.50', 'green.800');\n  const defaultCardBorderColor = useColorModeValue('gray.200', 'gray.600');\n  const defaultAmountTextColor = useColorModeValue('gray.700', 'gray.200');\n  const defaultSecondaryTextColor = useColorModeValue('gray.500', 'gray.400');\n  const defaultProbabilityTextColor = useColorModeValue('purple.600', 'purple.300');\n\n  // Warhol-specific dark theme colors\n  const warholCardBgBase = theme.colors.gray[900]; // black\n  const warholCardBgDragging = theme.colors.blue[800]; // dark popBlue\n  const warholCardBorderColor = theme.colors.yellow[500]; // popYellow\n  const warholAmountTextColor = theme.colors.gray[50];\n  const warholSecondaryTextColor = theme.colors.gray[100];\n  const warholProbabilityTextColor = theme.colors.green[500]; // popGreen\n  const warholHeadingColor = theme.colors.gray[50];\n\n  const cardBgBase = currentTheme === 'andyWarhol' ? warholCardBgBase : defaultCardBgBase;\n  const cardBgDragging = currentTheme === 'andyWarhol' ? warholCardBgDragging : defaultCardBgDragging;\n  const cardBorderColor = currentTheme === 'andyWarhol' ? warholCardBorderColor : defaultCardBorderColor;\n  const amountTextColor = currentTheme === 'andyWarhol' ? warholAmountTextColor : defaultAmountTextColor;\n  const secondaryTextColor = currentTheme === 'andyWarhol' ? warholSecondaryTextColor : defaultSecondaryTextColor;\n  const probabilityTextColor = currentTheme === 'andyWarhol' ? warholProbabilityTextColor : defaultProbabilityTextColor;\n  const headingColor = currentTheme === 'andyWarhol' ? warholHeadingColor : useColorModeValue(theme.colors.gray[900], theme.colors.gray[50]);\n\n  return (\n    <Draggable draggableId={deal.id} index={index}>\n      {(provided: DraggableProvided, snapshot: DraggableStateSnapshot) => ( // Add types to provided and snapshot\n        <Box\n          ref={provided.innerRef} // Connect ref\n          {...provided.draggableProps} // Spread draggable props\n          {...provided.dragHandleProps} // Spread drag handle props\n          p={3}\n          bg={snapshot.isDragging ? cardBgDragging : cardBgBase} // Change bg based on dragging state\n          borderRadius=\"md\"\n          boxShadow={snapshot.isDragging ? \"xl\" : \"sm\"} // Enhance shadow when dragging\n          borderWidth=\"1px\"\n          borderColor={cardBorderColor}\n          style={{ \n            ...provided.draggableProps.style, // Important for D&D positioning\n            // userSelect: \"none\", // Prevent text selection during drag (optional)\n          }}\n          mb={3} // Margin between cards\n        >\n          <VStack align=\"stretch\" spacing={1}>\n            <Tooltip label={deal.name} placement=\"top\" openDelay={500}>\n                <RouterLink to={`/deals/${deal.id}`} style={{ textDecoration: 'none', display: 'block', color: 'inherit' }}>\n                    <Heading size=\"xs\" isTruncated _hover={{ textDecoration: 'underline' }} color={headingColor}>{deal.name}</Heading>\n                </RouterLink>\n            </Tooltip>\n            <Text fontSize=\"sm\" color={amountTextColor}>\n              {deal.amount ? \n                new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(deal.amount) \n                : 'No amount'}\n            </Text>\n            {deal.person && (\n              <Text fontSize=\"xs\" color={secondaryTextColor} isTruncated>\n                Person: {deal.person.first_name || ''} {deal.person.last_name || ''}\n              </Text>\n            )}\n            {deal.organization && (\n              <Text fontSize=\"xs\" color={secondaryTextColor} isTruncated>\n                Org: {deal.organization.name}\n              </Text>\n            )}\n            <Text fontSize=\"xs\" color={probabilityTextColor}>\n                Prob: {getEffectiveProbabilityDisplay()}\n            </Text>\n            {/* Add more compact deal info as needed */}\n          </VStack>\n        </Box>\n      )}\n    </Draggable>\n  );\n};\n\nexport default DealCardKanban; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/deals/DealHistoryItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[630,633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[630,633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":28,"column":32,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":28,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":29,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1395,1398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1395,1398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":46,"column":31,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":46,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{ [s: string]: unknown; } | ArrayLike<unknown>`.","line":53,"column":25,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":53,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{ [s: string]: unknown; } | ArrayLike<unknown>`.","line":65,"column":25,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":65,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2163,2166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2163,2166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .oldValue on an `any` value.","line":68,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .newValue on an `any` value.","line":68,"column":101,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":109}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Box, Text, VStack, HStack, Avatar, UnorderedList, ListItem, chakra } from '@chakra-ui/react';\nimport { format, parseISO } from 'date-fns';\nimport { DealHistoryEntryDisplayItem } from './DealHistoryList'; // Import the type\n\ninterface DealHistoryItemProps {\n  entry: DealHistoryEntryDisplayItem;\n}\n\nconst fieldDisplayNames: Record<string, string> = {\n  name: 'Name',\n  stage_id: 'Stage',\n  amount: 'Amount',\n  expected_close_date: 'Expected Close Date',\n  person_id: 'Person',\n  organization_id: 'Organization',\n  deal_specific_probability: 'Deal Specific Probability',\n};\n\nconst formatFieldValue = (field: string, value: any): string => {\n  if (value === null || value === undefined) return 'N/A';\n  switch (field) {\n    case 'amount':\n      return `$${Number(value).toLocaleString()}`;\n    case 'deal_specific_probability':\n      return `${Number(value) * 100}%`;\n    case 'expected_close_date':\n      try {\n        return format(parseISO(value), 'MMM d, yyyy'); // Assuming ISO string\n      } catch (e) {\n        return String(value); // Fallback if not a valid date string\n      }\n    case 'stage_id':\n    case 'person_id':\n    case 'organization_id':\n      return `${value}`; // Display ID, add (ID) for clarity if needed, or resolve name later\n    default:\n      return String(value);\n  }\n};\n\n// Helper function to render changes\nconst renderChanges = (eventType: string, changes: any): JSX.Element | string => {\n  if (eventType === 'DEAL_DELETED') {\n    return 'This deal was deleted.';\n  }\n  if (!changes || Object.keys(changes).length === 0) {\n    return 'No specific changes logged.';\n  }\n\n  if (eventType === 'DEAL_CREATED') {\n    return (\n      <UnorderedList spacing={1} styleType=\"none\" ml={0}>\n        {Object.entries(changes).map(([key, value]) => (\n          <ListItem key={key}>\n            <Text as=\"span\" fontWeight=\"medium\">{fieldDisplayNames[key] || key}:</Text> {formatFieldValue(key, value)}\n          </ListItem>\n        ))}\n      </UnorderedList>\n    );\n  }\n\n  if (eventType === 'DEAL_UPDATED') {\n    return (\n      <UnorderedList spacing={1} styleType=\"none\" ml={0}>\n        {Object.entries(changes).map(([key, value]: [string, any]) => (\n          <ListItem key={key}>\n            <Text as=\"span\" fontWeight=\"medium\">{fieldDisplayNames[key] || key}:</Text> \n            changed from \"{formatFieldValue(key, value.oldValue)}\" to \"{formatFieldValue(key, value.newValue)}\"\n          </ListItem>\n        ))}\n      </UnorderedList>\n    );\n  }\n  // Fallback for other event types or if structure is unexpected\n  return <chakra.pre fontSize=\"xs\" fontFamily=\"mono\">{JSON.stringify(changes, null, 2)}</chakra.pre>;\n};\n\nconst DealHistoryItem: React.FC<DealHistoryItemProps> = ({ entry }) => {\n  const userName = entry.user?.display_name || 'System Action';\n  // Placeholder for avatar, replace with actual avatar URL if available\n  const userAvatarSrc = entry.user?.display_name ? `https://ui-avatars.com/api/?name=${encodeURIComponent(entry.user.display_name)}&background=random&color=fff` : undefined;\n\n  let eventDescription = 'made changes to this deal.';\n  if (entry.eventType === 'DEAL_CREATED') eventDescription = 'created this deal.';\n  if (entry.eventType === 'DEAL_UPDATED') eventDescription = 'updated this deal.';\n  if (entry.eventType === 'DEAL_DELETED') eventDescription = 'deleted this deal.';\n\n  return (\n    <Box \n      borderWidth=\"1px\" \n      borderRadius=\"md\" \n      p={4} \n      bg={{ base: 'white', _dark: 'gray.700' }} \n      borderColor={{ base: 'gray.200', _dark: 'gray.600' }} \n      shadow=\"sm\"\n    >\n      <HStack spacing={3} align=\"start\">\n        <Avatar size=\"sm\" name={userName} src={userAvatarSrc} mt={1} />\n        <VStack align=\"start\" spacing={1} flex={1}>\n          <HStack justifyContent=\"space-between\" w=\"full\">\n            <Text fontWeight=\"bold\" fontSize=\"sm\">{userName}</Text>\n            <Text fontSize=\"xs\" color={{ base: 'gray.500', _dark: 'gray.400' }}>\n              {format(parseISO(entry.createdAt), 'MMM d, yyyy, h:mm a')} \n            </Text>\n          </HStack>\n          <Text fontSize=\"sm\" color={{ base: 'gray.700', _dark: 'gray.200' }}>\n            {eventDescription}\n          </Text>\n          {entry.changes && (\n            <Box pt={1} fontSize=\"sm\">\n              {renderChanges(entry.eventType, entry.changes)}\n            </Box>\n          )}\n        </VStack>\n      </HStack>\n    </Box>\n  );\n};\n\nexport default DealHistoryItem; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/deals/DealHistoryList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/deals/DealsKanbanView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Heading' is defined but never used.","line":2,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Droppable' is defined but never used.","line":6,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Draggable' is defined but never used.","line":6,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":29,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":29,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pink on an `any` value.","line":29,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":30,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gray on an `any` value.","line":30,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":32,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":32,"endColumn":126},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":33,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":33,"endColumn":126},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":37,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":37,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1696,1696],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1696,1696],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":53,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":53,"endColumn":47,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2978,2978],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2978,2978],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6035,6038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6035,6038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":112,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":112,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":112,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":35},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":145,"column":34,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":145,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":155,"column":23,"nodeType":"Property","messageId":"anyAssignment","endLine":155,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .black on an `any` value.","line":157,"column":89,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":160,"column":23,"nodeType":"Property","messageId":"anyAssignment","endLine":160,"endColumn":57}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { Box, Heading, Spinner, Alert, AlertIcon, VStack, Text, Flex, useToast, useColorModeValue, useTheme } from '@chakra-ui/react';\nimport { useDealsStore, Deal } from '../../stores/useDealsStore';\nimport { useStagesStore, Stage } from '../../stores/useStagesStore';\nimport PipelineSelectorDropdown from './PipelineSelectorDropdown';\nimport { DragDropContext, Droppable, Draggable, DropResult } from '@hello-pangea/dnd';\nimport StageColumn from './StageColumn';\nimport { useThemeStore } from '../../stores/useThemeStore';\n\nconst DealsKanbanView: React.FC = () => {\n  const {\n    selectedKanbanPipelineId,\n    deals,\n    dealsLoading,\n    dealsError,\n    fetchDeals,\n    updateDeal,\n    hasInitiallyFetchedDeals,\n  } = useDealsStore();\n  const { stages, stagesLoading, stagesError, fetchStages, hasInitiallyFetchedStages } = useStagesStore();\n  const toast = useToast();\n  const { currentTheme } = useThemeStore();\n  const theme = useTheme();\n\n  // Theme-aware scrollbar colors for the main Kanban container\n  const defaultKanbanScrollbarThumbBg = useColorModeValue('gray.300', 'gray.500');\n  const defaultKanbanScrollbarTrackBg = useColorModeValue('gray.100', 'gray.600');\n\n  const warholKanbanScrollbarThumbBg = theme.colors.pink[500];\n  const warholKanbanScrollbarTrackBg = theme.colors.gray[800];\n\n  const kanbanScrollbarThumbBg = currentTheme === 'andyWarhol' ? warholKanbanScrollbarThumbBg : defaultKanbanScrollbarThumbBg;\n  const kanbanScrollbarTrackBg = currentTheme === 'andyWarhol' ? warholKanbanScrollbarTrackBg : defaultKanbanScrollbarTrackBg;\n\n  useEffect(() => {\n    if (!hasInitiallyFetchedDeals && !dealsLoading && !dealsError) {\n      fetchDeals();\n    }\n  }, [hasInitiallyFetchedDeals, dealsLoading, dealsError, fetchDeals]);\n\n  useEffect(() => {\n    console.log(`[DealsKanbanView] STAGE EFFECT CHECK: selectedKanbanPipelineId: ${selectedKanbanPipelineId}, hasInitiallyFetchedStages: ${hasInitiallyFetchedStages}, stagesLoading: ${stagesLoading}, stagesError: ${stagesError}`);\n    if (selectedKanbanPipelineId) {\n      console.log(`[DealsKanbanView] STAGE EFFECT CHECK: Pipeline ID is present.`);\n      \n      // Check if stages for the current selectedKanbanPipelineId are already present in the store\n      const stagesForThisPipelineExist = stages.some(s => s.pipeline_id === selectedKanbanPipelineId);\n\n      // Fetch if not loading, no error, AND (EITHER hasInitiallyFetchedStages is false OR stages for this specific pipeline don't exist yet)\n      // This covers the case where hasInitiallyFetchedStages might be true globally, but the current pipeline's stages were cleared/not loaded.\n      if (!stagesLoading && !stagesError && (!hasInitiallyFetchedStages || !stagesForThisPipelineExist) ) {\n        console.log(`[DealsKanbanView] STAGE EFFECT CHECK: Conditions met (hasInitFetched: ${hasInitiallyFetchedStages}, stagesForThisPipelineExist: ${stagesForThisPipelineExist}). CALLING fetchStages.`);\n        fetchStages(selectedKanbanPipelineId);\n      } else {\n        if (stagesLoading) console.log(`[DealsKanbanView] STAGE EFFECT CHECK: Stages loading IS present. Aborting.`);\n        else if (stagesError) console.log(`[DealsKanbanView] STAGE EFFECT CHECK: Stages error IS present. Aborting.`);\n        else console.log(`[DealsKanbanView] STAGE EFFECT CHECK: Stages already fetched/present for this context (hasInitFetched: ${hasInitiallyFetchedStages}, stagesForThisPipelineExist: ${stagesForThisPipelineExist}). Aborting.`);\n      }\n    } else {\n      console.log(`[DealsKanbanView] STAGE EFFECT CHECK: Pipeline ID is NOT present. Aborting.`);\n    }\n  }, [selectedKanbanPipelineId, fetchStages, stagesLoading, stagesError, hasInitiallyFetchedStages, stages]);\n\n  const currentPipelineStages = selectedKanbanPipelineId\n    ? stages.filter((stage: Stage) => stage.pipeline_id === selectedKanbanPipelineId).sort((a, b) => a.order - b.order)\n    : [];\n\n  console.log(`[DealsKanbanView] RENDER: selectedKanbanPipelineId: ${selectedKanbanPipelineId}, stagesLoading: ${stagesLoading}, stagesError: ${stagesError}, num currentPipelineStages: ${currentPipelineStages.length}, currentPipelineStages:`, currentPipelineStages, \"all stages from store:\", stages);\n\n  const onDragEnd = async (result: DropResult) => {\n    const { source, destination, draggableId } = result;\n\n    if (!destination) return;\n\n    if (source.droppableId === destination.droppableId && source.index === destination.index) return;\n\n    const sourceStageId = source.droppableId;\n    const destinationStageId = destination.droppableId;\n    const dealId = draggableId;\n\n    console.log(`Optimistically moving deal ${dealId} from stage ${sourceStageId} to ${destinationStageId}`);\n\n    try {\n      const dealToUpdate = deals.find(d => d.id === dealId);\n      if (!dealToUpdate) throw new Error('Deal not found for update');\n      if (!dealToUpdate.name) throw new Error('Deal name is missing and is required for update.');\n\n      // Find the destination stage to get its pipeline_id\n      const destinationStage = stages.find(s => s.id === destinationStageId);\n      if (!destinationStage) throw new Error('Destination stage not found');\n      if (!destinationStage.pipeline_id) throw new Error('Destination stage is missing pipeline_id');\n\n      const updateInput = { \n        name: dealToUpdate.name, // Existing name\n        stage_id: destinationStageId, // New stage_id\n        pipeline_id: destinationStage.pipeline_id, // Pipeline_id from the destination stage\n        // If other fields like 'amount' are also non-nullable in GraphQL DealInput,\n        // they need to be included from dealToUpdate as well.\n        // For now, addressing only the reported missing fields.\n      }; \n      \n      const updatedDeal = await updateDeal(dealId, updateInput);\n\n      if (updatedDeal) {\n        toast({ title: 'Deal stage updated', status: 'success', duration: 2000, isClosable: true });\n      } else {\n        throw new Error('Update operation failed to return deal.');\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Error updating deal stage',\n        description: error.message || 'Could not update deal stage.',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n  \n  const dealsByStage = currentPipelineStages.reduce((acc, stage) => {\n    acc[stage.id] = deals.filter(deal => deal.stage_id === stage.id);\n    acc[stage.id].sort((a,b) => a.name.localeCompare(b.name)); \n    return acc;\n  }, {} as Record<string, Deal[]>);\n\n  if (!selectedKanbanPipelineId && !stagesLoading && !dealsLoading) {\n    return (\n      <Box p={5} borderWidth=\"1px\" borderRadius=\"md\" textAlign=\"center\">\n        <PipelineSelectorDropdown />\n        <Text mt={4}>Please select a pipeline to view the Kanban board.</Text>\n      </Box>\n    );\n  }\n  \n  return (\n    <VStack spacing={4} align=\"stretch\">\n      <Box mb={4}>\n        <PipelineSelectorDropdown />\n      </Box>\n\n      {(stagesLoading || dealsLoading) && <Flex justify=\"center\"><Spinner /></Flex>}\n      {stagesError && <Alert status=\"error\"><AlertIcon />Error loading stages: {stagesError}</Alert>}\n      {dealsError && !dealsLoading && <Alert status=\"error\"><AlertIcon />Error loading deals: {dealsError}</Alert>}\n\n      <DragDropContext onDragEnd={onDragEnd}>\n        {!stagesLoading && !stagesError && selectedKanbanPipelineId && (\n          <Box \n              p={2} \n              overflowX=\"auto\"\n              sx={{\n                  '&::-webkit-scrollbar': {\n                      height: '8px',\n                  },\n                  '&::-webkit-scrollbar-thumb': {\n                      background: kanbanScrollbarThumbBg, \n                      borderRadius: '8px',\n                      border: currentTheme === 'andyWarhol' ? `2px solid ${theme.colors.black}` : 'none',\n                  },\n                  '&::-webkit-scrollbar-track': {\n                      background: kanbanScrollbarTrackBg, \n                  },\n              }}\n          >\n              {currentPipelineStages.length === 0 && !stagesLoading && (\n                  <Text textAlign=\"center\" p={4}>This pipeline has no stages.</Text>\n              )}\n              <Flex direction=\"row\" gap={0}>\n                  {currentPipelineStages.map((stage: Stage, index: number) => (\n                    <StageColumn \n                      key={stage.id} \n                      stage={stage} \n                      deals={dealsByStage[stage.id] || []} \n                      index={index}\n                    />\n                  ))}\n              </Flex>\n          </Box>\n        )}\n      </DragDropContext>\n    </VStack>\n  );\n};\n\nexport default DealsKanbanView; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/deals/PipelineSelectorDropdown.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An empty interface declaration allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowInterfaces' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":6,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterface","endLine":6,"endColumn":40,"suggestions":[{"messageId":"replaceEmptyInterface","data":{"replacement":"object"},"fix":{"range":[286,422],"text":"type PipelineSelectorDropdownProps = object"},"desc":"Replace empty interface with `object`."},{"messageId":"replaceEmptyInterface","data":{"replacement":"unknown"},"fix":{"range":[286,422],"text":"type PipelineSelectorDropdownProps = unknown"},"desc":"Replace empty interface with `unknown`."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":17,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":17,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[865,865],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[865,865],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { Select, FormControl, FormLabel, Spinner, Alert, AlertIcon, Box, Text } from '@chakra-ui/react';\nimport { usePipelinesStore, Pipeline } from '../../stores/usePipelinesStore';\nimport { useDealsStore } from '../../stores/useDealsStore';\n\ninterface PipelineSelectorDropdownProps {\n  // Props can be added here if needed in the future, e.g., for styling or specific behavior\n}\n\nconst PipelineSelectorDropdown: React.FC<PipelineSelectorDropdownProps> = () => {\n  const { pipelines, pipelinesLoading, pipelinesError, fetchPipelines } = usePipelinesStore();\n  const { selectedKanbanPipelineId, setSelectedKanbanPipelineId } = useDealsStore();\n\n  useEffect(() => {\n    // Fetch pipelines if not already loaded or if there was an error previously\n    if ((!pipelines || pipelines.length === 0) && !pipelinesLoading) {\n      fetchPipelines();\n    }\n  }, [fetchPipelines, pipelines, pipelinesLoading]);\n\n  useEffect(() => {\n    // If no pipeline is selected and pipelines are loaded, select the first one by default\n    if (!selectedKanbanPipelineId && pipelines && pipelines.length > 0) {\n      setSelectedKanbanPipelineId(pipelines[0].id);\n    }\n  }, [selectedKanbanPipelineId, pipelines, setSelectedKanbanPipelineId]);\n\n  const handlePipelineChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const pipelineId = event.target.value;\n    setSelectedKanbanPipelineId(pipelineId || null); // Set to null if \"Select a pipeline\" is chosen\n  };\n\n  if (pipelinesLoading && (!pipelines || pipelines.length === 0)) {\n    return (\n      <Box display=\"flex\" alignItems=\"center\">\n        <Spinner size=\"sm\" mr={2} />\n        <Text fontSize=\"sm\">Loading pipelines...</Text>\n      </Box>\n    );\n  }\n\n  if (pipelinesError) {\n    return (\n      <Alert status=\"error\" variant=\"subtle\" borderRadius=\"md\">\n        <AlertIcon />\n        <Text fontSize=\"sm\"isTruncated>Error loading pipelines: {pipelinesError}</Text>\n      </Alert>\n    );\n  }\n\n  if (!pipelines || pipelines.length === 0) {\n    return <Text fontSize=\"sm\" color=\"gray.500\">No pipelines available.</Text>;\n  }\n\n  return (\n    <FormControl id=\"pipeline-selector\">\n      <FormLabel srOnly>Select Pipeline</FormLabel> {/* Screen reader only label */}\n      <Select\n        placeholder=\"Select a pipeline\"\n        value={selectedKanbanPipelineId || ''}\n        onChange={handlePipelineChange}\n        isDisabled={pipelinesLoading || !!pipelinesError}\n        size=\"sm\"\n        maxWidth=\"300px\" // Example styling, adjust as needed\n      >\n        {pipelines.map((pipeline: Pipeline) => (\n          <option key={pipeline.id} value={pipeline.id}>\n            {pipeline.name}\n          </option>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default PipelineSelectorDropdown; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/deals/StageColumn.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":66,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":26,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":26,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pink on an `any` value.","line":26,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":27,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":27,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gray on an `any` value.","line":27,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":28,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":28,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gray on an `any` value.","line":28,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":28,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":29,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":29,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gray on an `any` value.","line":29,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":30,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gray on an `any` value.","line":30,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":32,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":32,"endColumn":108},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":33,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":33,"endColumn":108},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":34,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":34,"endColumn":120},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":35,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":35,"endColumn":96},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":36,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":36,"endColumn":99},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":38,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":41,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gray on an `any` value.","line":39,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .yellow on an `any` value.","line":40,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gray on an `any` value.","line":40,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":81},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":44,"column":5,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":44,"endColumn":73,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[2558,2626],"text":"// @ts-expect-error TS2786: 'Droppable' cannot be used as a JSX component."},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":47,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":47,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":56,"column":17,"nodeType":"Identifier","messageId":"anyAssignment","endLine":56,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":68,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":68,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .black on an `any` value.","line":70,"column":87,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":92},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":73,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":73,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":84,"column":19,"nodeType":"Identifier","messageId":"anyAssignment","endLine":84,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":86,"column":22,"nodeType":"Identifier","messageId":"anyAssignment","endLine":86,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":87,"column":28,"nodeType":"ConditionalExpression","messageId":"anyAssignment","endLine":87,"endColumn":128},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .yellow on an `any` value.","line":87,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":79},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useColorModeValue\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":87,"column":87,"nodeType":"Identifier","endLine":87,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":102,"column":46,"nodeType":"Identifier","messageId":"anyAssignment","endLine":102,"endColumn":66}],"suppressedMessages":[],"errorCount":32,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Box, Heading, Text, VStack, useColorModeValue, useTheme } from '@chakra-ui/react';\nimport { Stage } from '../../stores/useStagesStore'; // Assuming Stage type is exported from useStagesStore\nimport { Deal } from '../../stores/useDealsStore';    // Assuming Deal type is exported from useDealsStore\nimport { Droppable, DroppableProvided, DroppableStateSnapshot } from '@hello-pangea/dnd'; // Import Droppable & its types\nimport DealCardKanban from './DealCardKanban'; // Import the new DealCardKanban component\nimport { useThemeStore } from '../../stores/useThemeStore'; // Import theme store\n\ninterface StageColumnProps {\n  stage: Stage;\n  deals: Deal[];\n  index: number; // Added index prop for Droppable keying or other uses\n}\n\nconst StageColumn: React.FC<StageColumnProps> = ({ stage, deals, index }) => {\n  const { currentTheme } = useThemeStore();\n  const theme = useTheme();\n\n  const defaultScrollbarThumbBg = useColorModeValue('gray.300', 'gray.500');\n  const defaultScrollbarTrackBg = useColorModeValue('gray.100', 'gray.600');\n  const defaultPlaceholderTextColor = useColorModeValue('gray.400', 'gray.500');\n  const defaultColumnBgBase = useColorModeValue('gray.100', 'gray.700');\n  const defaultColumnBgHover = useColorModeValue('blue.50', 'blue.800');\n\n  // Warhol-specific dark theme colors\n  const warholScrollbarThumbBg = theme.colors.pink[500]; // popPink.500\n  const warholScrollbarTrackBg = theme.colors.gray[800]; // darkGray from Warhol theme\n  const warholPlaceholderTextColor = theme.colors.gray[200]; // light gray for text\n  const warholColumnBgBase = theme.colors.gray[800]; // darkGray (main card bg for Warhol dark)\n  const warholColumnBgHover = theme.colors.gray[700]; // slightly lighter dark gray\n\n  const scrollbarThumbBg = currentTheme === 'andyWarhol' ? warholScrollbarThumbBg : defaultScrollbarThumbBg;\n  const scrollbarTrackBg = currentTheme === 'andyWarhol' ? warholScrollbarTrackBg : defaultScrollbarTrackBg;\n  const placeholderTextColor = currentTheme === 'andyWarhol' ? warholPlaceholderTextColor : defaultPlaceholderTextColor;\n  const columnBgBase = currentTheme === 'andyWarhol' ? warholColumnBgBase : defaultColumnBgBase;\n  const columnBgHover = currentTheme === 'andyWarhol' ? warholColumnBgHover : defaultColumnBgHover;\n  \n  const columnHeaderText = useColorModeValue(\n    theme.colors.gray[900], // Default light mode: black\n    currentTheme === 'andyWarhol' ? theme.colors.yellow[500] : theme.colors.gray[50] // Warhol dark: popYellow, Default dark: white\n  );\n\n  return (\n    // @ts-ignore TS2786: 'Droppable' cannot be used as a JSX component.\n    <Droppable droppableId={stage.id} type=\"DEAL\">\n      {(provided: DroppableProvided, snapshot: DroppableStateSnapshot) => {\n        const currentColumnBg = snapshot.isDraggingOver ? columnBgHover : columnBgBase;\n        return (\n          <Box\n            {...provided.droppableProps}\n            ref={provided.innerRef}\n            minWidth=\"300px\"\n            maxWidth=\"350px\"\n            p={4}\n            m={2} // Added margin for spacing between columns\n            bg={currentColumnBg} // Applied theme-aware background\n            borderRadius=\"md\"\n            boxShadow=\"sm\"\n            flexShrink={0} // Prevent columns from shrinking too much\n            height=\"fit-content\" // Ensure column height adjusts to content or a max-height\n            maxHeight=\"calc(100vh - 250px)\" // Example max height, adjust as needed\n            overflowY=\"auto\" // Allow vertical scrolling for deals within a column\n            sx={{ // Renamed from css to sx for consistency with Chakra props\n                '&::-webkit-scrollbar': {\n                    width: '8px', // Slightly wider for pop effect\n                },\n                '&::-webkit-scrollbar-thumb': {\n                    background: scrollbarThumbBg, \n                    borderRadius: '8px',\n                    border: currentTheme === 'andyWarhol' ? `2px solid ${theme.colors.black}` : 'none', // Black border for Warhol thumb\n                },\n                '&::-webkit-scrollbar-track': {\n                    background: scrollbarTrackBg, \n                },\n            }}\n          >\n            <Heading \n              size=\"sm\" \n              mb={3} \n              borderBottomWidth=\"1px\" \n              pb={2} \n              position=\"sticky\" \n              top={0} \n              bg={currentColumnBg} \n              zIndex={1}\n              color={columnHeaderText} // Apply dynamic header text color\n              borderColor={currentTheme === 'andyWarhol' ? theme.colors.yellow[500] : useColorModeValue('gray.200', 'gray.600')} // Warhol: Yellow border\n            >\n              {stage.name} ({deals.length})\n            </Heading>\n            <VStack spacing={3} align=\"stretch\" /* minHeight for VStack might not be needed if Box has maxHeight */ >\n              {deals.map((deal, idx) => (\n                <DealCardKanban \n                  key={deal.id} \n                  deal={deal} \n                  index={idx} // Use idx from map for Draggable index\n                />\n              ))}\n              // @ts-ignore TS2322: react-beautiful-dnd placeholder type issue\n              {provided.placeholder}\n              {deals.length === 0 && !snapshot.isDraggingOver && (\n                  <Text fontSize=\"sm\" color={placeholderTextColor} textAlign=\"center\" mt={4} p={2}>\n                      Drag deals here or create new ones.\n                  </Text>\n              )}\n            </VStack>\n          </Box>\n        );\n      }}\n    </Droppable>\n  );\n};\n\nexport default StageColumn; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/layout/ListPageLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spacer' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":9}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Heading,\n  Button,\n  Flex,\n  Spinner,\n  Alert,\n  AlertIcon,\n  VStack,\n  Spacer,\n  HStack,\n  Box,\n} from '@chakra-ui/react';\nimport EmptyState from '../common/EmptyState'; // Assuming EmptyState is in common\n\n// Interface for EmptyState props (adjust if needed based on actual component)\ninterface EmptyStateProps {\n  icon: React.ElementType;\n  title: string;\n  message: string;\n  // Add other props if EmptyState requires them\n}\n\n// Props for the ListPageLayout\ninterface ListPageLayoutProps {\n  title: string;\n  newButtonLabel: string;\n  onNewButtonClick: () => void;\n  isNewButtonDisabled?: boolean;\n  isLoading: boolean;\n  error: string | null;\n  isEmpty: boolean;\n  emptyStateProps: EmptyStateProps;\n  children: React.ReactNode; // Main content (e.g., the table)\n  customControls?: React.ReactNode; // Optional prop for custom controls\n}\n\nconst ListPageLayout: React.FC<ListPageLayoutProps> = ({\n  title,\n  newButtonLabel,\n  onNewButtonClick,\n  isNewButtonDisabled = false,\n  isLoading,\n  error,\n  isEmpty,\n  emptyStateProps,\n  children,\n  customControls,\n}) => {\n  return (\n    <VStack spacing={4} align=\"stretch\">\n      {/* Header Section */}\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb={6}>\n        <Heading as=\"h2\" size=\"lg\">\n          {title}\n        </Heading>\n        <HStack spacing={2}>\n          {customControls && <Box>{customControls}</Box>}\n          <Button \n            colorScheme=\"blue\"\n            onClick={onNewButtonClick}\n            isDisabled={isNewButtonDisabled}\n          >\n            {newButtonLabel}\n          </Button>\n        </HStack>\n      </Flex>\n\n      {/* Conditional Content */}\n      {isLoading && (\n        <Flex justify=\"center\" align=\"center\" minH=\"200px\">\n          <Spinner size=\"xl\" />\n        </Flex>\n      )}\n\n      {!isLoading && error && (\n        <Alert status=\"error\">\n          <AlertIcon />\n          {error}\n        </Alert>\n      )}\n\n      {!isLoading && !error && isEmpty && (\n        <EmptyState \n          icon={emptyStateProps.icon}\n          title={emptyStateProps.title}\n          message={emptyStateProps.message}\n          actionButtonLabel={newButtonLabel}\n          onActionButtonClick={onNewButtonClick}\n          isActionButtonDisabled={isNewButtonDisabled}\n        />\n      )}\n\n      {!isLoading && !error && !isEmpty && (\n        <>{children}</>\n      )}\n    </VStack>\n  );\n};\n\nexport default ListPageLayout; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/layout/Sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChakraLink' is defined but never used.","line":1,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useColorModeValue' is defined but never used.","line":1,"column":105,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":122},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":190,"column":19,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":190,"endColumn":40}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { VStack, Link as ChakraLink, Text, Box, Button, Flex, useStyleConfig, SystemStyleObject, Image, useColorModeValue } from '@chakra-ui/react';\nimport { NavLink as RouterNavLink } from 'react-router-dom';\nimport { useAppStore } from '../../stores/useAppStore';\nimport ThemeSwitcher from '../common/ThemeSwitcher';\nimport { \n  InfoOutlineIcon,     // People (Represents contact info?)\n  // BuildingIcon,      // Organizations (From chakra-icons-lib, need install? Let's use AtSignIcon for now)\n  AtSignIcon,        // Organizations (Placeholder)\n  CheckCircleIcon,   // Deals (Represents closing deal?)\n  CalendarIcon,      // Activities (Represents scheduling?)\n  ArrowRightIcon,    // Pipelines (Represents flow?)\n  // ViewIcon, // Placeholder for Deals\n  // StarIcon, // Placeholder for People\n  // LockIcon, // Placeholder for Organizations\n  // CopyIcon, // Placeholder for Pipelines\n  // TimeIcon, // Placeholder for Activities\n  SettingsIcon, // Used for Profile and Admin items now\n  // RepeatIcon // Example\n} from '@chakra-ui/icons'; // Use appropriate icons\n\n// Comment out direct imports if moving logos to public directory\n// import logoPositiveRoot from '../../assets/logos/logo-positive.svg'; \n// import logoNegativeRoot from '../../assets/logos/logo-negative.svg';\n\n// Use string paths assuming logos are in `frontend/public/assets/logos/`\nconst logoPositive = '/assets/logos/logo-positive.svg';\nconst logoNegative = '/assets/logos/logo-negative.svg';\n\nimport { useThemeStore } from '../../stores/useThemeStore'; // To check current theme for logo\n\nconst NAV_ITEMS = [\n  { path: '/deals', label: 'Deals', icon: <CheckCircleIcon /> },\n  { path: '/people', label: 'People', icon: <InfoOutlineIcon /> },\n  { path: '/organizations', label: 'Organizations', icon: <AtSignIcon /> },\n  { path: '/pipelines', label: 'Pipelines', icon: <ArrowRightIcon /> },\n  { path: '/activities', label: 'Activities', icon: <CalendarIcon /> },\n];\n\n// Added Admin Nav Items\nconst ADMIN_NAV_ITEMS = [\n  { path: '/admin/custom-fields', label: 'Custom Fields', icon: <SettingsIcon /> },\n];\n\n// User specific items (like profile) can be separate or at the end of NAV_ITEMS\nconst USER_NAV_ITEMS = [\n    { path: '/profile', label: 'My Profile', icon: <SettingsIcon /> },\n];\n\nfunction Sidebar() {\n  const handleSignOutAction = useAppStore((state) => state.handleSignOut);\n  const userEmail = useAppStore((state) => state.session?.user?.email);\n  const styles = useStyleConfig(\"Sidebar\", {}) as Record<string, SystemStyleObject>; \n  const currentThemeName = useThemeStore((state) => state.currentTheme);\n\n  const containerStyles = styles?.container || {};\n  const headerTextStyles = styles?.headerText || {};\n  const navLinkStyles = styles?.navLink || {};\n  const activeNavLinkStyles = styles?.activeNavLink || {};\n  const userInfoTextStyles = styles?.userInfoText || {};\n\n  const isDarkTheme = [\n    'dark', \n    'bowie', \n    'industrialMetal', \n    'creativeDockDarkTheme', // Ensure this matches your dark CD theme name if distinct in store\n    'andyWarhol',\n    'daliDark' // Add daliDark to this check if its sidebar is also dark for logo selection\n  ].includes(currentThemeName);\n  \n  const selectedLogo = isDarkTheme ? logoNegative : logoPositive;\n\n  return (\n    <VStack \n      as=\"nav\" \n      spacing={2} \n      align=\"stretch\" \n      w=\"200px\" // Fixed width for now\n      // bg=\"gray.50\" // Removed hardcoded background, will be themed by global body or specific component style\n      p={4}\n      borderRightWidth=\"1px\"\n      // borderColor=\"gray.200\" // Removed, will be themed\n      minH=\"100vh\" // Make sidebar full height\n      className=\"sidebar-container\" // Add a class for potential theme targeting\n      // Apply themed styles to the container safely\n      sx={containerStyles}\n    >\n      {/* Logo Section */}\n      <Box mb={4} sx={headerTextStyles} h={{base: \"30px\"}} display=\"flex\" alignItems=\"center\"> \n        <Image src={selectedLogo} alt=\"Creative Dock Logo\" maxH=\"30px\" />\n      </Box>\n      \n      {NAV_ITEMS.map((item) => (\n        // Use NavLink for active state detection, pass function as children\n        <RouterNavLink key={item.path} to={item.path} end={item.path === '/'}> \n          {({ isActive }) => (\n            // Use Flex for styling, apply styles conditionally, avoid nesting <a>\n            <Flex // CHANGED from ChakraLink\n              as=\"span\" // Render as span or div, not another <a>\n              display=\"flex\"\n              alignItems=\"center\"\n              p=\"8px 12px\"\n              borderRadius=\"md\"\n              // REMOVED direct bg/color props\n              // Rely solely on sx prop to apply the entire style object\n              sx={isActive ? activeNavLinkStyles : navLinkStyles} \n              // Ensure navLinkStyles includes cursor: pointer if not already present\n            >\n              <Box as=\"span\" mr={3}>{item.icon}</Box>\n              {item.label}\n            </Flex> // CHANGED from ChakraLink\n          )}\n        </RouterNavLink>\n      ))}\n\n      {/* Admin Section */}\n      <Box mt={4} pt={2} borderTopWidth=\"1px\" sx={{ borderColor: containerStyles.borderColor === \"transparent\" ? \"gray.200\" : containerStyles.borderColor }}>\n        <Text fontSize=\"xs\" fontWeight=\"semibold\" mb={2} color=\"gray.500\" sx={{ _dark: { color: \"gray.400\"} }}>ADMIN</Text>\n        {ADMIN_NAV_ITEMS.map((item) => (\n            <RouterNavLink key={item.path} to={item.path} end={item.path === '/'}> \n            {({ isActive }) => (\n                <Flex\n                as=\"span\"\n                display=\"flex\"\n                alignItems=\"center\"\n                p=\"8px 12px\"\n                borderRadius=\"md\"\n                sx={isActive ? activeNavLinkStyles : navLinkStyles}\n                >\n                <Box as=\"span\" mr={3}>{item.icon}</Box>\n                {item.label}\n                </Flex>\n            )}\n            </RouterNavLink>\n        ))}\n      </Box>\n\n      {/* User Profile Link - moved here for better separation before user info block */}\n      {USER_NAV_ITEMS.map((item) => (\n        <RouterNavLink key={item.path} to={item.path} end={item.path === '/'}> \n          {({ isActive }) => (\n            <Flex\n              as=\"span\"\n              display=\"flex\"\n              alignItems=\"center\"\n              p=\"8px 12px\"\n              borderRadius=\"md\"\n              sx={isActive ? activeNavLinkStyles : navLinkStyles}\n            >\n              <Box as=\"span\" mr={3}>{item.icon}</Box>\n              {item.label}\n            </Flex>\n          )}\n        </RouterNavLink>\n      ))}\n\n      {/* Conditionally render Dali inspiration image */}\n      {currentThemeName === 'daliDark' && (\n        <Box my={4} px={2} display=\"flex\" justifyContent=\"center\">\n          <Image \n            src=\"/assets/images/dali-inspiration.png\" \n            alt=\"Dali Inspiration\" \n            borderRadius=\"md\" \n            boxShadow=\"lg\" // Add a subtle shadow, can be themed later\n            maxW=\"150px\" // Limit width\n            objectFit=\"contain\"\n          />\n        </Box>\n      )}\n\n      {/* Spacer to push sign out down? Or place it logically */}\n      <Box flexGrow={1}></Box> \n\n      {/* Display Logged In User */}\n      <Box borderTopWidth=\"1px\" sx={{ borderColor: containerStyles.borderColor }} pt={4} mt={4}>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n          <Box>\n            <Text fontSize=\"xs\" sx={userInfoTextStyles}>Signed in as:</Text>\n            <Text fontSize=\"sm\" fontWeight=\"medium\" noOfLines={1} title={userEmail}>\n                {userEmail ?? 'Unknown User'}\n            </Text>\n          </Box>\n          <ThemeSwitcher />\n        </Flex>\n      </Box>\n\n      {/* Sign Out Button */}\n      <Button \n          variant=\"ghost\" // Use ghost to match link hover, but provide button padding/semantics\n          // colorScheme=\"gray\" // Let theme dictate ghost button colors\n          onClick={handleSignOutAction}\n          width=\"100%\" \n          justifyContent=\"flex-start\" // Align text left\n          // mt={4} // Adjust margin as needed, maybe remove if Box provides enough spacing\n        >\n         {/* TODO: Add sign out icon */}\n          Sign Out\n      </Button>\n    </VStack>\n  );\n}\n\nexport default Sidebar; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/pipelines/CreatePipelineModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":75,"column":40,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":75,"endColumn":54}],"suppressedMessages":[{"ruleId":"jsx-a11y/no-autofocus","severity":2,"message":"The autoFocus prop should not be used, as it can reduce usability and accessibility for users.","line":86,"column":17,"nodeType":"JSXAttribute","endLine":86,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  Modal, \n  ModalOverlay, \n  ModalContent, \n  ModalHeader, \n  ModalFooter, \n  ModalBody, \n  ModalCloseButton, \n  Button, \n  FormControl, \n  FormLabel, \n  Input, \n  useToast, \n  VStack \n} from '@chakra-ui/react';\nimport { usePipelinesStore } from '../../stores/usePipelinesStore';\n\ninterface CreatePipelineModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  // Optional: Callback on successful creation\n  onSuccess?: (newPipelineId: string) => void; \n}\n\nconst CreatePipelineModal: React.FC<CreatePipelineModalProps> = ({ isOpen, onClose, onSuccess }) => {\n  const [pipelineName, setPipelineName] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { createPipeline, pipelinesError } = usePipelinesStore();\n  const toast = useToast();\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    if (!pipelineName.trim()) {\n      toast({ title: \"Pipeline name cannot be empty.\", status: 'warning', duration: 3000, isClosable: true });\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const newPipeline = await createPipeline({ name: pipelineName.trim() } as { name: string });\n      if (newPipeline) {\n        toast({ title: \"Pipeline created successfully.\", status: 'success', duration: 3000, isClosable: true });\n        setPipelineName(''); // Reset form\n        onSuccess?.(newPipeline.id);\n        onClose(); // Close modal\n      } else {\n        toast({ title: \"Failed to create pipeline.\", description: pipelinesError || \"Please check console or try again.\", status: 'error', duration: 5000, isClosable: true });\n      }\n    } catch (error: unknown) {\n        // This catch might be redundant if store handles all errors, but keep for safety\n        console.error(\"Error in create pipeline modal submit:\", error);\n        let message = \"Could not create pipeline.\";\n        if (error instanceof Error) {\n            message = error.message;\n        } else if (typeof error === 'string') {\n            message = error;\n        }\n        toast({ title: \"An error occurred.\", description: message, status: 'error', duration: 5000, isClosable: true });\n    } finally {\n        setIsLoading(false);\n    }\n  };\n\n  // Reset name when modal is opened/closed\n  React.useEffect(() => {\n    if (!isOpen) {\n        setPipelineName('');\n        setIsLoading(false);\n    }\n  }, [isOpen]);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent as=\"form\" onSubmit={handleSubmit}>\n        <ModalHeader>Create New Pipeline</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <VStack spacing={4}>\n            <FormControl isRequired>\n              <FormLabel>Pipeline Name</FormLabel>\n              <Input \n                placeholder=\"e.g., Sales Pipeline Q3\"\n                value={pipelineName}\n                onChange={(e) => setPipelineName(e.target.value)}\n                autoFocus // eslint-disable-line jsx-a11y/no-autofocus\n              />\n            </FormControl>\n          </VStack>\n        </ModalBody>\n        <ModalFooter>\n          <Button variant='ghost' mr={3} onClick={onClose} isDisabled={isLoading}>\n            Cancel\n          </Button>\n          <Button type=\"submit\" colorScheme=\"blue\" isLoading={isLoading}>\n            Create Pipeline\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default CreatePipelineModal; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/pipelines/EditPipelineModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":88,"column":40,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":88,"endColumn":54},{"ruleId":"jsx-a11y/no-autofocus","severity":2,"message":"The autoFocus prop should not be used, as it can reduce usability and accessibility for users.","line":105,"column":17,"nodeType":"JSXAttribute","endLine":105,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Modal, \n  ModalOverlay, \n  ModalContent, \n  ModalHeader, \n  ModalFooter, \n  ModalBody, \n  ModalCloseButton, \n  Button, \n  FormControl, \n  FormLabel, \n  Input, \n  useToast, \n  VStack,\n  Alert,\n  AlertIcon\n} from '@chakra-ui/react';\nimport { usePipelinesStore, Pipeline, PipelineInput } from '../../stores/usePipelinesStore';\n\ninterface EditPipelineModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  pipeline: Pipeline | null;\n  onSuccess?: (updatedPipelineId: string) => void; \n}\n\nconst EditPipelineModal: React.FC<EditPipelineModalProps> = ({ isOpen, onClose, pipeline, onSuccess }) => {\n  const [pipelineName, setPipelineName] = useState('');\n  const {\n    updatePipeline,\n    pipelinesLoading,\n    pipelinesError\n  } = usePipelinesStore();\n  const toast = useToast();\n\n  useEffect(() => {\n    if (pipeline) {\n      setPipelineName(pipeline.name);\n    } else {\n      setPipelineName('');\n    }\n  }, [pipeline]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setPipelineName('');\n    }\n  }, [isOpen]);\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    if (!pipeline) {\n        toast({ title: \"No pipeline selected for editing.\", status: 'error', duration: 3000, isClosable: true });\n        return;\n    }\n    if (!pipelineName.trim()) {\n      toast({ title: \"Pipeline name cannot be empty.\", status: 'warning', duration: 3000, isClosable: true });\n      return;\n    }\n    if (pipelineName.trim() === pipeline.name) {\n         toast({ title: \"No changes detected.\", status: 'info', duration: 2000, isClosable: true });\n      onClose();\n         return;\n    }\n    \n    const pipelineInput: PipelineInput = { name: pipelineName.trim() };\n      const updatedPipeline = await updatePipeline(pipeline.id, pipelineInput);\n    \n      if (updatedPipeline) {\n        toast({ title: \"Pipeline updated successfully.\", status: 'success', duration: 3000, isClosable: true });\n        onSuccess?.(updatedPipeline.id);\n      onClose();\n      } else {\n      toast({ \n        title: \"Failed to update pipeline.\", \n        description: pipelinesError || \"An unexpected error occurred. Please try again.\", \n        status: 'error', \n        duration: 5000, \n        isClosable: true \n      });\n    }\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent as=\"form\" onSubmit={handleSubmit}>\n        <ModalHeader>Edit Pipeline</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <VStack spacing={4}>\n            {pipelinesError && (\n              <Alert status=\"error\" mb={3}>\n                <AlertIcon />\n                {pipelinesError}\n              </Alert>\n            )}\n            <FormControl isRequired>\n              <FormLabel>Pipeline Name</FormLabel>\n              <Input \n                placeholder=\"e.g., Sales Pipeline Q3\"\n                value={pipelineName}\n                onChange={(e) => setPipelineName(e.target.value)}\n                autoFocus\n              />\n            </FormControl>\n          </VStack>\n        </ModalBody>\n        <ModalFooter>\n          <Button variant='ghost' mr={3} onClick={onClose} isDisabled={pipelinesLoading}>\n            Cancel\n          </Button>\n          <Button type=\"submit\" colorScheme=\"blue\" isLoading={pipelinesLoading}>\n            Save Changes\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default EditPipelineModal; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/pricing/AdditionalCostItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/pricing/AdditionalCostList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Heading' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  VStack,\n  FormControl,\n  FormLabel,\n  Input,\n  NumberInput,\n  NumberInputField,\n  Heading,\n  HStack,\n  Text\n} from '@chakra-ui/react';\nimport AdditionalCostItem from './AdditionalCostItem.tsx';\nimport { usePriceQuoteStore, AdditionalCostInputData } from '../../stores/usePriceQuoteStore';\n\n// Interface for items in the list, matching store structure\n// type AdditionalCost = AdditionalCostInputData; // Can use type alias if preferred\n\nconst AdditionalCostList: React.FC = () => {\n  const { currentQuoteInputs, updateCurrentQuoteInputValue } = usePriceQuoteStore();\n  const additionalCosts = currentQuoteInputs.additional_costs || [];\n  // const [additionalCosts, setAdditionalCosts] = useState<AdditionalCost[]>([]); // Local state for PoC\n\n  const [newCostDesc, setNewCostDesc] = useState('');\n  const [newCostAmount, setNewCostAmount] = useState<number | string>('');\n  const newCostDescId = React.useId();\n  const newCostAmountId = React.useId();\n\n  const handleAddCost = () => {\n    if (newCostDesc && typeof newCostAmount === 'number' && newCostAmount > 0) {\n      const newCost: AdditionalCostInputData = {\n        description: newCostDesc,\n        amount: newCostAmount,\n      };\n      const updatedCosts = [...additionalCosts, newCost];\n      // setAdditionalCosts(updatedCosts);\n      updateCurrentQuoteInputValue('additional_costs', updatedCosts);\n      setNewCostDesc('');\n      setNewCostAmount('');\n    }\n  };\n\n  const handleRemoveCost = (indexToRemove: number) => {\n    const updatedCosts = additionalCosts.filter((_, index) => index !== indexToRemove);\n    // setAdditionalCosts(updatedCosts);\n    updateCurrentQuoteInputValue('additional_costs', updatedCosts);\n  };\n\n  return (\n    <Box>\n      {/* <Heading size=\"sm\" mb={3}>Additional Costs</Heading> */}\n      {/* Heading moved to PriceQuoteForm */}\n      <VStack spacing={3} align=\"stretch\" mb={4}>\n        {additionalCosts.length === 0 && <Text fontSize=\"sm\" color=\"gray.600\">No additional costs added.</Text>}\n        {additionalCosts.map((cost, index) => (\n          <AdditionalCostItem \n            key={index} // TODO: Use a more stable key if items get temp IDs client-side before save\n            item={cost} \n            onRemove={() => handleRemoveCost(index)} \n          />\n        ))}\n      </VStack>\n\n      <HStack spacing={2} mb={2}>\n        <FormControl flex={3}>\n          <FormLabel htmlFor={newCostDescId} fontSize=\"sm\" mb={1}>Description</FormLabel>\n          <Input \n            id={newCostDescId}\n            placeholder=\"e.g., Travel Expenses\"\n            value={newCostDesc}\n            onChange={(e) => setNewCostDesc(e.target.value)}\n            size=\"sm\"\n          />\n        </FormControl>\n        <FormControl flex={1}>\n          <FormLabel htmlFor={newCostAmountId} fontSize=\"sm\" mb={1}>Amount</FormLabel>\n          <NumberInput \n            id={newCostAmountId}\n            value={typeof newCostAmount === 'number' ? newCostAmount : ''} \n            onChange={(valueString) => setNewCostAmount(valueString ? parseFloat(valueString) : '')} \n            min={0}\n            precision={2}\n            size=\"sm\"\n          >\n            <NumberInputField placeholder=\"e.g., 100.00\" />\n          </NumberInput>\n        </FormControl>\n      </HStack>\n      <Button onClick={handleAddCost} size=\"sm\" colorScheme=\"teal\" variant=\"outline\">\n        + Add Cost\n      </Button>\n    </Box>\n  );\n};\n\nexport default AdditionalCostList; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/pricing/DealPricingSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SimpleGrid' is defined but never used.","line":2,"column":73,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":83},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isSubmitting' is assigned a value but never used.","line":22,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":31,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":31,"endColumn":39,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1098,1098],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1098,1098],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":114,"column":24,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":114,"endColumn":43}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Box, Heading, Button, VStack, Spinner, Alert, AlertIcon, Text, SimpleGrid } from '@chakra-ui/react';\nimport { AddIcon } from '@chakra-ui/icons';\nimport PriceQuoteListItem from './PriceQuoteListItem';\nimport DealPricingTabContent from './DealPricingTabContent'; // To show form for selected/new quote\nimport { usePriceQuoteStore } from '../../stores/usePriceQuoteStore';\n\ninterface DealPricingSectionProps {\n  dealId: string;\n}\n\nconst DealPricingSection: React.FC<DealPricingSectionProps> = ({ dealId }) => {\n  const {\n    quotesForDealList,\n    fetchPriceQuotesForDeal,\n    selectQuoteToEdit,\n    resetCurrentQuoteForm,\n    selectedQuoteId,\n    deletePriceQuote, // Added for delete functionality\n    isLoadingList,\n    errorList,\n    isSubmitting, // For delete operation loading state\n  } = usePriceQuoteStore();\n\n  // State to control visibility of the form (DealPricingTabContent)\n  // True if creating new or editing existing\n  const [isFormVisible, setIsFormVisible] = useState(false);\n\n  useEffect(() => {\n    if (dealId) {\n      fetchPriceQuotesForDeal(dealId);\n    }\n  }, [dealId, fetchPriceQuotesForDeal]);\n\n  useEffect(() => {\n    // If a quote is selected in the store, ensure the form becomes visible\n    // If no quote is selected (e.g., after creating one and resetting, or deselecting),\n    // the form visibility might be controlled differently or reset here.\n    if (selectedQuoteId) {\n      setIsFormVisible(true);\n    } else {\n        // If selectedQuoteId is null (e.g. after creating one and resetting form),\n        // we might want to hide the form unless explicitly creating new again.\n        // For now, let's keep it simple: if no selectedQuoteId, form is not visible by default from selection.\n        // isFormVisible state will primarily be driven by \"Create New\" or item selection.\n    }\n  }, [selectedQuoteId]);\n\n  const handleCreateNewQuote = () => {\n    resetCurrentQuoteForm(); // dealId is not part of PriceQuoteInputData, will be passed to create action separately\n    selectQuoteToEdit(null); // Explicitly deselect any existing quote\n    setIsFormVisible(true);\n  };\n\n  const handleSelectQuote = (quoteId: string) => {\n    selectQuoteToEdit(quoteId); // This will fetch and set the quote in the store\n    // The useEffect listening to selectedQuoteId will make the form visible\n  };\n  \n  const handleDeleteQuote = async (quoteId: string) => {\n    if (window.confirm('Are you sure you want to delete this quote?')) {\n      await deletePriceQuote(quoteId, dealId); \n      // If the deleted quote was the one selected for editing, reset the view\n      if (selectedQuoteId === quoteId) {\n        setIsFormVisible(false); // Hide form as the selected item is gone\n      }\n    }\n  };\n\n  const handleCloseForm = () => {\n    setIsFormVisible(false);\n    selectQuoteToEdit(null); // Deselect quote in store\n    resetCurrentQuoteForm(); // Clear any form inputs\n  }\n\n  if (isLoadingList) {\n    return <Spinner />; \n  }\n\n  if (errorList) {\n    return <Alert status=\"error\"><AlertIcon />{errorList}</Alert>;\n  }\n\n  return (\n    <Box>\n      <Heading size=\"md\" mb={4}>Price Quotes</Heading>\n      \n      {!isFormVisible && (\n        <Button onClick={handleCreateNewQuote} leftIcon={<AddIcon />} colorScheme=\"teal\" mb={4}>\n          Create New Quote\n        </Button>\n      )}\n\n      {isFormVisible && (\n        <Box mb={6}>\n            <DealPricingTabContent dealId={dealId} onFormClose={handleCloseForm} />\n            <Button onClick={handleCloseForm} variant=\"outline\" size=\"sm\" mt={4}>\n                Close Form / Cancel\n            </Button>\n        </Box>\n      )}\n\n      {!isFormVisible && quotesForDealList.length === 0 && (\n        <Text>No price quotes created for this deal yet.</Text>\n      )}\n\n      {!isFormVisible && quotesForDealList.length > 0 && (\n        <VStack spacing={3} align=\"stretch\">\n          {quotesForDealList.map(quote => (\n            <PriceQuoteListItem \n              key={quote.id} \n              quote={quote} \n              onSelect={handleSelectQuote} \n              onDelete={handleDeleteQuote} // Pass delete handler\n            />\n          ))}\n        </VStack>\n      )}\n    </Box>\n  );\n};\n\nexport default DealPricingSection; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/pricing/DealPricingTabContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/pricing/InvoiceScheduleDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VStack' is defined but never used.","line":2,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Box, Heading, Text, VStack, Table, Thead, Tbody, Tr, Th, Td, TableContainer } from '@chakra-ui/react';\nimport { usePriceQuoteStore } from '../../stores/usePriceQuoteStore';\n\n// Example type - replace with generated GraphQL types\n// interface InvoiceEntry { // This can be removed if PriceQuoteGQL from store provides typed invoice_schedule_entries\n//   id?: string;\n//   entry_type: string;\n//   due_date: string; // or Date\n//   amount_due: number;\n//   description?: string;\n// }\n\nconst InvoiceScheduleDisplay: React.FC = () => {\n  const { currentQuotePreview } = usePriceQuoteStore();\n  const invoiceSchedule = currentQuotePreview?.invoice_schedule_entries || []; // Assuming structure\n  // const invoiceSchedule: InvoiceEntry[] = []; // Placeholder\n\n  if (!currentQuotePreview) {\n    return <Text>No quote preview available to display schedule.</Text>;\n  }\n\n  if (!invoiceSchedule || invoiceSchedule.length === 0) {\n    return (\n        <Box p={4} borderWidth=\"1px\" borderRadius=\"md\" mt={4}>\n            <Heading size=\"md\" mb={3}>Generated Invoice Schedule</Heading>\n            <Text>Invoice schedule has not been generated or is empty.</Text>\n        </Box>\n    );\n  }\n\n  return (\n    <Box p={4} borderWidth=\"1px\" borderRadius=\"md\" mt={4}>\n      <Heading size=\"md\" mb={3}>Generated Invoice Schedule</Heading>\n      <TableContainer>\n        <Table variant=\"simple\" size=\"sm\">\n          <Thead>\n            <Tr>\n              <Th>Type</Th>\n              <Th>Due Date</Th>\n              <Th isNumeric>Amount Due</Th>\n              <Th>Description</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {invoiceSchedule.map((entry, index) => (\n              <Tr key={entry.id || index}>\n                <Td>{entry.entry_type}</Td>\n                <Td>{new Date(entry.due_date).toLocaleDateString()}</Td>\n                <Td isNumeric>{entry.amount_due.toFixed(2)}</Td>\n                <Td>{entry.description || '-'}</Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n};\n\nexport default InvoiceScheduleDisplay; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/pricing/PriceQuoteForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":26},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":62,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":62,"endColumn":49,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2974,2974],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2974,2974],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":71,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":71,"endColumn":43}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { Box, Button, FormControl, FormLabel, Input, VStack, Heading, Text, NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper, useToast } from '@chakra-ui/react';\nimport { usePriceQuoteStore, PriceQuoteInputData } from '../../stores/usePriceQuoteStore';\nimport AdditionalCostList from './AdditionalCostList'; // To be integrated later\n\ninterface PriceQuoteFormProps {\n  dealId: string;\n  onFormClose?: () => void;\n}\n\nconst PriceQuoteForm: React.FC<PriceQuoteFormProps> = ({ dealId, onFormClose }) => {\n  const { \n    currentQuoteInputs, \n    updateCurrentQuoteInputValue, \n    getQuotePreview,\n    createPriceQuote,\n    updatePriceQuote,\n    selectedQuoteId,\n    isSubmitting,\n    isLoadingDetails, // Used for preview button loading state\n  } = usePriceQuoteStore();\n  const toast = useToast();\n\n  // If a quote is selected for editing, its data is already in currentQuoteInputs via selectQuoteToEdit or fetchPriceQuoteById.\n  // If creating new, currentQuoteInputs is reset by resetCurrentQuoteForm.\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    if (selectedQuoteId) {\n      await updatePriceQuote(selectedQuoteId, currentQuoteInputs);\n      toast({ title: \"Quote updated\", status: \"success\", duration: 3000, isClosable: true });\n      onFormClose?.();\n    } else {\n      const newQuote = await createPriceQuote(dealId, currentQuoteInputs);\n      if (newQuote) {\n        toast({ title: \"Quote created successfully\", description: `Quote '${newQuote.name || 'Unnamed'}' has been saved.`, status: \"success\", duration: 3000, isClosable: true });\n        onFormClose?.();\n      } else {\n        toast({ title: \"Error creating quote\", description: \"Could not save the quote. Please try again.\", status: \"error\", duration: 3000, isClosable: true });\n      }\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    // Chakra's NumberInput might not have a 'type' field directly on event.target for parsing\n    // We will handle numeric conversion in handleNumberInputChange\n    updateCurrentQuoteInputValue(name as keyof PriceQuoteInputData, value);\n  };\n\n  const handleNumberInputChange = (name: keyof PriceQuoteInputData, valueAsString: string, valueAsNumber: number) => {\n    // If valueAsString is empty or just a sign, it might be an intermediate state of typing.\n    // Rely on valueAsNumber for the actual numeric value, or handle empty string if it should clear the field.\n    if (valueAsString === '' || valueAsString === '-' || valueAsString === '+') {\n        updateCurrentQuoteInputValue(name, null); // Or undefined, or keep as string if backend/validation handles\n    } else {\n        updateCurrentQuoteInputValue(name, isNaN(valueAsNumber) ? null : valueAsNumber);\n    }\n  };\n  \n  const handlePreview = () => {\n    getQuotePreview(currentQuoteInputs, dealId); // Pass dealId context for preview\n  }\n\n  // Helper to get number value or empty string for NumberInput\n  const getNumericValue = (fieldValue: number | null | undefined): string | number => {\n    return fieldValue == null ? '' : fieldValue;\n  };\n\n  return (\n    <Box as=\"form\" onSubmit={handleSubmit} p={4} borderWidth=\"1px\" borderRadius=\"md\">\n      <VStack spacing={4} align=\"stretch\">\n        <Heading size=\"md\">{selectedQuoteId ? `Edit Quote (ID: ${selectedQuoteId.substring(0,8)}...)` : 'Create New Price Quote'}</Heading>\n        \n        <FormControl id=\"name\">\n          <FormLabel>Quote Name</FormLabel>\n          <Input \n            name=\"name\" \n            value={currentQuoteInputs.name || ''} \n            onChange={handleInputChange} \n            placeholder=\"e.g., Initial Proposal, Option B\"\n          />\n        </FormControl>\n\n        <FormControl id=\"base_minimum_price_mp\">\n          <FormLabel>Base Minimum Price (MP)</FormLabel>\n          <NumberInput \n            name=\"base_minimum_price_mp\"\n            value={getNumericValue(currentQuoteInputs.base_minimum_price_mp)}\n            onChange={(valueString, valueNumber) => handleNumberInputChange('base_minimum_price_mp', valueString, valueNumber)}\n            precision={2} min={0}\n          >\n            <NumberInputField placeholder=\"e.g., 5000.00\" />\n            <NumberInputStepper>\n              <NumberIncrementStepper />\n              <NumberDecrementStepper />\n            </NumberInputStepper>\n          </NumberInput>\n        </FormControl>\n\n        <FormControl id=\"target_markup_percentage\">\n          <FormLabel>Target Markup Percentage (%)</FormLabel>\n          <NumberInput \n            name=\"target_markup_percentage\"\n            value={getNumericValue(currentQuoteInputs.target_markup_percentage)}\n            onChange={(valueString, valueNumber) => handleNumberInputChange('target_markup_percentage', valueString, valueNumber)}\n            precision={2} min={0}\n          >\n            <NumberInputField placeholder=\"e.g., 20\"/>\n            <NumberInputStepper>\n              <NumberIncrementStepper />\n              <NumberDecrementStepper />\n            </NumberInputStepper>\n          </NumberInput>\n        </FormControl>\n\n        <FormControl id=\"final_offer_price_fop\">\n          <FormLabel>Final Offer Price (FOP)</FormLabel>\n          <NumberInput \n            name=\"final_offer_price_fop\"\n            value={getNumericValue(currentQuoteInputs.final_offer_price_fop)}\n            onChange={(valueString, valueNumber) => handleNumberInputChange('final_offer_price_fop', valueString, valueNumber)}\n            precision={2} min={0}\n          >\n            <NumberInputField placeholder=\"e.g., 6000.00\" />\n            <NumberInputStepper>\n              <NumberIncrementStepper />\n              <NumberDecrementStepper />\n            </NumberInputStepper>\n          </NumberInput>\n        </FormControl>\n\n        <FormControl id=\"overall_discount_percentage\">\n          <FormLabel>Overall Discount Percentage (%)</FormLabel>\n          <NumberInput \n            name=\"overall_discount_percentage\"\n            value={getNumericValue(currentQuoteInputs.overall_discount_percentage)}\n            onChange={(valueString, valueNumber) => handleNumberInputChange('overall_discount_percentage', valueString, valueNumber)}\n            precision={2} min={0} max={100}\n          >\n            <NumberInputField placeholder=\"e.g., 5\"/>\n            <NumberInputStepper>\n              <NumberIncrementStepper />\n              <NumberDecrementStepper />\n            </NumberInputStepper>\n          </NumberInput>\n        </FormControl>\n        \n        <Heading size=\"sm\" mt={4}>Invoice Schedule Parameters</Heading>\n\n        <FormControl id=\"upfront_payment_percentage\">\n          <FormLabel>Upfront Payment Percentage (%)</FormLabel>\n          <NumberInput \n            name=\"upfront_payment_percentage\"\n            value={getNumericValue(currentQuoteInputs.upfront_payment_percentage)}\n            onChange={(valueString, valueNumber) => handleNumberInputChange('upfront_payment_percentage', valueString, valueNumber)}\n            precision={2} min={0} max={100}\n          >\n            <NumberInputField placeholder=\"e.g., 50\" />\n            <NumberInputStepper>\n              <NumberIncrementStepper />\n              <NumberDecrementStepper />\n            </NumberInputStepper>\n          </NumberInput>\n        </FormControl>\n\n        <FormControl id=\"upfront_payment_due_days\">\n          <FormLabel>Upfront Payment Due (Days from agreement)</FormLabel>\n          <NumberInput \n            name=\"upfront_payment_due_days\"\n            value={getNumericValue(currentQuoteInputs.upfront_payment_due_days)}\n            onChange={(valueString, valueNumber) => handleNumberInputChange('upfront_payment_due_days', valueString, valueNumber)}\n            min={0} step={1}\n          >\n            <NumberInputField placeholder=\"e.g., 7\" />\n            <NumberInputStepper>\n              <NumberIncrementStepper />\n              <NumberDecrementStepper />\n            </NumberInputStepper>\n          </NumberInput>\n        </FormControl>\n\n        <FormControl id=\"subsequent_installments_count\">\n          <FormLabel>Number of Subsequent Installments</FormLabel>\n          <NumberInput \n            name=\"subsequent_installments_count\"\n            value={getNumericValue(currentQuoteInputs.subsequent_installments_count)}\n            onChange={(valueString, valueNumber) => handleNumberInputChange('subsequent_installments_count', valueString, valueNumber)}\n            min={0} step={1}\n          >\n            <NumberInputField placeholder=\"e.g., 2\" />\n            <NumberInputStepper>\n              <NumberIncrementStepper />\n              <NumberDecrementStepper />\n            </NumberInputStepper>\n          </NumberInput>\n        </FormControl>\n\n        <FormControl id=\"subsequent_installments_interval_days\">\n          <FormLabel>Interval Between Subsequent Installments (Days)</FormLabel>\n          <NumberInput \n            name=\"subsequent_installments_interval_days\"\n            value={getNumericValue(currentQuoteInputs.subsequent_installments_interval_days)}\n            onChange={(valueString, valueNumber) => handleNumberInputChange('subsequent_installments_interval_days', valueString, valueNumber)}\n             min={0} step={1} // Or min={1} if interval must be at least 1 day\n          >\n            <NumberInputField placeholder=\"e.g., 30\" />\n            <NumberInputStepper>\n              <NumberIncrementStepper />\n              <NumberDecrementStepper />\n            </NumberInputStepper>\n          </NumberInput>\n        </FormControl>\n        \n        <Text mt={4} fontWeight=\"semibold\">Additional Costs</Text>\n        <AdditionalCostList />\n        {/* <Text color=\"gray.500\" fontSize=\"sm\">Additional Costs management will be here.</Text> */}\n\n        <Button \n          type=\"submit\" \n          colorScheme=\"blue\" \n          isLoading={isSubmitting}\n          mt={4}\n        >\n          {selectedQuoteId ? 'Update Quote' : 'Save Quote'}\n        </Button>\n        <Button \n          variant=\"outline\"\n          onClick={handlePreview}\n          isLoading={isLoadingDetails} \n        >\n          Calculate Preview\n        </Button>\n      </VStack>\n    </Box>\n  );\n};\n\nexport default PriceQuoteForm; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/pricing/PriceQuoteListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/pricing/PriceQuoteSummaryDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/profile/ProfileEditForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3680,3683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3680,3683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":126,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":126,"endColumn":53}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { Box, VStack, FormControl, FormLabel, Input, Button, useToast, FormErrorMessage } from '@chakra-ui/react';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport { gql } from 'graphql-request';\nimport { gqlClient } from '../../lib/graphqlClient';\nimport { isGraphQLErrorWithMessage } from '../../lib/graphqlUtils';\nimport type { User, UpdateUserProfileInput } from '../../generated/graphql/graphql';\n\ninterface ProfileEditFormProps {\n  user: User;\n  onUpdateSuccess: (updatedUser: User) => void;\n  onCancel?: () => void;\n}\n\ninterface FormValues {\n  display_name: string;\n  avatar_url: string;\n}\n\n// Define the mutation string directly for graphql-request\nconst UPDATE_USER_PROFILE_MUTATION = gql`\n  mutation UpdateUserProfile($input: UpdateUserProfileInput!) {\n    updateUserProfile(input: $input) {\n      id\n      email\n      display_name\n      avatar_url\n    }\n  }\n`;\n\nconst ProfileEditForm: React.FC<ProfileEditFormProps> = ({ user, onUpdateSuccess, onCancel }) => {\n  console.log('[ProfileEditForm] Rendering, current user:', user);\n  const toast = useToast();\n  const [mutationLoading, setMutationLoading] = useState(false);\n  const {\n    handleSubmit,\n    register,\n    reset,\n    formState: { errors, isSubmitting },\n  } = useForm<FormValues>({\n    defaultValues: {\n      display_name: user.display_name || '',\n      avatar_url: user.avatar_url || '',\n    },\n  });\n\n  console.log('[ProfileEditForm] RHF errors object:', errors);\n\n  useEffect(() => {\n    reset({\n      display_name: user.display_name || '',\n      avatar_url: user.avatar_url || '',\n    });\n  }, [user, reset]);\n\n  const onSubmit: SubmitHandler<FormValues> = async (values) => {\n    const input: UpdateUserProfileInput = {};\n    // Only include fields if they have changed or are being set\n    // For simplicity, we send them if they are different or if they were empty and now have value.\n    // More robust: check against initial values if truly only sending deltas is critical.\n    if (values.display_name !== (user.display_name || '')) {\n      input.display_name = values.display_name.trim() === '' ? null : values.display_name.trim();\n    }\n    if (values.avatar_url !== (user.avatar_url || '')) {\n      input.avatar_url = values.avatar_url.trim() === '' ? null : values.avatar_url.trim();\n    }\n\n    // If no actual changes to submit (e.g., user made fields empty that were already null)\n    // This can be refined to check if input object is empty if submitting nulls is expensive\n    if (Object.keys(input).length === 0 && \n        (values.display_name.trim() === (user.display_name || '')) && \n        (values.avatar_url.trim() === (user.avatar_url || ''))) {\n      toast({\n        title: 'No Changes',\n        description: 'No changes were made to your profile.',\n        status: 'info',\n        duration: 3000,\n        isClosable: true,\n      });\n      if (onCancel) onCancel(); // Optionally close form if no changes\n      return;\n    }\n\n    setMutationLoading(true);\n    try {\n      // Replace useMutation call with gqlClient.request\n      const { updateUserProfile: updatedUser } = await gqlClient.request<\n        { updateUserProfile: User },\n        { input: UpdateUserProfileInput }\n      >(UPDATE_USER_PROFILE_MUTATION, { input });\n\n      if (updatedUser) {\n        toast({\n          title: 'Profile Updated',\n          description: 'Your profile has been successfully updated.',\n          status: 'success',\n          duration: 5000,\n          isClosable: true,\n        });\n        onUpdateSuccess(updatedUser);\n      } else {\n        throw new Error('Failed to update profile: No data returned');\n      }\n    } catch (error: any) { // Type error as any for broader catch\n      console.error('Error updating profile:', error);\n      let errorMessage = 'Could not update your profile.';\n      if (isGraphQLErrorWithMessage(error)) {\n        errorMessage = error.response!.errors[0].message || errorMessage;\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      toast({\n        title: 'Update Failed',\n        description: errorMessage,\n        status: 'error',\n        duration: 9000,\n        isClosable: true,\n      });\n    } finally {\n      setMutationLoading(false);\n    }\n  };\n\n  return (\n    <Box as=\"form\" onSubmit={handleSubmit(onSubmit)} width=\"100%\">\n      <VStack spacing={4}>\n        <FormControl isInvalid={!!errors.display_name}>\n          <FormLabel htmlFor=\"display_name\">Display Name</FormLabel>\n          <Input\n            id=\"display_name\"\n            {...register('display_name')}\n          />\n          <FormErrorMessage>\n            {errors.display_name && errors.display_name.message}\n          </FormErrorMessage>\n        </FormControl>\n\n        <FormControl isInvalid={!!errors.avatar_url}>\n          <FormLabel htmlFor=\"avatar_url\">Avatar URL</FormLabel>\n          <Input\n            id=\"avatar_url\"\n            type=\"url\"\n            {...register('avatar_url', {\n              pattern: {\n                value: /^(ftp|http|https):\\/\\/[^ \"]+$/,\n                message: 'Please enter a valid URL.',\n              },\n            })}\n          />\n          <FormErrorMessage>\n            {errors.avatar_url && errors.avatar_url.message}\n          </FormErrorMessage>\n        </FormControl>\n\n        <Button \n          type=\"submit\" \n          colorScheme=\"blue\" \n          isLoading={isSubmitting || mutationLoading}\n          width=\"full\"\n        >\n          Save Changes\n        </Button>\n        {onCancel && (\n          <Button variant=\"ghost\" onClick={onCancel} width=\"full\">\n            Cancel\n          </Button>\n        )}\n      </VStack>\n    </Box>\n  );\n};\n\nexport default ProfileEditForm; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/profile/ProfileView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/stages/CreateStageModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":135,"column":40,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":135,"endColumn":54}],"suppressedMessages":[{"ruleId":"jsx-a11y/no-autofocus","severity":2,"message":"The autoFocus prop should not be used, as it can reduce usability and accessibility for users.","line":146,"column":17,"nodeType":"JSXAttribute","endLine":146,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Modal, \n  ModalOverlay, \n  ModalContent, \n  ModalHeader, \n  ModalFooter, \n  ModalBody, \n  ModalCloseButton, \n  Button, \n  FormControl, \n  FormLabel, \n  Input, \n  NumberInput, // Use NumberInput for order and probability\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  Select, // Added Select\n  useToast, \n  VStack \n} from '@chakra-ui/react';\nimport { useStagesStore } from '../../stores/useStagesStore';\nimport type { CreateStageInput as GeneratedCreateStageInput, StageType } from '../../generated/graphql/graphql';\nimport { StageType as StageTypeEnum } from '../../generated/graphql/graphql';\n\ninterface CreateStageModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  pipelineId: string; // Required to link the stage\n  // Optional: Callback on successful creation\n  onSuccess?: (newStageId: string) => void; \n}\n\nconst CreateStageModal: React.FC<CreateStageModalProps> = ({ isOpen, onClose, pipelineId, onSuccess }) => {\n  const [stageName, setStageName] = useState('');\n  const [stageOrder, setStageOrder] = useState<number | string>(0); // Store as number or string for NumberInput\n  const [dealProbability, setDealProbability] = useState<number | string>(''); // Optional, use empty string for placeholder\n  const [stageType, setStageType] = useState<StageType>(StageTypeEnum.Open); // Added stageType state, ensure it uses the enum\n  const [isDealProbabilityDisabled, setIsDealProbabilityDisabled] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { createStage, stagesError } = useStagesStore();\n  const toast = useToast();\n\n  // Reset form when modal is opened/closed\n  useEffect(() => {\n    if (!isOpen) {\n        setStageName('');\n        setStageOrder(0); // Reset to default\n        setDealProbability('');\n        setStageType(StageTypeEnum.Open); // Reset stageType\n        setIsDealProbabilityDisabled(false); // Reset disabled state\n        setIsLoading(false);\n    }\n  }, [isOpen]);\n\n  // New useEffect to handle deal probability based on stageType\n  useEffect(() => {\n    if (stageType === StageTypeEnum.Won) {\n      setDealProbability(100);\n      setIsDealProbabilityDisabled(true);\n    } else if (stageType === StageTypeEnum.Lost) {\n      setDealProbability(0);\n      setIsDealProbabilityDisabled(true);\n    } else { // StageTypeEnum.Open or any other\n      setIsDealProbabilityDisabled(false);\n      // Optionally, you could reset dealProbability to '' if coming from WON/LOST\n      // if it was previously auto-set, or leave it as is for user to modify.\n      // For now, just enabling is fine.\n    }\n  }, [stageType]);\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    \n    // Validation\n    if (!stageName.trim()) {\n      toast({ title: \"Stage name cannot be empty.\", status: 'warning', duration: 3000, isClosable: true });\n      return;\n    }\n    const orderNum = parseInt(String(stageOrder), 10);\n    if (isNaN(orderNum) || orderNum < 0) {\n         toast({ title: \"Order must be a non-negative number.\", status: 'warning', duration: 3000, isClosable: true });\n      return;\n    }\n    \n    // Probability validation starts here, moved outside the orderNum validation block\n    let probabilityNum: number | null = null;\n    if (String(dealProbability).trim() !== '') {\n        const parsedProb = parseFloat(String(dealProbability)); // Use temporary variable\n        if (isNaN(parsedProb) || parsedProb < 0 || parsedProb > 100) { \n            toast({ title: \"Deal probability must be between 0 and 100 (or empty).\", status: 'warning', duration: 3000, isClosable: true });\n            return;\n        }\n        probabilityNum = parsedProb; // Assign if valid\n    }\n    \n    setIsLoading(true);\n    try {\n        const input: GeneratedCreateStageInput = {\n            pipeline_id: pipelineId,\n            name: stageName.trim(),\n            order: orderNum,\n            // Convert percentage (0-100 or null) to decimal (0-1 or null)\n            deal_probability: probabilityNum === null ? null : probabilityNum / 100, \n            stage_type: stageType, // Added stage_type to input\n        };\n        \n      const newStage = await createStage(input);\n      \n      if (newStage) {\n        toast({ title: \"Stage created successfully.\", status: 'success', duration: 3000, isClosable: true });\n        onSuccess?.(newStage.id);\n        onClose(); // Close modal\n      } else {\n        toast({ title: \"Failed to create stage.\", description: stagesError || \"Please check console or try again.\", status: 'error', duration: 5000, isClosable: true });\n      }\n    } catch (error: unknown) {\n        console.error(\"Error in create stage modal submit:\", error);\n        let message = \"Could not create stage.\";\n        if (error instanceof Error) {\n            message = error.message;\n        } else if (typeof error === 'string') {\n            message = error;\n        }\n        toast({ title: \"An error occurred.\", description: message, status: 'error', duration: 5000, isClosable: true });\n    } finally {\n        setIsLoading(false);\n    }\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent as=\"form\" onSubmit={handleSubmit}>\n        <ModalHeader>Create New Stage</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <VStack spacing={4}>\n            <FormControl isRequired>\n              <FormLabel>Stage Name</FormLabel>\n              <Input \n                placeholder=\"e.g., Qualification\"\n                value={stageName}\n                onChange={(e) => setStageName(e.target.value)}\n                autoFocus // eslint-disable-line jsx-a11y/no-autofocus\n              />\n            </FormControl>\n            \n            <FormControl isRequired>\n                <FormLabel>Order</FormLabel>\n                <NumberInput \n                    min={0} \n                    value={stageOrder} \n                    onChange={(valueAsString, valueAsNumber) => setStageOrder(isNaN(valueAsNumber) ? valueAsString : valueAsNumber)} \n                >\n                    <NumberInputField />\n                    <NumberInputStepper>\n                        <NumberIncrementStepper />\n                        <NumberDecrementStepper />\n                    </NumberInputStepper>\n                </NumberInput>\n            </FormControl>\n            \n            <FormControl>\n                <FormLabel>Deal Probability (%)</FormLabel>\n                <NumberInput \n                    min={0} \n                    max={100} \n                    value={dealProbability} \n                    onChange={(valueAsString, valueAsNumber) => setDealProbability(isNaN(valueAsNumber) ? valueAsString : valueAsNumber)} \n                    allowMouseWheel\n                    isDisabled={isDealProbabilityDisabled} // Bind to disabled state\n                >\n                    <NumberInputField placeholder=\"Optional (e.g., 50)\" />\n                    <NumberInputStepper>\n                        <NumberIncrementStepper />\n                        <NumberDecrementStepper />\n                    </NumberInputStepper>\n                </NumberInput>\n            </FormControl>\n\n            <FormControl>\n              <FormLabel>Stage Type</FormLabel>\n              <Select \n                value={stageType} \n                onChange={(e) => setStageType(e.target.value as StageType)}\n              >\n                <option value={StageTypeEnum.Open}>Open</option>\n                <option value={StageTypeEnum.Won}>Won</option>\n                <option value={StageTypeEnum.Lost}>Lost</option>\n              </Select>\n            </FormControl>\n\n          </VStack>\n        </ModalBody>\n        <ModalFooter>\n          <Button variant='ghost' mr={3} onClick={onClose} isDisabled={isLoading}>\n            Cancel\n          </Button>\n          <Button type=\"submit\" colorScheme=\"blue\" isLoading={isLoading}>\n            Create Stage\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default CreateStageModal; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/components/stages/EditStageModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":205,"column":40,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":205,"endColumn":54}],"suppressedMessages":[{"ruleId":"jsx-a11y/no-autofocus","severity":2,"message":"The autoFocus prop should not be used, as it can reduce usability and accessibility for users.","line":216,"column":17,"nodeType":"JSXAttribute","endLine":216,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Modal, \n  ModalOverlay, \n  ModalContent, \n  ModalHeader, \n  ModalFooter, \n  ModalBody, \n  ModalCloseButton, \n  Button, \n  FormControl, \n  FormLabel, \n  Input, \n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  Select,\n  useToast, \n  VStack \n} from '@chakra-ui/react';\nimport { useStagesStore, Stage } from '../../stores/useStagesStore';\nimport type { UpdateStageInput as GeneratedUpdateStageInput, StageType } from '../../generated/graphql/graphql';\nimport { StageType as StageTypeEnum } from '../../generated/graphql/graphql';\n\ninterface EditStageModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  stage: Stage | null; // Stage to edit\n  onSuccess?: (updatedStageId: string) => void; \n}\n\nconst EditStageModal: React.FC<EditStageModalProps> = ({ isOpen, onClose, stage, onSuccess }) => {\n  const [stageName, setStageName] = useState('');\n  const [stageOrder, setStageOrder] = useState<number | string>(0);\n  const [dealProbability, setDealProbability] = useState<number | string>('');\n  const [stageType, setStageType] = useState<StageType>(StageTypeEnum.Open);\n  const [isDealProbabilityDisabled, setIsDealProbabilityDisabled] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { updateStage, stagesError } = useStagesStore(); \n  const toast = useToast();\n\n  // Pre-fill form when stage prop changes\n  useEffect(() => {\n    if (stage) {\n      setStageName(stage.name);\n      setStageOrder(stage.order);\n      // Convert decimal from DB (e.g., 0.6) to percentage for display (e.g., 60)\n      if (stage.deal_probability !== null && stage.deal_probability !== undefined) {\n        setDealProbability(Math.round(stage.deal_probability * 100));\n      } else {\n        setDealProbability('');\n      }\n      setStageType(stage.stage_type || StageTypeEnum.Open);\n    } else {\n        setStageName('');\n        setStageOrder(0);\n        setDealProbability('');\n        setStageType(StageTypeEnum.Open);\n    }\n  }, [stage]);\n\n  // Reset state when modal is closed\n  useEffect(() => {\n    if (!isOpen) {\n        setIsLoading(false);\n    }\n  }, [isOpen]);\n\n  // New useEffect to handle deal probability based on stageType\n  useEffect(() => {\n    if (stageType === StageTypeEnum.Won) {\n      setDealProbability(100);\n      setIsDealProbabilityDisabled(true);\n    } else if (stageType === StageTypeEnum.Lost) {\n      setDealProbability(0);\n      setIsDealProbabilityDisabled(true);\n    } else { // StageTypeEnum.Open or any other\n      setIsDealProbabilityDisabled(false);\n      // When switching to OPEN, if the stage prop exists and has a deal_probability,\n      // restore it. Otherwise, it might have been from WON/LOST or empty.\n      if (stage && stage.stage_type === StageTypeEnum.Open && stage.deal_probability !== null && stage.deal_probability !== undefined) {\n         setDealProbability(Math.round(stage.deal_probability * 100));\n      } else if (stage && stage.stage_type !== StageTypeEnum.Open && stageType === StageTypeEnum.Open) {\n         // If switching from WON/LOST to OPEN, and original wasn't OPEN, clear probability for user input\n         setDealProbability('');\n      }\n      // If no specific logic to restore, it remains as is or as set by user/previous state.\n    }\n  }, [stageType, stage]);\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    if (!stage) {\n        toast({ title: \"No stage selected for editing.\", status: 'error', duration: 3000, isClosable: true });\n        return;\n    }\n    \n    if (!stageName.trim()) {\n      toast({ title: \"Stage name cannot be empty.\", status: 'warning', duration: 3000, isClosable: true });\n      return;\n    }\n    const orderNum = parseInt(String(stageOrder), 10);\n    if (isNaN(orderNum) || orderNum < 0) {\n         toast({ title: \"Order must be a non-negative number.\", status: 'warning', duration: 3000, isClosable: true });\n      return;\n    }\n    \n    let probabilityNum: number | null = null;\n    if (!isDealProbabilityDisabled && String(dealProbability).trim() !== '') {\n        const parsedProb = parseFloat(String(dealProbability));\n        if (isNaN(parsedProb) || parsedProb < 0 || parsedProb > 100) {\n            toast({ title: \"Deal probability must be between 0 and 100 (or empty).\", status: 'warning', duration: 3000, isClosable: true });\n            return;\n        }\n        probabilityNum = parsedProb;\n    } else if (isDealProbabilityDisabled) {\n        // If disabled, use the auto-set value (0 for LOST, 100 for WON)\n        probabilityNum = stageType === StageTypeEnum.Won ? 100 : 0;\n    }\n    \n    const updates: GeneratedUpdateStageInput = {};\n    let hasChanges = false;\n\n    if (stageName.trim() !== stage.name) {\n        updates.name = stageName.trim();\n        hasChanges = true;\n    }\n    if (orderNum !== stage.order) {\n        updates.order = orderNum;\n        hasChanges = true;\n    }\n\n    // Compare stageType\n    if (stageType !== (stage.stage_type || StageTypeEnum.Open)) { // Compare with original or default\n        updates.stage_type = stageType;\n        hasChanges = true;\n    }\n    \n    // Deal probability comparison and update\n    // Ensure probabilityNum is set based on stageType if it was disabled\n    if (stageType === StageTypeEnum.Won) probabilityNum = 100;\n    else if (stageType === StageTypeEnum.Lost) probabilityNum = 0;\n    // If not WON/LOST, probabilityNum is from user input or null if empty\n\n    const originalProbabilityDecimal = stage.deal_probability ?? null;\n    const newProbabilityDecimal = probabilityNum === null ? null : probabilityNum / 100;\n\n    if (newProbabilityDecimal !== originalProbabilityDecimal) {\n        updates.deal_probability = newProbabilityDecimal;\n        hasChanges = true;\n    }\n    \n    // If stage_type changed to WON or LOST, ensure deal_probability is updated accordingly,\n    // even if it wasn't different from original (e.g. if original was OPEN with 0% prob and changed to LOST)\n    if (updates.stage_type === StageTypeEnum.Won && updates.deal_probability !== 1.0) {\n        updates.deal_probability = 1.0;\n        hasChanges = true; // Ensure change is flagged\n    }\n    if (updates.stage_type === StageTypeEnum.Lost && updates.deal_probability !== 0.0) {\n        updates.deal_probability = 0.0;\n        hasChanges = true; // Ensure change is flagged\n    }\n\n\n    if (!hasChanges) {\n         toast({ title: \"No changes detected.\", status: 'info', duration: 2000, isClosable: true });\n         onClose(); \n         return;\n    }\n    \n    setIsLoading(true);\n    try {\n      // Ensure stage_type is explicitly set in updates if it's part of the changes\n      // The logic above already adds it to `updates` if changed.\n      const updatedStage = await updateStage(stage.id, updates);\n      \n      if (updatedStage) {\n        toast({ title: \"Stage updated successfully.\", status: 'success', duration: 3000, isClosable: true });\n        if (onSuccess && updatedStage.id) {\n            onSuccess(updatedStage.id);\n        }\n        onClose();\n      } else {\n        toast({ title: \"Failed to update stage.\", description: stagesError || \"Please check console or try again.\", status: 'error', duration: 5000, isClosable: true });\n      }\n    } catch (error: unknown) {\n        console.error(\"Error in edit stage modal submit:\", error);\n        let message = \"Could not update stage.\";\n        if (error instanceof Error) {\n            message = error.message;\n        } else if (typeof error === 'string') {\n            message = error;\n        }\n        toast({ title: \"An error occurred.\", description: message, status: 'error', duration: 5000, isClosable: true });\n    } finally {\n        setIsLoading(false);\n    }\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent as=\"form\" onSubmit={handleSubmit}>\n        <ModalHeader>Edit Stage</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <VStack spacing={4}>\n            <FormControl isRequired>\n              <FormLabel>Stage Name</FormLabel>\n              <Input \n                placeholder=\"e.g., Qualification\"\n                value={stageName}\n                onChange={(e) => setStageName(e.target.value)}\n                autoFocus // eslint-disable-line jsx-a11y/no-autofocus\n              />\n            </FormControl>\n            \n            <FormControl isRequired>\n                <FormLabel>Order</FormLabel>\n                <NumberInput \n                    min={0} \n                    value={stageOrder} \n                    onChange={(valueAsString, valueAsNumber) => setStageOrder(isNaN(valueAsNumber) ? valueAsString : valueAsNumber)} \n                >\n                    <NumberInputField />\n                    <NumberInputStepper>\n                        <NumberIncrementStepper />\n                        <NumberDecrementStepper />\n                    </NumberInputStepper>\n                </NumberInput>\n            </FormControl>\n            \n            <FormControl>\n                <FormLabel>Deal Probability (%)</FormLabel>\n                <NumberInput \n                    min={0} \n                    max={100} \n                    value={dealProbability} \n                    onChange={(valueAsString, valueAsNumber) => setDealProbability(isNaN(valueAsNumber) ? valueAsString : valueAsNumber)} \n                    allowMouseWheel\n                    isDisabled={isDealProbabilityDisabled}\n                >\n                    <NumberInputField placeholder=\"Optional (e.g., 50)\" />\n                    <NumberInputStepper>\n                        <NumberIncrementStepper />\n                        <NumberDecrementStepper />\n                    </NumberInputStepper>\n                </NumberInput>\n            </FormControl>\n\n            <FormControl>\n              <FormLabel>Stage Type</FormLabel>\n              <Select \n                value={stageType} \n                onChange={(e) => setStageType(e.target.value as StageType)}\n              >\n                <option value={StageTypeEnum.Open}>Open</option>\n                <option value={StageTypeEnum.Won}>Won</option>\n                <option value={StageTypeEnum.Lost}>Lost</option>\n              </Select>\n            </FormControl>\n\n          </VStack>\n        </ModalBody>\n        <ModalFooter>\n          <Button variant='ghost' mr={3} onClick={onClose} isDisabled={isLoading}>\n            Cancel\n          </Button>\n          <Button type=\"submit\" colorScheme=\"blue\" isLoading={isLoading}>\n            Save Changes\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default EditStageModal; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/lib/graphql/customFieldDefinitionOperations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/lib/graphql/userProfileOperations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/lib/graphqlClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/lib/graphqlUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/lib/supabase.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":4,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":4,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":5,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":5,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":16,"column":38,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":16,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":16,"column":51,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":16,"endColumn":66}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\n\n// Get Supabase credentials from Vite environment variables\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl) {\n  throw new Error(\"Missing env variable: VITE_SUPABASE_URL\");\n}\nif (!supabaseAnonKey) {\n  throw new Error(\"Missing env variable: VITE_SUPABASE_ANON_KEY\");\n}\n\n// Create and export the Supabase client instance for frontend usage\n// It uses the anon key, and Supabase handles session management automatically.\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    // Ensure session persistence across browser tabs/reloads\n    persistSession: true,\n    // Automatically refresh the token when expired\n    autoRefreshToken: true,\n    // Let the client automatically detect the session in the URL (Default is true)\n  },\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/main.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'extendTheme' is defined but never used.","line":4,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":17,"column":42,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":17,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .initialColorMode on an `any` value.","line":17,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":17,"endColumn":77}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { BrowserRouter } from 'react-router-dom'\nimport { ChakraProvider, extendTheme, ColorModeScript } from '@chakra-ui/react'\nimport './index.css'\nimport App from './App.tsx'\nimport { useThemeStore } from './stores/useThemeStore'\nimport { themes } from './theme'\n\n// Create a wrapper component to access the Zustand store\nconst AppWithTheme: React.FC = () => {\n  const currentThemeMode = useThemeStore((state) => state.currentTheme)\n  const activeTheme = themes[currentThemeMode] || themes.light\n\n  return (\n    <ChakraProvider theme={activeTheme}>\n      <ColorModeScript initialColorMode={activeTheme.config.initialColorMode} />\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </ChakraProvider>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nif (rootElement) {\n  ReactDOM.createRoot(rootElement).render(\n    <React.StrictMode>\n    <AppWithTheme />\n    </React.StrictMode>\n)\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/pages/ActivitiesPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Box' is defined but never used.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Heading' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VStack' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertIcon' is defined but never used.","line":21,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EmptyState' is defined but never used.","line":27,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isUrl' is assigned a value but never used.","line":38,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":42,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":13},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":130,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":130,"endColumn":37,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4737,4737],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4737,4737],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleToggleDone' function makes the dependencies of useMemo Hook (at line 307) change on every render. Move it inside the useMemo callback. Alternatively, wrap the definition of 'handleToggleDone' in its own useCallback() Hook.","line":149,"column":9,"nodeType":"VariableDeclarator","endLine":154,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleDeleteClick' function makes the dependencies of useMemo Hook (at line 307) change on every render. Move it inside the useMemo callback. Alternatively, wrap the definition of 'handleDeleteClick' in its own useCallback() Hook.","line":156,"column":9,"nodeType":"VariableDeclarator","endLine":159,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleEditClick' function makes the dependencies of useMemo Hook (at line 307) change on every render. Move it inside the useMemo callback. Alternatively, wrap the definition of 'handleEditClick' in its own useCallback() Hook.","line":176,"column":9,"nodeType":"VariableDeclarator","endLine":179,"endColumn":4},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":198,"column":28,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":198,"endColumn":91},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":440,"column":19,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":440,"endColumn":40}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState, useMemo } from 'react';\nimport {\n  Box,\n  Button,\n  Heading,\n  Spinner,\n  Text,\n  VStack,\n  useDisclosure,\n  Checkbox,\n  HStack,\n  IconButton,\n  Tag,\n  Flex,\n  useToast,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  Alert, AlertIcon\n} from '@chakra-ui/react';\nimport { useAppStore } from '../stores/useAppStore';\nimport { useActivitiesStore, Activity } from '../stores/useActivitiesStore';\nimport { useViewPreferencesStore } from '../stores/useViewPreferencesStore';\nimport CreateActivityForm from '../components/activities/CreateActivityForm';\nimport EmptyState from '../components/common/EmptyState';\nimport ConfirmationDialog from '../components/common/ConfirmationDialog';\nimport EditActivityModal from '../components/activities/EditActivityModal';\nimport { TimeIcon, EditIcon, DeleteIcon, SettingsIcon } from '@chakra-ui/icons';\nimport ListPageLayout from '../components/layout/ListPageLayout';\nimport SortableTable, { ColumnDefinition } from '../components/common/SortableTable';\nimport ColumnSelector from '../components/common/ColumnSelector';\nimport QuickFilterControls, { QuickFilter } from '../components/common/QuickFilterControls';\nimport type { ActivityFilterInput } from '../generated/graphql/graphql';\n\n// Helper to check if a string is a URL (basic version)\nconst isUrl = (str: string): boolean => {\n  try {\n    new URL(str);\n    return str.startsWith('http://') || str.startsWith('https://');\n  } catch (_) {\n    return false;\n  }\n};\n\n// --- Helper Functions (copied from ActivityListItem) ---\nconst formatDateTime = (isoString: string | null | undefined): string => {\n  if (!isoString) return '-'; // Display hyphen for empty dates\n  try {\n    return new Date(isoString).toLocaleString(undefined, {\n      dateStyle: 'medium',\n      timeStyle: 'short',\n    });\n  } catch (e) {\n    console.error('Error formatting date:', isoString, e);\n    return 'Invalid date';\n  }\n};\n\nconst getActivityTypeColor = (type: string): string => {\n    switch (type?.toUpperCase()) {\n        case 'TASK': return 'blue';\n        case 'MEETING': return 'purple';\n        case 'CALL': return 'green';\n        case 'EMAIL': return 'orange';\n        case 'DEADLINE': return 'red';\n        default: return 'gray';\n    }\n}\n\nfunction ActivitiesPage() {\n  // Store state and actions from useActivitiesStore\n  const {\n    activities,\n    activitiesLoading,\n    activitiesError,\n    fetchActivities,\n    updateActivity,\n    deleteActivity,\n  } = useActivitiesStore();\n\n  // Auth related state from useAppStore (to be refactored to useAuthStore later)\n  const userPermissions = useAppStore((state) => state.userPermissions);\n  const session = useAppStore((state) => state.session);\n  const currentUserId = session?.user.id;\n\n  // Modal state\n  const { isOpen: isCreateOpen, onOpen: onCreateOpen, onClose: onCreateClose } = useDisclosure();\n  const { isOpen: isEditOpen, onOpen: onEditOpen, onClose: onEditClose } = useDisclosure();\n  const { isOpen: isConfirmDeleteDialogOpen, onOpen: onConfirmDeleteOpen, onClose: onConfirmDeleteClose } = useDisclosure();\n  const { isOpen: isColumnSelectorOpen, onOpen: onColumnSelectorOpen, onClose: onColumnSelectorClose } = useDisclosure();\n  const [activityToEdit, setActivityToEdit] = useState<Activity | null>(null);\n  const [activityToDeleteId, setActivityToDeleteId] = useState<string | null>(null);\n  const [deletingRowId, setDeletingRowId] = useState<string | null>(null);\n  const toast = useToast();\n\n  const { \n    tableColumnPreferences, \n    initializeTable, \n    setVisibleColumnKeys,\n    resetTableToDefaults \n  } = useViewPreferencesStore();\n\n  const [activeQuickFilterKey, setActiveQuickFilterKey] = useState<string | null>(null);\n\n  // Define Quick Filters for Activities\n  const availableQuickFilters = useMemo((): QuickFilter[] => [\n    { key: 'all', label: 'All Activities' },\n    { key: 'myOpen', label: 'My Open' }, // Will fetch {isDone: false} and then filter by user_id client-side\n    { key: 'allDone', label: 'All Done' }, // Will fetch {isDone: true}\n  ], []);\n\n  // Fetch activities on component mount and when activeQuickFilterKey changes\n  useEffect(() => {\n    let filterCriteria: ActivityFilterInput | undefined = undefined;\n    // For 'myOpen', we fetch all open activities and then filter client-side by user.\n    // For 'allDone', we fetch based on isDone.\n    // For 'all', filterCriteria remains undefined.\n    if (activeQuickFilterKey) {\n      switch (activeQuickFilterKey) {\n        case 'myOpen':\n          filterCriteria = { isDone: false }; // Corrected field name\n          break;\n        case 'allDone':\n          filterCriteria = { isDone: true }; // Corrected field name\n          break;\n      }\n    }\n    fetchActivities(filterCriteria);\n  }, [fetchActivities, activeQuickFilterKey]); // currentUserId is not a direct dep for fetch, but for displayedActivities\n\n  const displayedActivities = useMemo(() => {\n    if (activeQuickFilterKey === 'myOpen' && currentUserId) {\n      // Ensure we only show activities for the current user that are also not done.\n      // The fetchActivities call for 'myOpen' already filters by isDone: false.\n      return activities.filter(act => act.user_id === currentUserId);\n    }\n    // For 'all' and 'allDone', the fetched data from useActivitiesStore is already correctly filtered by backend (or not filtered for 'all').\n    return activities;\n  }, [activities, activeQuickFilterKey, currentUserId]);\n\n  const handleCreateSuccess = () => {\n    // The store should update the list, so potentially just close modal or show toast\n    // fetchActivities(); // Re-fetch if optimistic updates aren't fully covering linked data or complex sorts\n    onCreateClose(); // Assuming CreateActivityForm is in a modal handled by isCreateOpen\n  };\n\n  const handleToggleDone = async (activityId: string, currentStatus: boolean) => {\n    const success = await updateActivity(activityId, { is_done: !currentStatus });\n    if (!success) {\n        toast({ title: 'Failed to update activity status', description: activitiesError || 'Unknown error', status: 'error', duration: 3000, isClosable: true });\n    }\n  };\n\n  const handleDeleteClick = (activityId: string) => {\n    setActivityToDeleteId(activityId);\n    onConfirmDeleteOpen();\n  };\n\n  const handleConfirmDelete = async () => {\n    if (!activityToDeleteId) return;\n    setDeletingRowId(activityToDeleteId);\n    const success = await deleteActivity(activityToDeleteId);\n    setDeletingRowId(null);\n    onConfirmDeleteClose();\n    setActivityToDeleteId(null);\n\n    if (success) {\n         toast({ title: 'Activity deleted.', status: 'success', duration: 3000, isClosable: true });\n    } else {\n         toast({ title: 'Error deleting activity', description: activitiesError || 'Unknown error', status: 'error', duration: 3000, isClosable: true });\n    }\n  };\n\n  const handleEditClick = (activityItem: Activity) => { // Renamed to activityItem to avoid conflict\n    setActivityToEdit(activityItem);\n    onEditOpen();\n  };\n\n  const handleEditClose = () => {\n    onEditClose();\n    setActivityToEdit(null);\n  };\n\n  const TABLE_KEY = 'activities_list';\n\n  const allAvailableColumns = useMemo((): ColumnDefinition<Activity>[] => {\n    const standardColumns: ColumnDefinition<Activity>[] = [\n      {\n        key: 'is_done',\n        header: '', // No text header for checkbox\n        renderCell: (activityItem) => {\n            const canUpdate = userPermissions?.includes('activity:update_any') || (userPermissions?.includes('activity:update_own') && activityItem.user_id === currentUserId);\n            return (\n              <Checkbox \n                  isChecked={activityItem.is_done} \n                  onChange={() => handleToggleDone(activityItem.id, activityItem.is_done)} \n                  aria-label=\"Mark activity as done\"\n                  isDisabled={!canUpdate}\n                  px={2} // Add padding directly to checkbox cell\n              />\n            );\n        },\n        isSortable: true,\n        sortAccessor: (activityItem) => activityItem.is_done, // Sort by boolean\n      },\n      {\n        key: 'subject',\n        header: 'Subject / Type',\n        renderCell: (activityItem) => (\n          <HStack align=\"baseline\">\n            <Text fontWeight=\"medium\">{activityItem.subject}</Text>\n            <Tag size=\"sm\" colorScheme={getActivityTypeColor(activityItem.type)}>{activityItem.type || '-'}</Tag>\n          </HStack>\n        ),\n        isSortable: true,\n        sortAccessor: (activityItem) => activityItem.subject?.toLowerCase() ?? '',\n      },\n      {\n        key: 'due_date',\n        header: 'Due Date',\n        renderCell: (activityItem) => formatDateTime(activityItem.due_date),\n        isSortable: true,\n        sortAccessor: (activityItem) => activityItem.due_date ? new Date(activityItem.due_date) : null, // Sort by Date or null\n      },\n      {\n        key: 'linked_to',\n        header: 'Linked To',\n        renderCell: (activityItem) => {\n            const linkedEntity = activityItem.deal \n              ? `Deal: ${activityItem.deal.name}` \n              : activityItem.person \n              ? `Person: ${activityItem.person.first_name || ''} ${activityItem.person.last_name || ''}`.trim()\n              : activityItem.organization\n              ? `Org: ${activityItem.organization.name}`\n              : '-';\n            return <Text fontSize=\"xs\">{linkedEntity}</Text>;\n        },\n        isSortable: true,\n        sortAccessor: (activityItem) => { // Custom accessor for linked entity string\n            if (activityItem.deal) return `deal: ${activityItem.deal.name?.toLowerCase() ?? ''}`;\n            if (activityItem.person) return `person: ${activityItem.person.first_name?.toLowerCase() ?? ''} ${activityItem.person.last_name?.toLowerCase() ?? ''}`.trim();\n            if (activityItem.organization) return `organization: ${activityItem.organization.name?.toLowerCase() ?? ''}`;\n            return '';\n        },\n      },\n      {\n        key: 'notes',\n        header: 'Notes',\n        renderCell: (activityItem) => (\n            <Text fontSize=\"xs\" maxW=\"200px\" whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">\n                {activityItem.notes || '-'}\n            </Text>\n        ),\n        isSortable: true,\n        sortAccessor: (activityItem) => activityItem.notes?.toLowerCase() ?? '',\n      },\n      {\n        key: 'created_at',\n        header: 'Created',\n        renderCell: (activityItem) => formatDateTime(activityItem.created_at),\n        isSortable: true,\n        sortAccessor: (activityItem) => activityItem.created_at ? new Date(activityItem.created_at).getTime() : 0,\n      },\n      {\n        key: 'updated_at',\n        header: 'Updated',\n        renderCell: (activityItem) => formatDateTime(activityItem.updated_at),\n        isSortable: true,\n        sortAccessor: (activityItem) => activityItem.updated_at ? new Date(activityItem.updated_at).getTime() : 0,\n      },\n    ];\n\n    const actionsColumn: ColumnDefinition<Activity> = {\n      key: 'actions',\n      header: 'Actions',\n      renderCell: (activityItem) => {\n          const canUpdate = userPermissions?.includes('activity:update_any') || (userPermissions?.includes('activity:update_own') && activityItem.user_id === currentUserId);\n          const canDelete = userPermissions?.includes('activity:delete_any') || (userPermissions?.includes('activity:delete_own') && activityItem.user_id === currentUserId);\n          return (\n            <HStack spacing={1}>\n              <IconButton\n                aria-label=\"Edit activity\"\n                icon={<EditIcon />}\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => handleEditClick(activityItem)}\n                isDisabled={!canUpdate || !!deletingRowId}\n              />\n              <IconButton\n                aria-label=\"Delete activity\"\n                icon={<DeleteIcon />}\n                colorScheme=\"red\"\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => handleDeleteClick(activityItem.id)}\n                isDisabled={!canDelete || (!!deletingRowId && deletingRowId !== activityItem.id)}\n                isLoading={deletingRowId === activityItem.id}\n              />\n            </HStack>\n          );\n      },\n      isSortable: false,\n    };\n    return [...standardColumns, actionsColumn];\n  }, [userPermissions, currentUserId, deletingRowId, handleToggleDone, handleEditClick, handleDeleteClick]);\n\n  const defaultVisibleColumnKeys = useMemo(() => [\n    'is_done', 'subject', 'due_date', 'linked_to', 'notes', 'created_at', 'actions'\n  ], []);\n\n  useEffect(() => {\n    if (allAvailableColumns.length > 0) {\n        initializeTable(TABLE_KEY, defaultVisibleColumnKeys);\n    }\n  }, [initializeTable, defaultVisibleColumnKeys, allAvailableColumns]);\n\n  const currentVisibleColumnKeys = useMemo(() => {\n    const preferredKeys = tableColumnPreferences[TABLE_KEY]?.visibleColumnKeys;\n    const availableKeysSet = new Set(allAvailableColumns.map(col => col.key));\n    if (preferredKeys) {\n      const filteredPreferredKeys = preferredKeys.filter(key => availableKeysSet.has(key));\n      return filteredPreferredKeys.length > 0 ? filteredPreferredKeys : defaultVisibleColumnKeys.filter(key => availableKeysSet.has(key));\n    }\n    return defaultVisibleColumnKeys.filter(key => availableKeysSet.has(key));\n  }, [tableColumnPreferences, TABLE_KEY, defaultVisibleColumnKeys, allAvailableColumns]);\n\n  const visibleColumns = useMemo(() => {\n    if (allAvailableColumns.length === 0) return [];\n    return allAvailableColumns.filter(col => currentVisibleColumnKeys.includes(String(col.key)));\n  }, [allAvailableColumns, currentVisibleColumnKeys]);\n\n  // Define props for EmptyState\n  const emptyStateProps = {\n    icon: TimeIcon,\n    title: \"No Activities Logged\",\n    message: \"Add tasks, calls, or meetings to keep track of interactions.\",\n    actionButtonLabel: \"New Activity\",\n    onActionButtonClick: onCreateOpen,\n    isActionButtonDisabled: !userPermissions?.includes('activity:create')\n  };\n\n  // Loading state is handled before the main layout\n  if (activitiesLoading) {\n    return (\n      <Flex justify=\"center\" align=\"center\" minH=\"calc(100vh - 200px)\">\n        <Spinner size=\"xl\" />\n      </Flex>\n    );\n  }\n\n  // Error state when no activities are loaded yet (this might need adjustment based on full file content)\n  // This specific conditional rendering of ListPageLayout for error might be part of what gets simplified\n  // if the main ListPageLayout is always rendered.\n  if (activitiesError && !activities.length && !activitiesLoading) { // Added !activitiesLoading here\n    return (\n      <ListPageLayout \n        title=\"Activities\" \n        newButtonLabel=\"New Activity\"\n        onNewButtonClick={onCreateOpen} // This should trigger the modal\n        isNewButtonDisabled={!userPermissions?.includes('activity:create')}\n        isLoading={false} // Explicitly false as we are in error state\n        error={activitiesError}\n        isEmpty={true} // True because of error and no activities\n        emptyStateProps={emptyStateProps} // Use the defined emptyStateProps\n      >\n         <></>{/* Provide empty fragment as children to satisfy prop type */}\n      </ListPageLayout>\n    );\n  }\n\n  const emptyStatePropsForPage = {\n    icon: TimeIcon,\n    title: \"No Activities Yet\",\n    message: \"Get started by creating your first activity or task.\",\n    actionButtonLabel: \"New Activity\",\n    onActionButtonClick: onCreateOpen,\n    isActionButtonDisabled: !userPermissions?.includes('activity:create_any') && !userPermissions?.includes('activity:create_own')\n  };\n  \n  const pageIsLoading = activitiesLoading;\n\n  return (\n    <>\n    <ListPageLayout \n        title=\"Activities\" \n        newButtonLabel=\"New Activity\"\n        onNewButtonClick={onCreateOpen}\n        isNewButtonDisabled={!userPermissions?.includes('activity:create')}\n        isLoading={pageIsLoading}\n        error={activitiesError}\n        isEmpty={!pageIsLoading && displayedActivities.length === 0 && !activitiesError}\n        emptyStateProps={emptyStatePropsForPage}\n        customControls={ \n          <HStack spacing={4} my={2}>\n            <QuickFilterControls \n              availableFilters={availableQuickFilters}\n              activeFilterKey={activeQuickFilterKey}\n              onSelectFilter={setActiveQuickFilterKey}\n            />\n            <Button leftIcon={<SettingsIcon />} onClick={onColumnSelectorOpen} size=\"sm\" variant=\"outline\">\n              Columns\n            </Button>\n          </HStack>\n        }\n    >\n        {!pageIsLoading && !activitiesError && displayedActivities.length > 0 && (\n            <SortableTable<Activity>\n                data={displayedActivities}\n                columns={visibleColumns}\n                initialSortKey=\"due_date\"\n                initialSortDirection=\"ascending\"\n            />\n        )}\n    </ListPageLayout>\n\n    {isCreateOpen && (\n        <Modal isOpen={isCreateOpen} onClose={onCreateClose} size=\"xl\" isCentered>\n        <ModalOverlay />\n        <ModalContent>\n            <ModalHeader>Log New Activity</ModalHeader>\n          <ModalCloseButton />\n            <CreateActivityForm onSuccess={handleCreateSuccess} onClose={onCreateClose} />\n        </ModalContent>\n      </Modal>\n    )}\n\n    {activityToEdit && isEditOpen && (\n        <EditActivityModal \n            activity={activityToEdit}\n          isOpen={isEditOpen} \n            onClose={handleEditClose}\n        />\n    )}\n\n    <ConfirmationDialog \n        isOpen={isConfirmDeleteDialogOpen}\n        onClose={onConfirmDeleteClose}\n        onConfirm={handleConfirmDelete}\n        headerText=\"Delete Activity\"\n        bodyText=\"Are you sure you want to delete this activity? This action cannot be undone.\"\n        confirmButtonText=\"Delete\"\n        confirmButtonColorScheme=\"red\"\n        isLoading={!!deletingRowId}\n    />\n\n    {isColumnSelectorOpen && allAvailableColumns.length > 0 && (\n        <ColumnSelector<Activity>\n          isOpen={isColumnSelectorOpen}\n          onClose={onColumnSelectorClose}\n          allAvailableColumns={allAvailableColumns}\n          currentVisibleColumnKeys={currentVisibleColumnKeys}\n          defaultVisibleColumnKeys={defaultVisibleColumnKeys}\n          onApply={(newKeys) => setVisibleColumnKeys(TABLE_KEY, newKeys)}\n          onReset={() => resetTableToDefaults(TABLE_KEY, defaultVisibleColumnKeys)}\n        />\n    )}\n    </>\n  );\n}\n\nexport default ActivitiesPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/pages/DealDetailPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":17,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":17,"endColumn":29,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[787,787],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[787,787],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":71,"column":17,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":71,"endColumn":37,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[3257,3263],"text":"CustomFieldType.Text"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":73,"column":24,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":73,"endColumn":46,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[3377,3385],"text":"CustomFieldType.Number"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":75,"column":24,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":75,"endColumn":47,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[3556,3565],"text":"CustomFieldType.Boolean"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":77,"column":24,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":77,"endColumn":44,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[3672,3678],"text":"CustomFieldType.Date"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":79,"column":24,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":79,"endColumn":48,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[3819,3829],"text":"CustomFieldType.Dropdown"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":82,"column":24,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":82,"endColumn":52,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[4070,4084],"text":"CustomFieldType.MultiSelect"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":94,"column":43,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":94,"endColumn":66,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[4761,4770],"text":"CustomFieldType.Boolean"},"desc":"Replace with an enum value comparison."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Box, Heading, Spinner, Text, Alert, AlertIcon, AlertTitle, AlertDescription } from '@chakra-ui/react';\nimport { useParams } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { useAppStore } from '../stores/useAppStore';\nimport DealHistoryList from '../components/deals/DealHistoryList';\nimport DealPricingSection from '../components/pricing/DealPricingSection';\n\nconst DealDetailPage = () => {\n  const { dealId } = useParams<{ dealId: string }>();\n  const fetchDealById = useAppStore((state) => state.fetchDealById);\n  const currentDeal = useAppStore((state) => state.currentDeal);\n  const isLoading = useAppStore((state) => state.currentDealLoading);\n  const error = useAppStore((state) => state.currentDealError);\n\n  useEffect(() => {\n    if (dealId) {\n      fetchDealById(dealId);\n    }\n    // Clear currentDeal when component unmounts or dealId changes to avoid showing stale data\n    return () => {\n      // useAppStore.setState({ currentDeal: null, currentDealError: null }); // Optional: Reset on unmount\n    };\n  }, [dealId, fetchDealById]);\n\n  if (isLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"200px\">\n        <Spinner size=\"xl\" />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert status=\"error\">\n        <AlertIcon />\n        <AlertTitle mr={2}>Error loading deal!</AlertTitle>\n        <AlertDescription>{error}</AlertDescription>\n      </Alert>\n    );\n  }\n\n  if (!currentDeal) {\n    return <Text>Deal not found or no deal selected.</Text>;\n  }\n\n  return (\n    <Box>\n      <Heading mb={1}>Deal: {currentDeal.name}</Heading>\n      <Text fontSize=\"sm\" color={{ base: 'gray.500', _dark: 'gray.400' }} mb={4}>ID: {currentDeal.id}</Text>\n      \n      <Box mb={6} p={4} borderWidth=\"1px\" borderRadius=\"lg\" bg={{ base: 'white', _dark: 'gray.700' }} borderColor={{ base: 'gray.200', _dark: 'gray.600' }}>\n        <Heading size=\"sm\" mb={2}>Details</Heading>\n        <Text><strong>Amount:</strong> {currentDeal.amount ? `$${currentDeal.amount.toLocaleString()}` : 'N/A'}</Text>\n        <Text><strong>Stage:</strong> {currentDeal.stage?.name || 'N/A'}</Text>\n        <Text><strong>Expected Close Date:</strong> {currentDeal.expected_close_date ? new Date(currentDeal.expected_close_date).toLocaleDateString() : 'N/A'}</Text>\n        <Text><strong>Person:</strong> {currentDeal.person ? `${currentDeal.person.first_name} ${currentDeal.person.last_name}` : 'N/A'}</Text>\n        <Text><strong>Organization:</strong> {currentDeal.organization?.name || 'N/A'}</Text>\n      </Box>\n\n      {/* Custom Fields Display Section Added Below */}\n      {currentDeal.customFieldValues && currentDeal.customFieldValues.length > 0 && (\n        <Box mt={6} p={4} borderWidth=\"1px\" borderRadius=\"lg\" bg={{ base: 'white', _dark: 'gray.700' }} borderColor={{ base: 'gray.200', _dark: 'gray.600' }}>\n          <Heading size=\"sm\" mb={3}>Custom Information</Heading>\n          {currentDeal.customFieldValues.map((cfValue) => {\n            if (!cfValue.definition) return null; // Should not happen if query is correct\n\n            let displayValue: string | JSX.Element = 'N/A';\n            const { fieldType, dropdownOptions } = cfValue.definition;\n\n            if (fieldType === 'TEXT' && cfValue.stringValue) {\n              displayValue = cfValue.stringValue;\n            } else if (fieldType === 'NUMBER' && cfValue.numberValue !== null && cfValue.numberValue !== undefined) {\n              displayValue = cfValue.numberValue.toString();\n            } else if (fieldType === 'BOOLEAN') {\n              displayValue = cfValue.booleanValue ? 'Yes' : 'No';\n            } else if (fieldType === 'DATE' && cfValue.dateValue) {\n              displayValue = new Date(cfValue.dateValue).toLocaleDateString();\n            } else if (fieldType === 'DROPDOWN' && cfValue.stringValue) {\n              const selectedOption = dropdownOptions?.find(opt => opt.value === cfValue.stringValue);\n              displayValue = selectedOption?.label || cfValue.stringValue;\n            } else if (fieldType === 'MULTI_SELECT' && cfValue.selectedOptionValues && cfValue.selectedOptionValues.length > 0) {\n              displayValue = (\n                <ul style={{ listStyleType: 'disc', paddingLeft: '20px' }}>\n                  {cfValue.selectedOptionValues.map(value => {\n                    const selectedOption = dropdownOptions?.find(opt => opt.value === value);\n                    return <li key={value}>{selectedOption?.label || value}</li>;\n                  })}\n                </ul>\n              );\n            }\n\n            // Only render if there's a non-N/A value to display or it is a boolean (which always has a representation)\n            if (displayValue !== 'N/A' || fieldType === 'BOOLEAN') {\n                return (\n                    <Box key={cfValue.definition.id} mb={2}>\n                        <Text><strong>{cfValue.definition.fieldLabel}:</strong> {displayValue}</Text>\n                    </Box>\n                );\n            }\n            return null;\n          })}\n        </Box>\n      )}\n      {/* End of Custom Fields Display Section */}\n\n      {/* ADDED Pricing Section */}\n      {dealId && (\n        <Box mt={6} p={4} borderWidth=\"1px\" borderRadius=\"lg\" bg={{ base: 'white', _dark: 'gray.700' }} borderColor={{ base: 'gray.200', _dark: 'gray.600' }}>\n          <Heading size=\"md\" mb={3}>Pricing & Quotes</Heading>\n          <DealPricingSection dealId={dealId} />\n        </Box>\n      )}\n      {/* End of Pricing Section */}\n\n      <Box mt={6} p={4} borderWidth=\"1px\" borderRadius=\"lg\" bg={{ base: 'white', _dark: 'gray.700' }} borderColor={{ base: 'gray.200', _dark: 'gray.600' }}>\n        <Heading size=\"md\" mb={3}>History / Audit Trail</Heading>\n        {currentDeal.history ? (\n          <DealHistoryList historyEntries={currentDeal.history} />\n        ) : (\n          <Text>No history available.</Text>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default DealDetailPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/pages/DealsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CustomFieldValue' is defined but never used.","line":25,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":81},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GQLCustomFieldType' is defined but never used.","line":25,"column":102,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":120},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":41,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":13},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":102,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":102,"endColumn":18,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3759,3759],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3759,3759],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":118,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":118,"endColumn":28,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4414,4414],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4414,4414],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleEditClick' function makes the dependencies of useMemo Hook (at line 240) change on every render. Move it inside the useMemo callback. Alternatively, wrap the definition of 'handleEditClick' in its own useCallback() Hook.","line":123,"column":9,"nodeType":"VariableDeclarator","endLine":123,"endColumn":86},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleDeleteClick' function makes the dependencies of useMemo Hook (at line 240) change on every render. Move it inside the useMemo callback. Alternatively, wrap the definition of 'handleDeleteClick' in its own useCallback() Hook.","line":124,"column":9,"nodeType":"VariableDeclarator","endLine":124,"endColumn":102},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":167,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":167,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":168,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":168,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":169,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":169,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":170,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":170,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":181,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":186,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":187,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":187,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":188,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":188,"endColumn":105},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":189,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":189,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":190,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":194,"endColumn":19},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":191,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":191,"endColumn":41,"suggestions":[{"messageId":"addBrackets","fix":{"range":[9684,9870],"text":"{ const optValD = stringValue; \n            const optD = def.dropdownOptions?.find(o => o.value === optValD); \n            displayValue = optD?.label || optValD || '-'; \n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":192,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":192,"endColumn":78,"suggestions":[{"messageId":"addBrackets","fix":{"range":[9684,9870],"text":"{ const optValD = stringValue; \n            const optD = def.dropdownOptions?.find(o => o.value === optValD); \n            displayValue = optD?.label || optValD || '-'; \n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":195,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":198,"endColumn":19},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":196,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":196,"endColumn":54,"suggestions":[{"messageId":"addBrackets","fix":{"range":[9915,10097],"text":"{ const sVals = selectedOptionValues || []; \n            displayValue = sVals.map(v => def.dropdownOptions?.find(o => o.value === v)?.label || v).join(', ') || '-'; \n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":391,"column":94,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":391,"endColumn":113},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":392,"column":140,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":392,"endColumn":159},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":393,"column":103,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":393,"endColumn":124}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useCallback, useState, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Box,\n  Heading,\n  Button,\n  Text,\n  Spinner,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n  IconButton,\n  HStack,\n  useToast,\n  VStack,\n  Flex,\n  ButtonGroup,\n} from '@chakra-ui/react';\nimport CreateDealModal from '../components/CreateDealModal';\nimport EditDealModal from '../components/EditDealModal';\nimport { EditIcon, DeleteIcon, ViewIcon, SettingsIcon } from '@chakra-ui/icons';\nimport { useAppStore } from '../stores/useAppStore';\nimport { useDealsStore, Deal } from '../stores/useDealsStore';\nimport { useViewPreferencesStore } from '../stores/useViewPreferencesStore';\nimport type { Person as GeneratedPerson, CustomFieldDefinition, CustomFieldValue, CustomFieldType as GQLCustomFieldType } from '../generated/graphql/graphql';\nimport { gqlClient } from '../lib/graphqlClient';\nimport { gql } from 'graphql-request';\nimport ConfirmationDialog from '../components/common/ConfirmationDialog';\nimport ListPageLayout from '../components/layout/ListPageLayout';\nimport SortableTable, { ColumnDefinition } from '../components/common/SortableTable';\nimport ColumnSelector from '../components/common/ColumnSelector';\nimport EmptyState from '../components/common/EmptyState';\nimport DealsKanbanView from '../components/deals/DealsKanbanView';\nimport QuickFilterControls, { QuickFilter } from '../components/common/QuickFilterControls';\nimport type { StageType } from '../generated/graphql/graphql';\n\nconst isUrl = (str: string): boolean => {\n  try {\n    new URL(str);\n    return str.startsWith('http://') || str.startsWith('https://');\n  } catch (_) {\n    return false;\n  }\n};\n\nconst GET_DEAL_CUSTOM_FIELD_DEFS_QUERY = gql`\n  query GetDealCustomFieldDefinitions {\n    customFieldDefinitions(entityType: DEAL, includeInactive: false) {\n      id\n      fieldName\n      fieldLabel\n      fieldType\n      dropdownOptions { value label }\n    }\n  }\n`;\n\nfunction DealsPage() {\n  const { \n    deals, \n    dealsLoading, \n    dealsError, \n    fetchDeals, \n    deleteDeal: deleteDealAction,\n    dealsViewMode,\n    setDealsViewMode\n  } = useDealsStore();\n  \n  const userPermissions = useAppStore((state) => state.userPermissions);\n  const session = useAppStore((state) => state.session);\n  const currentUserId = session?.user.id;\n  const { \n    tableColumnPreferences, \n    initializeTable, \n    setVisibleColumnKeys,\n    resetTableToDefaults \n  } = useViewPreferencesStore();\n  \n  const { isOpen: isCreateModalOpen, onOpen: onCreateModalOpen, onClose: onCreateModalClose } = useDisclosure();\n  const { isOpen: isEditModalOpen, onOpen: onEditModalOpen, onClose: onEditModalClose } = useDisclosure();\n  const [dealToEdit, setDealToEdit] = useState<Deal | null>(null);\n  const [deletingRowId, setDeletingRowId] = useState<string | null>(null);\n  const toast = useToast();\n\n  const { isOpen: isConfirmDeleteDialogOpen, onOpen: onConfirmDeleteOpen, onClose: onConfirmDeleteClose } = useDisclosure();\n  const [dealToDeleteId, setDealToDeleteId] = useState<string | null>(null);\n  const { isOpen: isColumnSelectorOpen, onOpen: onColumnSelectorOpen, onClose: onColumnSelectorClose } = useDisclosure();\n\n  const [dealCustomFieldDefinitions, setDealCustomFieldDefinitions] = useState<CustomFieldDefinition[]>([]);\n  const [customFieldsLoading, setCustomFieldsLoading] = useState<boolean>(true);\n\n  const [activeQuickFilterKey, setActiveQuickFilterKey] = useState<string | null>(null);\n\n  // Define Quick Filters for Deals\n  const availableQuickFilters = useMemo((): QuickFilter[] => [\n    { key: 'all', label: 'All Deals' },\n    { key: 'myOpen', label: 'My Open Deals' },\n    { key: 'closingThisMonth', label: 'Closing This Month' },\n  ], []);\n\n  useEffect(() => {\n    fetchDeals();\n  }, [fetchDeals]);\n\n  useEffect(() => {\n    const fetchCustomFieldDefs = async () => {\n      setCustomFieldsLoading(true);\n      try {\n        const data = await gqlClient.request<{ customFieldDefinitions: CustomFieldDefinition[] }>(GET_DEAL_CUSTOM_FIELD_DEFS_QUERY);\n        setDealCustomFieldDefinitions(data.customFieldDefinitions || []);\n      } catch (error) {\n        console.error(\"Error fetching deal custom field definitions:\", error);\n        toast({ title: 'Error loading custom field definitions', status: 'error', duration: 3000, isClosable: true });\n      } finally {\n        setCustomFieldsLoading(false);\n      }\n    };\n    fetchCustomFieldDefs();\n  }, [toast]);\n\n  const handleCreateDealClick = () => onCreateModalOpen();\n  const handleDataChanged = useCallback(() => fetchDeals(), [fetchDeals]);\n  const handleEditClick = (deal: Deal) => { setDealToEdit(deal); onEditModalOpen(); };\n  const handleDeleteClick = (dealId: string) => { setDealToDeleteId(dealId); onConfirmDeleteOpen(); };\n\n  const handleConfirmDelete = async () => {\n    if (!dealToDeleteId) return;\n    setDeletingRowId(dealToDeleteId);\n    const success = await deleteDealAction(dealToDeleteId);\n    setDeletingRowId(null);\n    onConfirmDeleteClose();\n    setDealToDeleteId(null);\n    if (success) toast({ title: 'Deal deleted.', status: 'success', duration: 3000, isClosable: true });\n    else toast({ title: 'Error Deleting Deal', description: dealsError || 'An unknown error occurred', status: 'error', duration: 5000, isClosable: true });\n  };\n\n  const formatPersonName = (person: GeneratedPerson | null | undefined): string => {\n    if (!person) return '-';\n    return person.last_name && person.first_name ? `${person.last_name}, ${person.first_name}` : person.first_name || person.last_name || person.email || 'Unnamed Person';\n  };\n  const formatDate = (dateString: string | null | undefined) => dateString ? new Date(dateString).toLocaleDateString() : '-';\n  const formatCurrency = (amount: number | null | undefined) => amount != null ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount) : '-';\n\n  const TABLE_KEY = 'deals_list';\n\n  const allAvailableColumns = useMemo((): ColumnDefinition<Deal>[] => {\n    const standardColumns: ColumnDefinition<Deal>[] = [\n      { key: 'name', header: 'Name', renderCell: (d) => d.name, isSortable: true },\n      { key: 'person', header: 'Person', renderCell: (d) => formatPersonName(d.person as GeneratedPerson | null | undefined), isSortable: true, sortAccessor: (d) => formatPersonName(d.person as GeneratedPerson | null | undefined).toLowerCase() },\n      { key: 'organization', header: 'Organization', renderCell: (d) => d.organization?.name || '-', isSortable: true, sortAccessor: (d) => d.organization?.name?.toLowerCase() },\n      { key: 'stage', header: 'Stage / Pipeline', renderCell: (d) => (<VStack align=\"start\" spacing={0}><Text fontWeight=\"medium\">{d.stage?.name || '-'}</Text><Text fontSize=\"xs\" color=\"gray.500\">{d.stage?.pipeline?.name || 'N/A'}</Text></VStack>), isSortable: true, sortAccessor: (d) => d.stage?.name?.toLowerCase() ?? '' },\n      { key: 'amount', header: 'Amount', renderCell: (d) => formatCurrency(d.amount), isSortable: true, isNumeric: true, sortAccessor: (d) => d.amount },\n      { key: 'deal_specific_probability', header: 'Specific Prob. (%)', renderCell: (d) => d.deal_specific_probability != null ? `${Math.round(d.deal_specific_probability * 100)}%` : '-', isSortable: true, sortAccessor: (d) => d.deal_specific_probability },\n      { key: 'weighted_amount', header: 'Weighted Amount', renderCell: (d) => formatCurrency(d.weighted_amount), isSortable: true, isNumeric: true, sortAccessor: (d) => d.weighted_amount },\n      { key: 'expected_close_date', header: 'Expected Close', renderCell: (d) => formatDate(d.expected_close_date), isSortable: true, sortAccessor: (d) => d.expected_close_date ? new Date(d.expected_close_date).getTime() : 0 },\n      { key: 'created_at', header: 'Created', renderCell: (d) => formatDate(d.created_at), isSortable: true, sortAccessor: (d) => d.created_at ? new Date(d.created_at).getTime() : 0 },\n    ];\n\n    const customFieldColumns: ColumnDefinition<Deal>[] = dealCustomFieldDefinitions.map(def => ({\n      key: `cf_${def.fieldName}`,\n      header: def.fieldLabel,\n      isSortable: true, \n      sortAccessor: (deal: Deal) => {\n        const cfValue = deal.customFieldValues?.find(cf => cf.definition.fieldName === def.fieldName);\n        if (!cfValue) return '';\n        switch (def.fieldType) {\n          case 'TEXT': return cfValue.stringValue?.toLowerCase() || '';\n          case 'NUMBER': return cfValue.numberValue || 0;\n          case 'DATE': return cfValue.dateValue ? new Date(cfValue.dateValue).getTime() : 0;\n          case 'BOOLEAN': return cfValue.booleanValue ? 'true' : 'false';\n          default: return cfValue.stringValue?.toLowerCase() || '';\n        }\n      },\n      renderCell: (deal: Deal) => {\n        const cfValue = deal.customFieldValues?.find(cf => cf.definition.fieldName === def.fieldName);\n        if (!cfValue) return '-';\n        let displayValue: React.ReactNode = '-';\n        const { stringValue, numberValue, booleanValue, dateValue, selectedOptionValues } = cfValue;\n\n        switch (def.fieldType) {\n          case 'TEXT': \n            displayValue = stringValue || '-'; \n            if (stringValue && isUrl(stringValue)) {\n              displayValue = <a href={stringValue} target=\"_blank\" rel=\"noopener noreferrer\" style={{color: 'blue.500', textDecoration: 'underline'}}>{stringValue}</a>;\n            }\n            break;\n          case 'NUMBER': displayValue = numberValue?.toString() ?? '-'; break;\n          case 'DATE': displayValue = dateValue ? new Date(dateValue).toLocaleDateString() : '-'; break;\n          case 'BOOLEAN': displayValue = booleanValue ? 'Yes' : 'No'; break;\n          case 'DROPDOWN': \n            const optValD = stringValue; \n            const optD = def.dropdownOptions?.find(o => o.value === optValD); \n            displayValue = optD?.label || optValD || '-'; \n            break;\n          case 'MULTI_SELECT': \n            const sVals = selectedOptionValues || []; \n            displayValue = sVals.map(v => def.dropdownOptions?.find(o => o.value === v)?.label || v).join(', ') || '-'; \n            break;\n          default: displayValue = stringValue || '-';\n        }\n        return displayValue;\n      },\n    }));\n\n    const actionsColumn: ColumnDefinition<Deal> = {\n      key: 'actions',\n      header: 'Actions',\n      renderCell: (deal) => (\n        <HStack spacing={2}>\n          <IconButton as={Link} to={`/deals/${deal.id}`} aria-label=\"View deal\" icon={<ViewIcon />} size=\"sm\" variant=\"ghost\" />\n          <IconButton \n            aria-label=\"Edit deal\" \n            icon={<EditIcon />} \n            size=\"sm\" \n            variant=\"ghost\" \n            onClick={() => handleEditClick(deal)} \n            isDisabled={\n              !!deletingRowId ||\n              !(userPermissions?.includes('deal:update_any') || (userPermissions?.includes('deal:update_own') && deal.user_id === currentUserId))\n            } \n          />\n          <IconButton \n            aria-label=\"Delete deal\" \n            icon={<DeleteIcon />} \n            colorScheme=\"red\" \n            size=\"sm\" \n            variant=\"ghost\" \n            onClick={() => handleDeleteClick(deal.id)} \n            isLoading={deletingRowId === deal.id}\n            isDisabled={\n              (!!deletingRowId && deletingRowId !== deal.id) ||\n              !(userPermissions?.includes('deal:delete_any') || (userPermissions?.includes('deal:delete_own') && deal.user_id === currentUserId))\n            } \n          />\n        </HStack>\n      ),\n      isSortable: false,\n    };\n    return [...standardColumns, ...customFieldColumns, actionsColumn];\n  }, [dealCustomFieldDefinitions, userPermissions, currentUserId, deletingRowId, handleEditClick, handleDeleteClick]);\n\n  const defaultVisibleColumnKeys = useMemo(() => [\n    'name', 'person', 'organization', 'stage', 'amount', 'expected_close_date', 'actions'\n  ], []);\n\n  useEffect(() => {\n    if (allAvailableColumns.length > 0 && !customFieldsLoading) {\n        initializeTable(TABLE_KEY, defaultVisibleColumnKeys);\n    }\n  }, [initializeTable, defaultVisibleColumnKeys, allAvailableColumns, customFieldsLoading]);\n\n  const currentVisibleColumnKeys = tableColumnPreferences[TABLE_KEY]?.visibleColumnKeys || defaultVisibleColumnKeys;\n  \n  const visibleColumns = useMemo(() => {\n    if (customFieldsLoading || allAvailableColumns.length === 0) return [];\n    // Ensure that currentVisibleColumnKeys refers to existing columns in allAvailableColumns to prevent errors\n    const availableKeysSet = new Set(allAvailableColumns.map(col => String(col.key)));\n    const validVisibleKeys = currentVisibleColumnKeys.filter(key => availableKeysSet.has(key));\n    \n    const finalKeysToShow = validVisibleKeys.length > 0 \n        ? validVisibleKeys \n        : defaultVisibleColumnKeys.filter(key => availableKeysSet.has(key));\n\n    return allAvailableColumns.filter(col => finalKeysToShow.includes(String(col.key)));\n  }, [allAvailableColumns, currentVisibleColumnKeys, customFieldsLoading, defaultVisibleColumnKeys]);\n\n  const emptyStatePropsForLayout = { \n    icon: ViewIcon, // Consider a more specific icon for Deals\n    title: \"No Deals Found\", \n    message: \"Get started by creating your first deal or try a different filter.\",\n    // actionButtonLabel etc. are handled by ListPageLayout\n  };\n  \n  const pageIsLoading = dealsLoading || customFieldsLoading;\n\n  const displayedDeals = useMemo(() => {\n    let filtered = deals;\n    if (activeQuickFilterKey && activeQuickFilterKey !== 'all') {\n      filtered = deals.filter(deal => {\n        switch (activeQuickFilterKey) {\n          case 'myOpen':\n            return deal.user_id === currentUserId && deal.stage?.stage_type === 'OPEN' as StageType;\n          case 'closingThisMonth': {\n            if (!deal.expected_close_date) return false;\n            const closeDate = new Date(deal.expected_close_date);\n            const today = new Date();\n            return closeDate.getFullYear() === today.getFullYear() && closeDate.getMonth() === today.getMonth();\n          }\n          default:\n            return true;\n        }\n      });\n    }\n    return filtered;\n  }, [deals, activeQuickFilterKey, currentUserId]);\n\n  // For List View\n  const listPageContent = (\n    <ListPageLayout\n      title=\"Deals\"\n      newButtonLabel=\"New Deal\"\n      onNewButtonClick={handleCreateDealClick}\n      isNewButtonDisabled={!userPermissions?.includes('deal:create')}\n      isLoading={pageIsLoading}\n      error={dealsError}\n      isEmpty={!pageIsLoading && !dealsError && displayedDeals.length === 0}\n      emptyStateProps={emptyStatePropsForLayout} // Use the simplified props\n      customControls={\n        <HStack spacing={2} my={2}>\n          <ButtonGroup size=\"sm\" isAttached variant=\"outline\">\n            <Button onClick={() => setDealsViewMode('table')} isActive={dealsViewMode === 'table'}>Table</Button>\n            <Button onClick={() => setDealsViewMode('kanban')} isActive={dealsViewMode === 'kanban'}>Kanban</Button>\n          </ButtonGroup>\n          <QuickFilterControls\n            availableFilters={availableQuickFilters}\n            activeFilterKey={activeQuickFilterKey}\n            onSelectFilter={setActiveQuickFilterKey}\n          />\n          <Button leftIcon={<SettingsIcon />} onClick={onColumnSelectorOpen} size=\"sm\" variant=\"outline\">\n            Columns\n          </Button>\n        </HStack>\n      }\n    >\n      {!pageIsLoading && !dealsError && displayedDeals.length > 0 && (\n        <SortableTable<Deal> \n          data={displayedDeals} \n          columns={visibleColumns} \n          initialSortKey=\"expected_close_date\" \n          initialSortDirection=\"ascending\" \n        />\n      )}\n    </ListPageLayout>\n  );\n\n  // For Kanban View\n  const kanbanPageContent = (\n    <VStack spacing={4} align=\"stretch\" w=\"100%\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb={0} mt={2} px={6}>\n        <Heading as=\"h2\" size=\"lg\">\n          Deals\n        </Heading>\n        <HStack spacing={2}>\n         <ButtonGroup size=\"sm\" isAttached variant=\"outline\">\n            <Button onClick={() => setDealsViewMode('table')} isActive={dealsViewMode === 'table'}>Table</Button>\n            <Button onClick={() => setDealsViewMode('kanban')} isActive={dealsViewMode === 'kanban'}>Kanban</Button>\n          </ButtonGroup>\n          <QuickFilterControls\n            availableFilters={availableQuickFilters}\n            activeFilterKey={activeQuickFilterKey}\n            onSelectFilter={setActiveQuickFilterKey}\n          />\n          <Button \n            colorScheme=\"blue\"\n            onClick={handleCreateDealClick}\n            isDisabled={!userPermissions?.includes('deal:create')}\n            size=\"md\"\n          >\n            New Deal\n          </Button>\n        </HStack>\n      </Flex>\n      {pageIsLoading && (\n        <Flex justify=\"center\" align=\"center\" minH=\"200px\"><Spinner size=\"xl\" /></Flex>\n      )}\n      {!pageIsLoading && dealsError && (\n        <Alert status=\"error\" mx={6}><AlertIcon />{dealsError}</Alert>\n      )}\n      {!pageIsLoading && !dealsError && displayedDeals.length === 0 && (\n        <Box mx={6}>\n          <EmptyState \n            icon={ViewIcon} \n            title=\"No Deals Found\" \n            message=\"Get started by creating your first deal or try a different filter.\" \n            actionButtonLabel=\"New Deal\"\n            onActionButtonClick={handleCreateDealClick}\n            isActionButtonDisabled={!userPermissions?.includes('deal:create')}\n          />\n        </Box>\n      )}\n      {!pageIsLoading && !dealsError && displayedDeals.length > 0 && (\n        <DealsKanbanView />\n      )}\n    </VStack>\n  );\n\n  return (\n    <Box w=\"100%\">\n      {dealsViewMode === 'table' ? listPageContent : kanbanPageContent}\n      {/* Modals and Dialogs are siblings to the view content */}\n      <CreateDealModal isOpen={isCreateModalOpen} onClose={onCreateModalClose} onDealCreated={handleDataChanged} />\n      {isEditModalOpen && dealToEdit && <EditDealModal deal={dealToEdit} isOpen={isEditModalOpen} onClose={onEditModalClose} onDealUpdated={handleDataChanged} />}\n      <ConfirmationDialog isOpen={isConfirmDeleteDialogOpen} onClose={onConfirmDeleteClose} onConfirm={handleConfirmDelete} headerText=\"Delete Deal\" bodyText=\"Are you sure you want to delete this deal?\" confirmButtonText=\"Delete\" confirmButtonColorScheme=\"red\" />\n      \n      {isColumnSelectorOpen && allAvailableColumns.length > 0 && dealsViewMode === 'table' && (\n        <ColumnSelector<Deal>\n          isOpen={isColumnSelectorOpen}\n          onClose={onColumnSelectorClose}\n          allAvailableColumns={allAvailableColumns}\n          currentVisibleColumnKeys={currentVisibleColumnKeys}\n          defaultVisibleColumnKeys={defaultVisibleColumnKeys}\n          onApply={(newKeys) => setVisibleColumnKeys(TABLE_KEY, newKeys)}\n          onReset={() => resetTableToDefaults(TABLE_KEY, defaultVisibleColumnKeys)}\n        />\n      )}\n    </Box>\n  );\n}\n\nexport default DealsPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/pages/OrganizationsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Box' is defined but never used.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Heading' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertIcon' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VStack' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Flex' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CustomFieldValue' is defined but never used.","line":23,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GQLCustomFieldType' is defined but never used.","line":23,"column":75,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":93},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":37,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":13},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":88,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":88,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3592,3592],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3592,3592],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":104,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":104,"endColumn":28,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4269,4269],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4269,4269],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleEditClick' function makes the dependencies of useMemo Hook (at line 184) change on every render. Move it inside the useMemo callback. Alternatively, wrap the definition of 'handleEditClick' in its own useCallback() Hook.","line":110,"column":9,"nodeType":"VariableDeclarator","endLine":110,"endColumn":91},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleDeleteClick' function makes the dependencies of useMemo Hook (at line 184) change on every render. Move it inside the useMemo callback. Alternatively, wrap the definition of 'handleDeleteClick' in its own useCallback() Hook.","line":111,"column":9,"nodeType":"VariableDeclarator","endLine":111,"endColumn":99},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":147,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":147,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":148,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":148,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":149,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":149,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":150,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":150,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":160,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":160,"endColumn":259},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":161,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":161,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":162,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":162,"endColumn":105},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":163,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":163,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":164,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":164,"endColumn":170},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":164,"column":28,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":164,"endColumn":55,"suggestions":[{"messageId":"addBrackets","fix":{"range":[7944,8086],"text":"{ const optVal = stringValue; const opt = def.dropdownOptions?.find(o => o.value === optVal); displayValue = opt?.label || optVal || '-'; break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":164,"column":56,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":164,"endColumn":119,"suggestions":[{"messageId":"addBrackets","fix":{"range":[7944,8086],"text":"{ const optVal = stringValue; const opt = def.dropdownOptions?.find(o => o.value === optVal); displayValue = opt?.label || optVal || '-'; break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":165,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":165,"endColumn":192},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":165,"column":32,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":165,"endColumn":75,"suggestions":[{"messageId":"addBrackets","fix":{"range":[8118,8278],"text":"{ const selVals = selectedOptionValues || []; displayValue = selVals.map(v => def.dropdownOptions?.find(o => o.value === v)?.label || v).join(', ') || '-'; break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":220,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":220,"endColumn":45,"suggestions":[{"messageId":"addBrackets","fix":{"range":[11033,11234],"text":"{ if (!org.created_at) return false;\n            const sevenDaysAgo = new Date();\n            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n            return new Date(org.created_at) > sevenDaysAgo; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":276,"column":110,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":276,"endColumn":129},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":282,"column":42,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":282,"endColumn":62,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[13556,13556],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[13556,13556],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":288,"column":19,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":288,"endColumn":40}],"suppressedMessages":[],"errorCount":29,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState, useCallback, useMemo } from 'react';\nimport {\n  Box,\n  Heading,\n  Button,\n  Text,\n  Spinner,\n  Alert,\n  AlertIcon,\n  IconButton,\n  HStack,\n  useToast,\n  useDisclosure,\n  VStack,\n  Flex,\n} from '@chakra-ui/react';\nimport CreateOrganizationModal from '../components/CreateOrganizationModal';\nimport EditOrganizationModal from '../components/EditOrganizationModal';\nimport { EditIcon, DeleteIcon, ViewIcon, SettingsIcon } from '@chakra-ui/icons';\nimport { useAppStore } from '../stores/useAppStore';\nimport { useOrganizationsStore, Organization } from '../stores/useOrganizationsStore';\nimport { useViewPreferencesStore } from '../stores/useViewPreferencesStore';\nimport type { CustomFieldDefinition, CustomFieldValue, CustomFieldType as GQLCustomFieldType } from '../generated/graphql/graphql';\nimport { gqlClient } from '../lib/graphqlClient';\nimport { gql } from 'graphql-request';\nimport ConfirmationDialog from '../components/common/ConfirmationDialog';\nimport ListPageLayout from '../components/layout/ListPageLayout';\nimport SortableTable, { ColumnDefinition } from '../components/common/SortableTable';\nimport ColumnSelector from '../components/common/ColumnSelector';\nimport QuickFilterControls, { QuickFilter } from '../components/common/QuickFilterControls';\n\n// Helper to check if a string is a URL (basic version)\nconst isUrl = (str: string): boolean => {\n  try {\n    new URL(str);\n    return str.startsWith('http://') || str.startsWith('https://');\n  } catch (_) {\n    return false;\n  }\n};\n\nconst GET_ORG_CUSTOM_FIELD_DEFS_QUERY = gql`\n  query GetOrganizationCustomFieldDefinitions {\n    customFieldDefinitions(entityType: ORGANIZATION, includeInactive: false) {\n      id\n      fieldName\n      fieldLabel\n      fieldType\n      dropdownOptions { value label }\n    }\n  }\n`;\n\nfunction OrganizationsPage() {\n  const { organizations, organizationsLoading, organizationsError, fetchOrganizations, deleteOrganization: deleteOrganizationAction } = useOrganizationsStore();\n  const userPermissions = useAppStore((state) => state.userPermissions);\n  const { \n    tableColumnPreferences, \n    initializeTable, \n    setVisibleColumnKeys,\n    resetTableToDefaults \n  } = useViewPreferencesStore();\n\n  const { isOpen: isCreateModalOpen, onOpen: onCreateModalOpen, onClose: onCreateModalClose } = useDisclosure();\n  const { isOpen: isEditModalOpen, onOpen: onEditModalOpen, onClose: onEditModalClose } = useDisclosure();\n  const { isOpen: isConfirmDeleteDialogOpen, onOpen: onConfirmDeleteOpen, onClose: onConfirmDeleteClose } = useDisclosure();\n  const { isOpen: isColumnSelectorOpen, onOpen: onColumnSelectorOpen, onClose: onColumnSelectorClose } = useDisclosure();\n  \n  const [orgToEdit, setOrgToEdit] = useState<Organization | null>(null);\n  const [deletingRowId, setDeletingRowId] = useState<string | null>(null);\n  const [orgToDeleteId, setOrgToDeleteId] = useState<string | null>(null);\n  const toast = useToast();\n\n  const [orgCustomFieldDefinitions, setOrgCustomFieldDefinitions] = useState<CustomFieldDefinition[]>([]);\n  const [customFieldsLoading, setCustomFieldsLoading] = useState<boolean>(true);\n\n  const [activeQuickFilterKey, setActiveQuickFilterKey] = useState<string | null>(null);\n\n  // Define Quick Filters for Organizations\n  const availableQuickFilters = useMemo((): QuickFilter[] => [\n    { key: 'all', label: 'All Organizations' },\n    { key: 'recent', label: 'Recently Added' }, // Last 7 days, client-side\n    { key: 'noPeople', label: 'Without People' },\n    { key: 'noDeals', label: 'Without Deals' },\n  ], []);\n\n  useEffect(() => {\n    fetchOrganizations();\n  }, [fetchOrganizations]);\n\n  useEffect(() => {\n    const fetchCustomFieldDefs = async () => {\n      setCustomFieldsLoading(true);\n      try {\n        const data = await gqlClient.request<{ customFieldDefinitions: CustomFieldDefinition[] }>(GET_ORG_CUSTOM_FIELD_DEFS_QUERY);\n        setOrgCustomFieldDefinitions(data.customFieldDefinitions || []);\n      } catch (error) {\n        console.error(\"Error fetching organization custom field definitions:\", error);\n        toast({ title: 'Error loading custom field definitions', status: 'error', duration: 3000, isClosable: true });\n      } finally {\n        setCustomFieldsLoading(false);\n      }\n    };\n    fetchCustomFieldDefs();\n  }, [toast]);\n\n  const handleCreateOrgClick = () => onCreateModalOpen();\n  const handleDataChanged = useCallback(() => fetchOrganizations(), [fetchOrganizations]);\n\n  const handleEditClick = (org: Organization) => { setOrgToEdit(org); onEditModalOpen(); };\n  const handleDeleteClick = (orgId: string) => { setOrgToDeleteId(orgId); onConfirmDeleteOpen(); };\n\n  const handleConfirmDelete = async () => {\n    if (!orgToDeleteId) return;\n    setDeletingRowId(orgToDeleteId);\n    const success = await deleteOrganizationAction(orgToDeleteId);\n    setDeletingRowId(null);\n    onConfirmDeleteClose();\n    if (success) {\n      toast({ title: 'Organization deleted.', status: 'success', duration: 3000, isClosable: true });\n      setOrgToDeleteId(null);\n    } else {\n      toast({ title: 'Error Deleting Organization', description: organizationsError || 'An unknown error occurred', status: 'error', duration: 5000, isClosable: true });\n    }\n  };\n\n  const formatDate = (dateString: string | null | undefined) => dateString ? new Date(dateString).toLocaleDateString() : '-';\n\n  const TABLE_KEY = 'organizations_list';\n\n  const allAvailableColumns = useMemo((): ColumnDefinition<Organization>[] => {\n    const standardColumns: ColumnDefinition<Organization>[] = [\n      { key: 'name', header: 'Name', renderCell: (org) => org.name, isSortable: true },\n      { key: 'address', header: 'Address', renderCell: (org) => org.address || '-', isSortable: true, sortAccessor: (org) => org.address?.toLowerCase() ?? '' },\n      { key: 'notes', header: 'Notes', renderCell: (org) => (<Text maxW=\"200px\" whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">{org.notes || '-'}</Text>), isSortable: true, sortAccessor: (org) => org.notes?.toLowerCase() ?? '' },\n      { key: 'created_at', header: 'Created', renderCell: (org) => formatDate(org.created_at), isSortable: true, sortAccessor: (org) => org.created_at ? new Date(org.created_at).getTime() : 0 },\n    ];\n\n    const customFieldColumns: ColumnDefinition<Organization>[] = orgCustomFieldDefinitions.map(def => ({\n      key: `cf_${def.fieldName}`,\n      header: def.fieldLabel,\n      isSortable: true,\n      sortAccessor: (org: Organization) => {\n        const cfValue = org.customFieldValues?.find(cf => cf.definition.fieldName === def.fieldName);\n        if (!cfValue) return '';\n        switch (def.fieldType) {\n          case 'TEXT': return cfValue.stringValue?.toLowerCase() || '';\n          case 'NUMBER': return cfValue.numberValue || 0;\n          case 'DATE': return cfValue.dateValue ? new Date(cfValue.dateValue).getTime() : 0;\n          case 'BOOLEAN': return cfValue.booleanValue ? 'true' : 'false';\n          default: return cfValue.stringValue?.toLowerCase() || '';\n        }\n      },\n      renderCell: (org: Organization) => {\n        const cfValue = org.customFieldValues?.find(cf => cf.definition.fieldName === def.fieldName);\n        if (!cfValue) return '-';\n        let displayValue: React.ReactNode = '-';\n        const { stringValue, numberValue, booleanValue, dateValue, selectedOptionValues } = cfValue;\n        switch (def.fieldType) {\n          case 'TEXT': displayValue = stringValue || '-'; if (stringValue && isUrl(stringValue)) displayValue = <a href={stringValue} target=\"_blank\" rel=\"noopener noreferrer\" style={{color: 'blue.500', textDecoration: 'underline'}}>{stringValue}</a>; break;\n          case 'NUMBER': displayValue = numberValue?.toString() ?? '-'; break;\n          case 'DATE': displayValue = dateValue ? new Date(dateValue).toLocaleDateString() : '-'; break;\n          case 'BOOLEAN': displayValue = booleanValue ? 'Yes' : 'No'; break;\n          case 'DROPDOWN': const optVal = stringValue; const opt = def.dropdownOptions?.find(o => o.value === optVal); displayValue = opt?.label || optVal || '-'; break;\n          case 'MULTI_SELECT': const selVals = selectedOptionValues || []; displayValue = selVals.map(v => def.dropdownOptions?.find(o => o.value === v)?.label || v).join(', ') || '-'; break;\n          default: displayValue = stringValue || '-';\n        }\n        return displayValue;\n      },\n    }));\n\n    const actionsColumn: ColumnDefinition<Organization> = {\n      key: 'actions',\n      header: 'Actions',\n      renderCell: (org) => (\n        <HStack spacing={2}>\n          <IconButton aria-label=\"Edit organization\" icon={<EditIcon />} size=\"sm\" variant=\"ghost\" onClick={() => handleEditClick(org)} isDisabled={!!deletingRowId || !userPermissions?.includes('organization:update_any')} />\n          <IconButton aria-label=\"Delete organization\" icon={<DeleteIcon />} size=\"sm\" colorScheme=\"red\" variant=\"ghost\" onClick={() => handleDeleteClick(org.id)} isLoading={deletingRowId === org.id} isDisabled={(!!deletingRowId && deletingRowId !== org.id) || !userPermissions?.includes('organization:delete_any')} />\n        </HStack>\n      ),\n      isSortable: false,\n    };\n    return [...standardColumns, ...customFieldColumns, actionsColumn];\n  }, [orgCustomFieldDefinitions, userPermissions, deletingRowId, handleEditClick, handleDeleteClick]);\n\n  const defaultVisibleColumnKeys = useMemo(() => [\n    'name', 'address', 'notes', 'created_at', 'actions'\n  ], []);\n\n  useEffect(() => {\n    if (allAvailableColumns.length > 0 && !customFieldsLoading) {\n        initializeTable(TABLE_KEY, defaultVisibleColumnKeys);\n    }\n  }, [initializeTable, defaultVisibleColumnKeys, allAvailableColumns, customFieldsLoading]);\n\n  const currentVisibleColumnKeys = tableColumnPreferences[TABLE_KEY]?.visibleColumnKeys || defaultVisibleColumnKeys;\n  \n  const visibleColumns = useMemo(() => {\n    if (customFieldsLoading || allAvailableColumns.length === 0) return [];\n    // Ensure that currentVisibleColumnKeys refers to existing columns in allAvailableColumns to prevent errors\n    const availableKeysSet = new Set(allAvailableColumns.map(col => String(col.key)));\n    const validVisibleKeys = currentVisibleColumnKeys.filter(key => availableKeysSet.has(key));\n    \n    // If, after filtering, no valid keys remain (e.g., due to custom fields loading/unloading),\n    // fall back to default keys that are currently available.\n    const finalKeysToShow = validVisibleKeys.length > 0 \n        ? validVisibleKeys \n        : defaultVisibleColumnKeys.filter(key => availableKeysSet.has(key));\n\n    return allAvailableColumns.filter(col => finalKeysToShow.includes(String(col.key)));\n  }, [allAvailableColumns, currentVisibleColumnKeys, customFieldsLoading, defaultVisibleColumnKeys]);\n\n  const displayedOrganizations = useMemo(() => {\n    let filteredOrgs = organizations;\n    if (activeQuickFilterKey && activeQuickFilterKey !== 'all') {\n      filteredOrgs = organizations.filter(org => {\n        switch (activeQuickFilterKey) {\n          case 'recent':\n            if (!org.created_at) return false;\n            const sevenDaysAgo = new Date();\n            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n            return new Date(org.created_at) > sevenDaysAgo;\n          case 'noPeople':\n            return !org.people || org.people.length === 0;\n          case 'noDeals':\n            return !org.deals || org.deals.length === 0;\n          default:\n            return true;\n        }\n      });\n    }\n    return filteredOrgs;\n  }, [organizations, activeQuickFilterKey]);\n\n  const emptyStatePropsForLayout = {\n    icon: ViewIcon, // Or a more specific icon for Organizations\n    title: \"No Organizations Found\",\n    message: \"Get started by adding your first organization or try a different filter.\",\n    // actionButtonLabel, onActionButtonClick, isActionButtonDisabled are handled by ListPageLayout directly\n  };\n  \n  const pageIsLoading = organizationsLoading || customFieldsLoading;\n\n  return (\n    <ListPageLayout\n      title=\"Organizations\"\n      newButtonLabel=\"New Organization\"\n      onNewButtonClick={handleCreateOrgClick}\n      isNewButtonDisabled={!userPermissions?.includes('organization:create')}\n      isLoading={pageIsLoading}\n      error={organizationsError}\n      isEmpty={!pageIsLoading && !organizationsError && displayedOrganizations.length === 0}\n      emptyStateProps={emptyStatePropsForLayout} // Use the simplified props\n      customControls={\n        <HStack spacing={4} my={2}>\n          <QuickFilterControls\n            availableFilters={availableQuickFilters}\n            activeFilterKey={activeQuickFilterKey}\n            onSelectFilter={setActiveQuickFilterKey}\n          />\n          <Button leftIcon={<SettingsIcon />} onClick={onColumnSelectorOpen} size=\"sm\" variant=\"outline\">\n            Columns\n          </Button>\n        </HStack>\n      }\n    >\n      {!pageIsLoading && !organizationsError && displayedOrganizations.length > 0 && (\n        <SortableTable<Organization> \n          data={displayedOrganizations} \n          columns={visibleColumns} \n          initialSortKey=\"name\" \n          initialSortDirection=\"ascending\" // Added to match other tables\n        />\n      )}\n\n      <CreateOrganizationModal isOpen={isCreateModalOpen} onClose={onCreateModalClose} onOrganizationCreated={handleDataChanged} />\n      {orgToEdit && (\n        <EditOrganizationModal \n          organization={orgToEdit} \n          isOpen={isEditModalOpen} \n          onClose={() => { onEditModalClose(); setOrgToEdit(null); }} \n          onOrganizationUpdated={() => { handleDataChanged(); onEditModalClose(); setOrgToEdit(null); }} \n        />\n      )}\n      <ConfirmationDialog \n        isOpen={isConfirmDeleteDialogOpen}\n        onClose={onConfirmDeleteClose}\n        onConfirm={handleConfirmDelete}\n        headerText=\"Delete Organization\"\n        bodyText=\"Are you sure you want to delete this organization? Associated people will have their organization link removed. This action cannot be undone.\"\n        confirmButtonText=\"Delete\"\n        confirmButtonColorScheme=\"red\"\n        isLoading={!!deletingRowId}\n      />\n      {isColumnSelectorOpen && allAvailableColumns.length > 0 && (\n        <ColumnSelector<Organization>\n          isOpen={isColumnSelectorOpen}\n          onClose={onColumnSelectorClose}\n          allAvailableColumns={allAvailableColumns}\n          currentVisibleColumnKeys={currentVisibleColumnKeys}\n          defaultVisibleColumnKeys={defaultVisibleColumnKeys}\n          onApply={(newKeys) => setVisibleColumnKeys(TABLE_KEY, newKeys)}\n          onReset={() => resetTableToDefaults(TABLE_KEY, defaultVisibleColumnKeys)}\n        />\n      )}\n    </ListPageLayout>\n  );\n}\n\nexport default OrganizationsPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/pages/PeoplePage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Box' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CustomFieldValue' is defined but never used.","line":21,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CustomFieldEntityType' is defined but never used.","line":21,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":77},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GQLCustomFieldType' is defined but never used.","line":21,"column":98,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":116},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":37,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":13},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":86,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":86,"endColumn":19,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3286,3286],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3286,3286],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":102,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":102,"endColumn":28,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3931,3931],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3931,3931],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":153,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":153,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":154,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":154,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":155,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":155,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":156,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":156,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":166,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":171,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":172,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":174,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":175,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":177,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":178,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":180,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":181,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":185,"endColumn":19},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":182,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":182,"endColumn":56,"suggestions":[{"messageId":"addBrackets","fix":{"range":[7135,7365],"text":"{ const selectedOptVal = cfValue.stringValue;\n            const selectedOpt = def.dropdownOptions?.find(opt => opt.value === selectedOptVal);\n            displayValue = selectedOpt?.label || selectedOptVal || '-';\n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":183,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":183,"endColumn":96,"suggestions":[{"messageId":"addBrackets","fix":{"range":[7135,7365],"text":"{ const selectedOptVal = cfValue.stringValue;\n            const selectedOpt = def.dropdownOptions?.find(opt => opt.value === selectedOptVal);\n            displayValue = selectedOpt?.label || selectedOptVal || '-';\n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The case statement does not have a shared enum type with the switch predicate.","line":186,"column":11,"nodeType":"SwitchCase","messageId":"mismatchedCase","endLine":189,"endColumn":19},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":187,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":187,"endColumn":69,"suggestions":[{"messageId":"addBrackets","fix":{"range":[7409,7621],"text":"{ const selectedVals = cfValue.selectedOptionValues || [];\n            displayValue = selectedVals.map(val => def.dropdownOptions?.find(opt => opt.value === val)?.label || val).join(', ') || '-';\n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'handleDeleteClick' and 'handleEditClick'. Either include them or remove the dependency array.","line":224,"column":6,"nodeType":"ArrayExpression","endLine":224,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [handleDeleteClick, handleEditClick, personCustomFieldDefinitions, userPermissions]","fix":{"range":[8740,8787],"text":"[handleDeleteClick, handleEditClick, personCustomFieldDefinitions, userPermissions]"}}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":358,"column":17,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":358,"endColumn":38}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useMemo } from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n  useToast,\n  HStack,\n  IconButton,\n  Spinner,\n  Box,\n  Button\n} from '@chakra-ui/react';\nimport { AddIcon, EditIcon, DeleteIcon, SettingsIcon } from '@chakra-ui/icons';\nimport { usePeopleStore, Person } from '../stores/usePeopleStore';\nimport { useAppStore } from '../stores/useAppStore';\nimport { useViewPreferencesStore } from '../stores/useViewPreferencesStore';\nimport type { CustomFieldDefinition, CustomFieldValue, CustomFieldEntityType, CustomFieldType as GQLCustomFieldType } from '../generated/graphql/graphql';\nimport { gqlClient } from '../lib/graphqlClient';\nimport { gql } from 'graphql-request';\n\nimport CreatePersonForm from '../components/CreatePersonForm';\nimport EditPersonForm from '../components/EditPersonForm';\nimport ConfirmationDialog from '../components/common/ConfirmationDialog';\nimport ListPageLayout from '../components/layout/ListPageLayout';\nimport SortableTable, { ColumnDefinition } from '../components/common/SortableTable';\nimport ColumnSelector from '../components/common/ColumnSelector';\nimport QuickFilterControls, { QuickFilter } from '../components/common/QuickFilterControls';\n\nconst isUrl = (str: string): boolean => {\n  try {\n    new URL(str);\n    return str.startsWith('http://') || str.startsWith('https://');\n  } catch (_) {\n    return false;\n  }\n};\n\nconst GET_PERSON_CUSTOM_FIELD_DEFS_QUERY = gql`\n  query GetPersonCustomFieldDefinitions {\n    customFieldDefinitions(entityType: PERSON, includeInactive: false) {\n      id\n      fieldName\n      fieldLabel\n      fieldType\n      dropdownOptions { value label }\n    }\n  }\n`;\n\nfunction PeoplePage() {\n  const { people, peopleLoading, peopleError, fetchPeople, deletePerson } = usePeopleStore();\n  const { userPermissions } = useAppStore();\n  const { \n    tableColumnPreferences, \n    initializeTable, \n    setVisibleColumnKeys,\n    resetTableToDefaults\n  } = useViewPreferencesStore();\n\n  const { isOpen: isCreateOpen, onOpen: onCreateOpen, onClose: onCreateClose } = useDisclosure();\n  const [personToEdit, setPersonToEdit] = useState<Person | null>(null);\n  const { isOpen: isEditOpen, onOpen: onEditOpen, onClose: onEditClose } = useDisclosure();\n  const { isOpen: isConfirmDeleteDialogOpen, onOpen: onConfirmDeleteOpen, onClose: onConfirmDeleteClose } = useDisclosure();\n  const [personIdToDelete, setPersonIdToDelete] = useState<string | null>(null);\n  const toast = useToast();\n\n  const [personCustomFieldDefinitions, setPersonCustomFieldDefinitions] = useState<CustomFieldDefinition[]>([]);\n  const [customFieldsLoading, setCustomFieldsLoading] = useState<boolean>(true);\n  const { isOpen: isColumnSelectorOpen, onOpen: onColumnSelectorOpen, onClose: onColumnSelectorClose } = useDisclosure();\n\n  const [activeQuickFilterKey, setActiveQuickFilterKey] = useState<string | null>(null);\n\n  // Define Quick Filters for People\n  const availableQuickFilters = useMemo((): QuickFilter[] => [\n    { key: 'all', label: 'All People' },\n    { key: 'noOrg', label: 'Without Organization' },\n    { key: 'withEmail', label: 'With Email' },\n    { key: 'noPhone', label: 'Without Phone' },\n  ], []);\n\n  useEffect(() => {\n    fetchPeople();\n  }, [fetchPeople]);\n\n  useEffect(() => {\n    const fetchCustomFieldDefs = async () => {\n      setCustomFieldsLoading(true);\n      try {\n        const data = await gqlClient.request<{ customFieldDefinitions: CustomFieldDefinition[] }>(GET_PERSON_CUSTOM_FIELD_DEFS_QUERY);\n        setPersonCustomFieldDefinitions(data.customFieldDefinitions || []);\n      } catch (error) {\n        console.error(\"Error fetching person custom field definitions:\", error);\n        toast({ title: 'Error loading custom field definitions', status: 'error', duration: 3000 });\n      } finally {\n        setCustomFieldsLoading(false);\n      }\n    };\n    fetchCustomFieldDefs();\n  }, [toast]);\n\n  const TABLE_KEY = 'people_list';\n\n  const allAvailableColumns = useMemo((): ColumnDefinition<Person>[] => {\n    const standardColumns: ColumnDefinition<Person>[] = [\n      { \n        key: 'name', \n        header: 'Name', \n        renderCell: (person) => `${person.first_name || ''} ${person.last_name || ''}`.trim() || '-', \n        isSortable: true, \n        sortAccessor: (p) => `${p.first_name || ''} ${p.last_name || ''}`.toLowerCase().trim()\n      },\n      { \n        key: 'email', \n        header: 'Email', \n        renderCell: (person) => person.email || '-', \n        isSortable: true, \n        sortAccessor: (p) => p.email?.toLowerCase() \n      },\n      { \n        key: 'phone', \n        header: 'Phone', \n        renderCell: (person) => person.phone || '-', \n        isSortable: false \n      },\n      { \n        key: 'organization', \n        header: 'Organization', \n        renderCell: (person) => person.organization?.name || '-', \n        isSortable: true, \n        sortAccessor: (p) => p.organization?.name?.toLowerCase() \n      },\n      {\n        key: 'created_at',\n        header: 'Created At',\n        renderCell: (person) => person.created_at ? new Date(person.created_at).toLocaleDateString() : '-',\n        isSortable: true,\n        sortAccessor: (p) => p.created_at ? new Date(p.created_at).getTime() : 0,\n      },\n    ];\n\n    const customFieldColumns: ColumnDefinition<Person>[] = personCustomFieldDefinitions.map(def => ({\n      key: `cf_${def.fieldName}`,\n      header: def.fieldLabel,\n      isSortable: true,\n      sortAccessor: (person: Person) => {\n        const cfValue = person.customFieldValues?.find(cf => cf.definition.fieldName === def.fieldName);\n        if (!cfValue) return '';\n        switch (def.fieldType) {\n          case 'TEXT': return cfValue.stringValue?.toLowerCase() || '';\n          case 'NUMBER': return cfValue.numberValue || 0;\n          case 'DATE': return cfValue.dateValue ? new Date(cfValue.dateValue).getTime() : 0;\n          case 'BOOLEAN': return cfValue.booleanValue ? 'true' : 'false';\n          default: return cfValue.stringValue?.toLowerCase() || '';\n        }\n      },\n      renderCell: (person: Person) => {\n        const cfValue = person.customFieldValues?.find(cf => cf.definition.fieldName === def.fieldName);\n        if (!cfValue) return '-';\n\n        let displayValue: React.ReactNode = '-';\n        switch (def.fieldType) {\n          case 'TEXT':\n            displayValue = cfValue.stringValue || '-';\n            if (cfValue.stringValue && isUrl(cfValue.stringValue)) {\n              displayValue = <a href={cfValue.stringValue} target=\"_blank\" rel=\"noopener noreferrer\" style={{color: 'blue.500', textDecoration: 'underline'}}>{cfValue.stringValue}</a>;\n            }\n            break;\n          case 'NUMBER':\n            displayValue = cfValue.numberValue?.toString() ?? '-';\n            break;\n          case 'DATE':\n            displayValue = cfValue.dateValue ? new Date(cfValue.dateValue).toLocaleDateString() : '-';\n            break;\n          case 'BOOLEAN':\n            displayValue = cfValue.booleanValue ? 'Yes' : 'No';\n            break;\n          case 'DROPDOWN':\n            const selectedOptVal = cfValue.stringValue;\n            const selectedOpt = def.dropdownOptions?.find(opt => opt.value === selectedOptVal);\n            displayValue = selectedOpt?.label || selectedOptVal || '-';\n            break;\n          case 'MULTI_SELECT':\n            const selectedVals = cfValue.selectedOptionValues || [];\n            displayValue = selectedVals.map(val => def.dropdownOptions?.find(opt => opt.value === val)?.label || val).join(', ') || '-';\n            break;\n          default:\n            displayValue = cfValue.stringValue || '-';\n        }\n        return displayValue;\n      },\n    }));\n\n    const actionsColumn: ColumnDefinition<Person> = {\n      key: 'actions',\n      header: 'Actions',\n      renderCell: (person) => (\n        <HStack spacing={2}>\n          <IconButton \n            icon={<EditIcon />} \n            aria-label=\"Edit person\" \n            size=\"sm\" \n            onClick={() => handleEditClick(person)} \n            isDisabled={!userPermissions?.includes('person:update_any') && !userPermissions?.includes('person:update_own')} \n          />\n          <IconButton \n            icon={<DeleteIcon />} \n            aria-label=\"Delete person\" \n            size=\"sm\" \n            variant=\"ghost\"\n            colorScheme=\"red\" \n            onClick={() => handleDeleteClick(person.id)} \n            isDisabled={!userPermissions?.includes('person:delete_any') && !userPermissions?.includes('person:delete_own')} \n          />\n        </HStack>\n      ),\n      isSortable: false,\n    };\n    \n    return [...standardColumns, ...customFieldColumns, actionsColumn];\n  }, [personCustomFieldDefinitions, userPermissions]);\n\n  const defaultVisibleColumnKeys = useMemo(() => [\n    'name', \n    'email', \n    'phone', \n    'organization',\n    'actions'\n  ], []);\n\n  useEffect(() => {\n    if (allAvailableColumns.length > 0) {\n        initializeTable(TABLE_KEY, defaultVisibleColumnKeys);\n    }\n  }, [initializeTable, defaultVisibleColumnKeys, allAvailableColumns]);\n\n  const currentVisibleColumnKeys = tableColumnPreferences[TABLE_KEY]?.visibleColumnKeys || defaultVisibleColumnKeys;\n  \n  const visibleColumns = useMemo(() => {\n    if (customFieldsLoading || allAvailableColumns.length === 0) return [];\n    return allAvailableColumns.filter(col => currentVisibleColumnKeys.includes(String(col.key)));\n  }, [allAvailableColumns, currentVisibleColumnKeys, customFieldsLoading]);\n\n  const handleEditClick = (person: Person) => {\n    setPersonToEdit(person);\n    onEditOpen();\n  };\n\n  const handleDeleteClick = (personId: string) => {\n    setPersonIdToDelete(personId);\n    onConfirmDeleteOpen();\n  };\n\n  const handleConfirmDelete = async () => {\n    if (personIdToDelete) {\n      const success = await deletePerson(personIdToDelete);\n      if (success) {\n        toast({ title: 'Person deleted', status: 'success', duration: 3000, isClosable: true });\n      } else {\n        toast({ title: 'Error', description: peopleError || 'Failed to delete person.', status: 'error', duration: 3000, isClosable: true });\n      }\n      setPersonIdToDelete(null);\n      onConfirmDeleteClose();\n    }\n  };\n  \n  const displayedPeople = useMemo(() => {\n    if (!activeQuickFilterKey || activeQuickFilterKey === 'all') {\n      return people;\n    }\n    return people.filter(person => {\n      switch (activeQuickFilterKey) {\n        case 'noOrg':\n          return !person.organization_id && !person.organization;\n        case 'withEmail':\n          return !!person.email;\n        case 'noPhone':\n          return !person.phone;\n        default:\n          return true;\n      }\n    });\n  }, [people, activeQuickFilterKey]);\n\n  const pageIsLoading = peopleLoading || customFieldsLoading;\n\n  return (\n    <>\n    <ListPageLayout\n      title=\"People\"\n      newButtonLabel=\"New Person\"\n      onNewButtonClick={onCreateOpen}\n      isNewButtonDisabled={!userPermissions?.includes('person:create')}\n      isLoading={pageIsLoading}\n      error={peopleError}\n      isEmpty={!pageIsLoading && displayedPeople.length === 0 && !peopleError}\n      emptyStateProps={{\n        icon: AddIcon,\n        title: \"No People Found\",\n        message: \"Get started by adding your first person or try a different filter.\",\n      }}\n      customControls={\n        <HStack spacing={4} my={2}>\n          <QuickFilterControls\n            availableFilters={availableQuickFilters}\n            activeFilterKey={activeQuickFilterKey}\n            onSelectFilter={setActiveQuickFilterKey}\n          />\n          <Button leftIcon={<SettingsIcon />} onClick={onColumnSelectorOpen} size=\"sm\" variant=\"outline\">\n            Columns\n          </Button>\n        </HStack>\n      }\n    >\n      {!pageIsLoading && !peopleError && displayedPeople.length > 0 && (\n        <SortableTable<Person>\n          data={displayedPeople}\n          columns={visibleColumns}\n          initialSortKey=\"name\"\n          initialSortDirection=\"ascending\"\n        />\n      )}\n      {(pageIsLoading || customFieldsLoading) && <Spinner />}\n    </ListPageLayout>\n\n    {isCreateOpen && (\n      <Modal isOpen={isCreateOpen} onClose={onCreateClose} size=\"xl\" isCentered scrollBehavior=\"inside\">\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create New Person</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <CreatePersonForm onSuccess={onCreateClose} onClose={onCreateClose} />\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    )}\n\n    {isEditOpen && personToEdit && (\n      <Modal isOpen={isEditOpen} onClose={onEditClose} size=\"xl\" isCentered scrollBehavior=\"inside\">\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Edit Person</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <EditPersonForm person={personToEdit} onSuccess={onEditClose} onClose={onEditClose} />\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    )}\n\n    <ConfirmationDialog\n      isOpen={isConfirmDeleteDialogOpen}\n      onClose={onConfirmDeleteClose}\n      onConfirm={handleConfirmDelete}\n      headerText=\"Delete Person\"\n      bodyText=\"Are you sure you want to delete this person? This action cannot be undone.\"\n      confirmButtonText=\"Delete\"\n      confirmButtonColorScheme=\"red\"\n    />\n      \n    {isColumnSelectorOpen && (\n      <ColumnSelector<Person>\n        isOpen={isColumnSelectorOpen}\n        onClose={onColumnSelectorClose}\n        allAvailableColumns={allAvailableColumns}\n        currentVisibleColumnKeys={currentVisibleColumnKeys}\n        defaultVisibleColumnKeys={defaultVisibleColumnKeys}\n        onApply={(newKeys) => setVisibleColumnKeys(TABLE_KEY, newKeys)}\n        onReset={() => resetTableToDefaults(TABLE_KEY, defaultVisibleColumnKeys)}\n      />\n    )}\n    </>\n  );\n}\n\nexport default PeoplePage; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/pages/PipelinesPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":51,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":51,"endColumn":22,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1852,1852],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1852,1852],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":55,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":55,"endColumn":49,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1952,1952],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1952,1952],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":215,"column":19,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":215,"endColumn":40}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useAppStore } from '../stores/useAppStore';\nimport { usePipelinesStore, Pipeline } from '../stores/usePipelinesStore';\nimport { \n  Box, \n  Heading, \n  Button, \n  HStack, \n  VStack, \n  Spinner, \n  Alert, \n  AlertIcon,\n  List, \n  ListItem,\n  IconButton,\n  useDisclosure,\n  Flex,\n  useToast\n} from '@chakra-ui/react';\nimport { EditIcon, DeleteIcon, ViewIcon, CopyIcon } from '@chakra-ui/icons';\nimport { useNavigate } from 'react-router-dom';\n\n// Import the modal components\nimport CreatePipelineModal from '../components/pipelines/CreatePipelineModal';\nimport EditPipelineModal from '../components/pipelines/EditPipelineModal';\nimport ConfirmationDialog from '../components/common/ConfirmationDialog';\nimport EmptyState from '../components/common/EmptyState';\n\nconst PipelinesPage: React.FC = () => {\n  // Select state slices\n  const { pipelines, fetchPipelines, pipelinesLoading, pipelinesError, deletePipeline: deletePipelineAction } = usePipelinesStore();\n\n  // Fetch permissions\n  const userPermissions = useAppStore((state) => state.userPermissions);\n  \n  // Disclosure hooks for the modals\n  const { isOpen: isCreateOpen, onOpen: onCreateOpen, onClose: onCreateClose } = useDisclosure();\n  const { isOpen: isEditOpen, onOpen: onEditOpen, onClose: onEditClose } = useDisclosure();\n  const { isOpen: isDeleteOpen, onOpen: onDeleteOpen, onClose: onDeleteClose } = useDisclosure();\n\n  // State for tracking pipeline being edited/deleted\n  const [pipelineToEdit, setPipelineToEdit] = useState<Pipeline | null>(null);\n  const [pipelineToDelete, setPipelineToDelete] = useState<Pipeline | null>(null);\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  const navigate = useNavigate();\n  const toast = useToast();\n\n  useEffect(() => {\n    // Fetch pipelines when the component mounts\n    fetchPipelines();\n  }, [fetchPipelines]);\n\n  const handleViewStages = (pipelineId: string) => {\n    navigate(`/pipelines/${pipelineId}/stages`);\n  };\n  \n  // --- Modal Handlers ---\n  const handleAddPipeline = () => {\n    onCreateOpen();\n  };\n\n  const handleEditPipeline = (pipeline: Pipeline) => {\n    setPipelineToEdit(pipeline);\n    onEditOpen();\n  };\n\n  const handleDeletePipeline = (pipeline: Pipeline) => {\n    setPipelineToDelete(pipeline);\n    onDeleteOpen();\n  };\n\n  // Success callback (optional - store handles state update)\n  const handleSuccess = () => {\n    console.log('Pipeline action successful');\n    // fetchPipelines(); // Re-fetching is usually not needed due to store updates\n  };\n\n  const handleConfirmDelete = async () => {\n    if (!pipelineToDelete) return;\n\n    setIsDeleting(true);\n    const success = await deletePipelineAction(pipelineToDelete.id);\n    setIsDeleting(false);\n    onDeleteClose(); // Close the dialog\n    setPipelineToDelete(null); // Clear selection\n\n    if (success) {\n      toast({ title: 'Pipeline deleted.', status: 'success', duration: 3000, isClosable: true });\n      handleSuccess(); // Call original success handler if needed\n    } else {\n      // Assuming deletePipelineAction sets an error state in the store\n      const errorMsg = usePipelinesStore.getState().pipelinesError || 'Failed to delete pipeline';\n      toast({ title: 'Error Deleting Pipeline', description: errorMsg, status: 'error', duration: 5000, isClosable: true });\n    }\n  };\n  \n  const handleEditClose = () => {\n      onEditClose();\n      setPipelineToEdit(null); // Clear selection on close\n  };\n\n  const handleDeleteClose = () => {\n      onDeleteClose();\n      setPipelineToDelete(null); // Clear selection on close\n  };\n\n  return (\n    <VStack spacing={4} align=\"stretch\">\n      <Flex justify=\"space-between\" align=\"center\" mb={4}>\n        <Heading size=\"lg\">Pipelines</Heading>\n        <Button \n            onClick={handleAddPipeline} \n            colorScheme=\"blue\"\n            isDisabled={!userPermissions?.includes('pipeline:create')}\n        >\n          New Pipeline\n        </Button>\n      </Flex>\n\n      {pipelinesLoading && (\n        <Flex justify=\"center\" align=\"center\" minH=\"200px\">\n          <Spinner size=\"xl\" />\n        </Flex>\n      )}\n\n      {pipelinesError && (\n        <Alert status=\"error\" mb={4}>\n          <AlertIcon />\n          Error fetching pipelines: {pipelinesError}\n        </Alert>\n      )}\n\n      {!pipelinesLoading && !pipelinesError && (\n        <VStack spacing={4} align=\"stretch\">\n          {pipelines.length === 0 ? (\n            <EmptyState \n              icon={CopyIcon}\n              title=\"No Pipelines Created\"\n              message=\"Create pipelines to visualize and manage your sales processes.\"\n              actionButtonLabel=\"Add Pipeline\"\n              onActionButtonClick={handleAddPipeline}\n              isActionButtonDisabled={!userPermissions?.includes('pipeline:create')}\n            />\n          ) : (\n            <List spacing={3}>\n              {pipelines.map((pipeline) => (\n                <ListItem \n                  key={pipeline.id} \n                  p={4} \n                  borderWidth=\"1px\" \n                  borderRadius=\"md\" \n                  bg={{ base: 'white', _dark: 'gray.700' }} \n                  borderColor={{ base: 'gray.200', _dark: 'gray.600' }}\n                  shadow=\"sm\"\n                  _hover={{ shadow: 'md' }}\n                >\n                  <Flex justify=\"space-between\" align=\"center\">\n                    <Box flexGrow={1} mr={4}>\n                      <Heading size=\"md\">{pipeline.name}</Heading>\n                      {/* Can add more details here later, like stage count */}\n                    </Box>\n                    <HStack spacing={2}>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        leftIcon={<ViewIcon />}\n                        onClick={() => handleViewStages(pipeline.id)} \n                      >\n                        View Stages\n                      </Button>\n                      <IconButton\n                        aria-label=\"Edit pipeline\"\n                        icon={<EditIcon />}\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleEditPipeline(pipeline)}\n                        isDisabled={!userPermissions?.includes('pipeline:update_any')}\n                      />\n                      <IconButton\n                        aria-label=\"Delete pipeline\"\n                        icon={<DeleteIcon />}\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        colorScheme=\"red\"\n                        onClick={() => handleDeletePipeline(pipeline)}\n                        isDisabled={!userPermissions?.includes('pipeline:delete_any')}\n                      />\n                    </HStack>\n                  </Flex>\n                </ListItem>\n              ))}\n            </List>\n          )}\n        </VStack>\n      )}\n\n      {/* Render Modals */} \n      <CreatePipelineModal \n        isOpen={isCreateOpen} \n        onClose={onCreateClose} \n        onSuccess={handleSuccess} \n      />\n      \n      <EditPipelineModal \n        isOpen={isEditOpen} \n        onClose={handleEditClose} // Use custom close handler to clear state\n        pipeline={pipelineToEdit} \n        onSuccess={handleSuccess} \n      />\n      \n      <ConfirmationDialog\n        isOpen={isDeleteOpen}\n        onClose={handleDeleteClose} // Keep custom close to clear state\n        onConfirm={handleConfirmDelete}\n        headerText=\"Delete Pipeline\"\n        bodyText={`Are you sure you want to delete the pipeline \"${pipelineToDelete?.name}\"? All associated stages and deals within those stages will also be affected. This action cannot be undone.`}\n        confirmButtonText=\"Delete\"\n        confirmButtonColorScheme=\"red\"\n        isLoading={isDeleting}\n      />\n\n    </VStack>\n  );\n};\n\nexport default PipelinesPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/pages/ProfilePage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":2,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1448,1451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1448,1451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":64,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":64,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2239,2239],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2239,2239],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchProfile'. Either include it or remove the dependency array.","line":65,"column":6,"nodeType":"ArrayExpression","endLine":65,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchProfile]","fix":{"range":[2260,2262],"text":"[fetchProfile]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { Box, Heading, Button, VStack, useToast, Spinner, Text, Flex, IconButton } from '@chakra-ui/react';\nimport { EditIcon, CloseIcon } from '@chakra-ui/icons';\nimport { gql } from 'graphql-request';\nimport { gqlClient } from '../lib/graphqlClient';\nimport { isGraphQLErrorWithMessage } from '../lib/graphqlUtils';\nimport type { User } from '../generated/graphql/graphql';\nimport ProfileView from '../components/profile/ProfileView';\nimport ProfileEditForm from '../components/profile/ProfileEditForm';\n\n// Define the query string directly for graphql-request\nconst GET_ME_QUERY = gql`\n  query GetMe {\n    me {\n      id\n      email\n      display_name\n      avatar_url\n    }\n  }\n`;\n\nconst ProfilePage: React.FC = () => {\n  console.log('[ProfilePage] Component rendering/rerendering'); // LIFECYCLE LOG\n  const [isEditing, setIsEditing] = useState(false);\n  const toast = useToast();\n\n  // Replace useQuery with useState and useEffect for graphql-request\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  const fetchProfile = async () => {\n    console.log('[ProfilePage] fetchProfile called'); // FETCH LOG\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await gqlClient.request<{ me: User | null }>(GET_ME_QUERY);\n      setUser(response.me);\n    } catch (err: any) {\n      console.error('Error fetching profile:', err);\n      let errorMessage = 'Could not load your profile data.';\n      if (isGraphQLErrorWithMessage(err)) {\n        errorMessage = err.response!.errors[0].message || errorMessage;\n      } else if (err instanceof Error) {\n        errorMessage = err.message;\n      }\n      setError(new Error(errorMessage)); // Store an Error object\n      toast({\n        title: 'Error Loading Profile',\n        description: errorMessage,\n        status: 'error',\n        duration: 9000,\n        isClosable: true,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch profile data on component mount\n  useEffect(() => {\n    console.log('[ProfilePage] useEffect for fetchProfile triggered (dependency array: [])'); // EFFECT LOG\n    fetchProfile();\n  }, []); // RE-ADD dependency array: []\n\n  const handleUpdateSuccess = (updatedUser: User) => {\n    setIsEditing(false);\n    setUser(updatedUser); // Update local state with the new user data\n    // If ProfileEditForm also uses graphql-request, this is fine.\n    // If it were using Apollo, it might update cache, but here we manually set user.\n    console.log('Profile updated successfully in page:', updatedUser);\n    toast({\n      title: 'Profile Updated',\n      description: 'Your profile has been successfully updated.',\n      status: 'success',\n      duration: 5000,\n      isClosable: true,\n    });\n  };\n\n  if (error && !user) { // Show error only if there's no data to potentially display\n    return (\n      <Box textAlign=\"center\" py={10} px={6}>\n        <Heading as=\"h2\" size=\"xl\" mt={6} mb={2} color=\"red.500\">\n          Error Loading Profile\n        </Heading>\n        <Text color={'gray.500'}>\n          {error.message || 'We encountered an issue loading your profile. Please try again later.'}\n        </Text>\n      </Box>\n    );\n  }\n  \n  // If loading and no data yet, show global spinner. If loading but data exists (e.g. refetching), ProfileView can show its own spinner.\n  if (loading && !user) {\n    return (\n      <Flex justify=\"center\" align=\"center\" minH=\"200px\">\n        <Spinner size=\"xl\" />\n      </Flex>\n    );\n  }\n\n  return (\n    <Box p={6} maxWidth=\"container.md\" mx=\"auto\">\n      <VStack spacing={6} align=\"stretch\">\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Heading as=\"h1\" size=\"xl\">\n            My Profile\n          </Heading>\n          {user && !isEditing && (\n            <IconButton\n              aria-label=\"Edit Profile\"\n              icon={<EditIcon />}\n              onClick={() => setIsEditing(true)}\n              variant=\"ghost\"\n            />\n          )}\n          {isEditing && (\n             <IconButton\n              aria-label=\"Cancel Edit\"\n              icon={<CloseIcon />}\n              onClick={() => setIsEditing(false)}\n              variant=\"ghost\"\n            />\n          )}\n        </Flex>\n\n        {isEditing && user ? (\n          <ProfileEditForm\n            user={user}\n            onUpdateSuccess={handleUpdateSuccess}\n            onCancel={() => setIsEditing(false)}\n          />\n        ) : (\n          <ProfileView user={user} isLoading={loading} />\n        )}\n      </VStack>\n    </Box>\n  );\n};\n\nexport default ProfilePage; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/pages/StagesPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Pipeline' is defined but never used.","line":4,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'initialFetchAttemptedForPipeline' is assigned a value but never used.","line":38,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setInitialFetchAttemptedForPipeline' is assigned a value but never used.","line":38,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":79},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedPipelineIdFromStore' is assigned a value but never used.","line":56,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":52},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":72,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":72,"endColumn":35,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2482,2482],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2482,2482],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":81,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":81,"endColumn":31,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3010,3010],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3010,3010],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchStages', 'pipelines.length', 'pipelinesLoadingFromStore', and 'stagesLoading'. Either include them or remove the dependency array.","line":85,"column":6,"nodeType":"ArrayExpression","endLine":85,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [pipelineId, fetchPipelinesFromStore, pipelines.length, pipelinesLoadingFromStore, stagesLoading, fetchStages]","fix":{"range":[3232,3269],"text":"[pipelineId, fetchPipelinesFromStore, pipelines.length, pipelinesLoadingFromStore, stagesLoading, fetchStages]"}}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":275,"column":19,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":275,"endColumn":40}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useParams, Link as RouterLink } from 'react-router-dom';\nimport { useAppStore } from '../stores/useAppStore';\nimport { usePipelinesStore, Pipeline } from '../stores/usePipelinesStore';\nimport { useStagesStore, Stage } from '../stores/useStagesStore';\nimport { \n  Box, \n  Heading, \n  Text, \n  Button, \n  HStack, \n  VStack, \n  Spinner, \n  Alert, \n  AlertIcon,\n  List, \n  ListItem,\n  IconButton,\n  Link,\n  Flex,\n  useDisclosure,\n  useToast\n} from '@chakra-ui/react';\nimport { EditIcon, DeleteIcon, ArrowBackIcon, DragHandleIcon } from '@chakra-ui/icons';\n\n// Import the stage modal components\nimport CreateStageModal from '../components/stages/CreateStageModal';\nimport EditStageModal from '../components/stages/EditStageModal';\nimport ConfirmationDialog from '../components/common/ConfirmationDialog';\nimport EmptyState from '../components/common/EmptyState';\n\n// TODO: Import/create Modals for Create/Edit/Delete Stages later\n\nconst StagesPage: React.FC = () => {\n  const { pipelineId } = useParams<{ pipelineId: string }>();\n  \n  // Add this state to track fetch attempts per pipeline\n  const [initialFetchAttemptedForPipeline, setInitialFetchAttemptedForPipeline] = useState<Record<string, boolean>>({});\n  \n  // Select state slices from Zustand\n  const { \n    stages,\n    fetchStages,\n    stagesLoading,\n    stagesError,\n    deleteStage: deleteStageAction\n  } = useStagesStore();\n\n  const userPermissions = useAppStore((state) => state.userPermissions);\n\n  // Get pipelines state from usePipelinesStore\n  const { \n    pipelines, \n    fetchPipelines: fetchPipelinesFromStore,\n    pipelinesLoading: pipelinesLoadingFromStore,\n    selectedPipelineId: selectedPipelineIdFromStore\n  } = usePipelinesStore();\n  \n  const currentPipeline = pipelines.find(p => p.id === pipelineId);\n\n  // State for modals\n  const { isOpen: isCreateOpen, onOpen: onCreateOpen, onClose: onCreateClose } = useDisclosure();\n  const { isOpen: isEditOpen, onOpen: onEditOpen, onClose: onEditClose } = useDisclosure();\n  const { isOpen: isDeleteOpen, onOpen: onDeleteOpen, onClose: onDeleteClose } = useDisclosure();\n  const [stageToEdit, setStageToEdit] = useState<Stage | null>(null);\n  const [stageToDelete, setStageToDelete] = useState<Stage | null>(null);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const toast = useToast();\n\n  useEffect(() => {\n    if (pipelines.length === 0 && !pipelinesLoadingFromStore && pipelineId) {\n        fetchPipelinesFromStore(); \n    }\n\n    if (pipelineId && !stagesLoading) {\n      // Check if fetch has been attempted for the current pipelineId\n      // Simplified: always attempt fetch if pipelineId is present and not currently loading stages\n      // More sophisticated logic might be needed if fetchStages itself sets stagesError and we need to distinguish\n      // fetch errors from action errors more granularly for display.\n      // For now, the store's stagesError will reflect the latest error (fetch or action).\n      fetchStages(pipelineId);\n    }\n    // Intentionally simplified dependencies for refetch on pipelineId change.\n    // Consider adding initialFetchAttemptedForPipeline if you want to prevent refetching on every render.\n  }, [pipelineId, fetchPipelinesFromStore]); // Removed some dependencies to make it simpler for now\n\n  // --- Modal Handlers ---\n  const handleAddStage = () => {\n    onCreateOpen();\n  };\n\n  const handleEditStage = (stage: Stage) => {\n    setStageToEdit(stage);\n    onEditOpen();\n  };\n\n  const handleDeleteStage = (stage: Stage) => {\n    setStageToDelete(stage);\n    onDeleteOpen();\n  };\n  \n  const handleSuccess = () => {\n    console.log('Stage action successful');\n    // Store handles state updates, no refetch needed here typically\n  };\n  \n  const handleEditClose = () => {\n      onEditClose();\n      setStageToEdit(null);\n  };\n\n  const handleDeleteClose = () => {\n      onDeleteClose();\n      setStageToDelete(null);\n  };\n\n  const handleConfirmDelete = async () => {\n    if (!stageToDelete) return;\n\n    setIsDeleting(true);\n    // We use a local variable for the error from this specific delete action\n    let deleteError: string | null = null; \n    try {\n    const success = await deleteStageAction(stageToDelete.id);\n      if (success) {\n        toast({ title: 'Stage deleted.', status: 'success', duration: 3000, isClosable: true });\n      } else {\n        // If deleteStageAction returns false, it implies it caught an error and set stagesError in the store\n        deleteError = useStagesStore.getState().stagesError || 'Failed to delete stage';\n      }\n    } catch (e) {\n      // If deleteStageAction itself throws (less likely if it catches internally)\n      deleteError = (e instanceof Error) ? e.message : String(e);\n    } finally {\n    setIsDeleting(false);\n    onDeleteClose();\n    setStageToDelete(null);\n      if (deleteError) {\n        toast({ title: 'Error Deleting Stage', description: deleteError, status: 'error', duration: 5000, isClosable: true });\n      }\n    }\n  };\n\n  return (\n    <VStack spacing={4} align=\"stretch\">\n       <Link as={RouterLink} to=\"/pipelines\" mb={4} display=\"inline-block\">\n         <ArrowBackIcon mr={1} /> Back to Pipelines\n       </Link>\n      <Heading size=\"lg\" mb={2}>\n        Stages for Pipeline: {currentPipeline ? currentPipeline.name : (pipelineId ? `(${pipelineId.substring(0, 8)}...)` : 'Loading...')}\n      </Heading>\n      \n      {/* Display global stagesError if present (could be from fetch or last action) */}\n      {/* This provides general feedback. Specific action errors are also handled by toasts in modals/handlers. */}\n      {stagesError && (\n        <Alert status=\"error\" mb={4}>\n          <AlertIcon />\n          {stagesError} {/* Display the error from the store */}\n        </Alert>\n      )}\n\n      {pipelineId && (\n        <Button \n          onClick={handleAddStage} \n          colorScheme=\"blue\"\n          alignSelf=\"flex-start\"\n          mb={4}\n          isDisabled={!userPermissions?.includes('stage:create')}\n        >\n          New Stage\n        </Button>\n      )}\n\n      {/* Show spinner only if loading and no stages are displayed yet */}\n      {stagesLoading && stages.filter((s: Stage) => s.pipeline_id === pipelineId).length === 0 && (\n        <Flex justify=\"center\" align=\"center\" minH=\"200px\">\n          <Spinner size=\"xl\" />\n        </Flex>\n      )}\n\n      {!pipelineId && !stagesLoading && ( // If no pipelineId is in the URL\n          <Alert status=\"warning\" mb={4}>\n            <AlertIcon />\n            No Pipeline ID found in URL. Please select a pipeline.\n          </Alert>\n      )}\n\n      {/* Render stages list if pipelineId exists. \n          The list visibility is no longer strictly tied to !stagesError.\n          If stagesError is from a fetch, stages array would likely be empty.\n          If stagesError is from an action (like create), stages array still holds existing data.\n      */}\n      {pipelineId && (\n        // Filter stages for the current pipeline from the store's potentially mixed list\n        stages.filter((s: Stage) => s.pipeline_id === pipelineId).length === 0 && !stagesLoading ? (\n          // Show EmptyState only if, after filtering, there are no stages for THIS pipeline, AND not currently loading.\n          // And no critical fetch error prevented any stage loading (the Alert above would show stagesError).\n            <EmptyState \n              icon={DragHandleIcon}\n              title=\"No Stages in this Pipeline\"\n              message=\"Add stages to define the steps in your sales process for this pipeline.\"\n              actionButtonLabel=\"Add Stage\"\n              onActionButtonClick={handleAddStage}\n              isActionButtonDisabled={!userPermissions?.includes('stage:create')}\n            />\n          ) : (\n            <List spacing={3}>\n              {stages.filter((s: Stage) => s.pipeline_id === pipelineId).map((stage: Stage) => (\n                <ListItem \n                  key={stage.id} \n                  p={4} \n                  borderWidth=\"1px\" \n                  borderRadius=\"md\" \n                  bg={{ base: 'white', _dark: 'gray.700' }} \n                  borderColor={{ base: 'gray.200', _dark: 'gray.600' }}\n                  shadow=\"sm\"\n                  _hover={{ shadow: 'md' }}\n                >\n                  <Flex justify=\"space-between\" align=\"center\">\n                    <Box flexGrow={1} mr={4}>\n                      <Heading size=\"sm\">{stage.name}</Heading>\n                      <Text fontSize=\"sm\" color={{ base: 'gray.500', _dark: 'gray.400' }}>\n                        Order: {stage.order}\n                        {stage.deal_probability !== null && stage.deal_probability !== undefined && \n                          // Multiply by 100 and format as percentage\n                          ` | Probability: ${Math.round(stage.deal_probability * 100)}%` \n                        }\n                      </Text>\n                    </Box>\n                    <HStack spacing={2}>\n                      <IconButton\n                        aria-label=\"Edit stage\"\n                        icon={<EditIcon />}\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleEditStage(stage)}\n                        isDisabled={!userPermissions?.includes('stage:update_any')}\n                      />\n                      <IconButton\n                        aria-label=\"Delete stage\"\n                        icon={<DeleteIcon />}\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        colorScheme=\"red\"\n                        onClick={() => handleDeleteStage(stage)}\n                        isDisabled={!userPermissions?.includes('stage:delete_any')}\n                      />\n                    </HStack>\n                  </Flex>\n                </ListItem>\n              ))}\n            </List>\n        )\n      )}\n      \n      {pipelineId && (\n        <CreateStageModal \n          isOpen={isCreateOpen} \n          onClose={onCreateClose} \n          pipelineId={pipelineId} \n          onSuccess={handleSuccess} // onSuccess might trigger a toast or a silent success log\n        />\n      )}\n      \n      <EditStageModal \n        isOpen={isEditOpen} \n        onClose={handleEditClose} \n        stage={stageToEdit} \n        onSuccess={handleSuccess} \n      />\n      \n      <ConfirmationDialog\n        isOpen={isDeleteOpen}\n        onClose={handleDeleteClose}\n        onConfirm={handleConfirmDelete}\n        headerText=\"Delete Stage\"\n        bodyText={`Are you sure you want to delete the stage \"${stageToDelete?.name}\"? All deals in this stage will be affected. This action cannot be undone.`}\n        confirmButtonText=\"Delete\"\n        confirmButtonColorScheme=\"red\"\n        isLoading={isDeleting}\n      />\n    </VStack>\n  );\n};\n\nexport default StagesPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/pages/admin/CustomFieldsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/stores/useActivitiesStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CustomFieldValue' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { gql } from 'graphql-request';\nimport { gqlClient } from '../lib/graphqlClient';\nimport { isGraphQLErrorWithMessage } from '../lib/graphqlUtils';\nimport type {\n  Activity,\n  ActivityFilterInput as GeneratedActivityFilterInput,\n  CreateActivityInput as GeneratedCreateActivityInput,\n  UpdateActivityInput as GeneratedUpdateActivityInput,\n  QueryActivitiesArgs,\n  MutationCreateActivityArgs,\n  MutationUpdateActivityArgs,\n  MutationDeleteActivityArgs,\n  Maybe,\n  ActivityType,\n  CustomFieldValue,\n} from '../generated/graphql/graphql';\n\n// Re-export core Activity types for convenience if components need them\nexport type { Activity, GeneratedCreateActivityInput, GeneratedUpdateActivityInput, GeneratedActivityFilterInput, Maybe, ActivityType };\n\n// --- GraphQL Fragment for Custom Field Values ---\n// const CUSTOM_FIELD_VALUES_FRAGMENT = gql`\n//   fragment CustomFieldValuesDataActivity on CustomFieldValue {\n//     definition {\n//       id\n//       fieldName\n//       fieldLabel\n//       fieldType\n//       displayOrder\n//       isRequired\n//       isActive\n//       dropdownOptions {\n//         value\n//         label\n//       }\n//     }\n//     stringValue\n//     numberValue\n//     booleanValue\n//     dateValue\n//     selectedOptionValues\n//   }\n// `;\n\n// GQL Constants (copied from useAppStore)\nconst GET_ACTIVITIES_QUERY = gql`\n  query GetActivities($filter: ActivityFilterInput) {\n    activities(filter: $filter) {\n      id\n      user_id\n      created_at\n      updated_at\n      type\n      subject\n      due_date\n      is_done\n      notes\n      deal_id\n      person_id\n      organization_id\n      deal { id name }\n      person { id first_name last_name }\n      organization { id name }\n    }\n  }\n`;\n\nconst CREATE_ACTIVITY_MUTATION = gql`\n  mutation CreateActivity($input: CreateActivityInput!) {\n    createActivity(input: $input) {\n      id\n      user_id\n      created_at\n      updated_at\n      type\n      subject\n      due_date\n      is_done\n      notes\n      deal_id\n      person_id\n      organization_id\n      deal { id name }\n      person { id first_name last_name }\n      organization { id name }\n    }\n  }\n`;\n\nconst UPDATE_ACTIVITY_MUTATION = gql`\n  mutation UpdateActivity($id: ID!, $input: UpdateActivityInput!) {\n    updateActivity(id: $id, input: $input) {\n      id\n      user_id\n      created_at\n      updated_at\n      type\n      subject\n      due_date\n      is_done\n      notes\n      deal_id\n      person_id\n      organization_id\n      deal { id name }\n      person { id first_name last_name }\n      organization { id name }\n    }\n  }\n`;\n\nconst DELETE_ACTIVITY_MUTATION = gql`\n  mutation DeleteActivity($id: ID!) {\n    deleteActivity(id: $id)\n  }\n`;\n\n// State Interface\nexport interface ActivitiesState {\n  activities: Activity[];\n  activitiesLoading: boolean;\n  activitiesError: string | null;\n  fetchActivities: (filter?: GeneratedActivityFilterInput) => Promise<void>;\n  createActivity: (input: GeneratedCreateActivityInput) => Promise<Activity | null>;\n  updateActivity: (id: string, input: GeneratedUpdateActivityInput) => Promise<Activity | null>;\n  deleteActivity: (id: string) => Promise<boolean>;\n}\n\n// Store Implementation\nexport const useActivitiesStore = create<ActivitiesState>((set, get) => ({\n  activities: [],\n  activitiesLoading: false,\n  activitiesError: null,\n\n  fetchActivities: async (filter?: GeneratedActivityFilterInput) => {\n    set({ activitiesLoading: true, activitiesError: null });\n    try {\n      const variables: QueryActivitiesArgs = {};\n      if (filter) {\n        variables.filter = filter;\n      }\n      const data = await gqlClient.request<{ activities: Activity[] }, QueryActivitiesArgs>(GET_ACTIVITIES_QUERY, variables);\n      set({\n        activities: (data.activities || []).sort((a, b) => {\n          const aDate = a.due_date ? new Date(a.due_date).getTime() : Infinity;\n          const bDate = b.due_date ? new Date(b.due_date).getTime() : Infinity;\n          if (aDate !== bDate) return aDate - bDate;\n          return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\n        }),\n        activitiesLoading: false\n      });\n    } catch (error: unknown) {\n      console.error(\"Error fetching activities:\", error);\n      let message = 'Failed to fetch activities';\n      if (isGraphQLErrorWithMessage(error) && error.response?.errors?.[0]?.message) {\n        message = error.response.errors[0].message;\n      } else if (error instanceof Error) {\n        message = error.message;\n      }\n      set({ activitiesError: message, activitiesLoading: false, activities: [] });\n    }\n  },\n\n  createActivity: async (input: GeneratedCreateActivityInput): Promise<Activity | null> => {\n    // set({ activitiesLoading: true, activitiesError: null }); // Global loading not typically set for create\n    try {\n      const response = await gqlClient.request<{ createActivity?: Maybe<Activity> }, MutationCreateActivityArgs>(\n        CREATE_ACTIVITY_MUTATION,\n        { input }\n      );\n      if (response.createActivity) {\n        set((state) => ({\n          activities: [...state.activities, response.createActivity!].sort((a, b) => {\n            const aDate = a.due_date ? new Date(a.due_date).getTime() : Infinity;\n            const bDate = b.due_date ? new Date(b.due_date).getTime() : Infinity;\n            if (aDate !== bDate) return aDate - bDate;\n            return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\n          }),\n          activitiesError: null, // Clear any previous error on success\n        }));\n        return response.createActivity;\n      }\n      return null;\n    } catch (error: unknown) {\n      console.error(\"Error creating activity:\", error);\n      let message = 'Failed to create activity';\n      if (isGraphQLErrorWithMessage(error) && error.response?.errors?.[0]?.message) {\n        message = error.response.errors[0].message;\n      } else if (error instanceof Error) {\n        message = error.message;\n      }\n      set({ activitiesError: message });\n      return null;\n    }\n  },\n\n  updateActivity: async (id: string, input: GeneratedUpdateActivityInput): Promise<Activity | null> => {\n    // set({ activitiesLoading: true, activitiesError: null }); // Global loading not typical for update\n    try {\n      const response = await gqlClient.request<{ updateActivity?: Maybe<Activity> }, MutationUpdateActivityArgs>(\n        UPDATE_ACTIVITY_MUTATION,\n        { id, input }\n      );\n      if (response.updateActivity) {\n        set((state) => ({\n          activities: state.activities.map(a => a.id === id ? response.updateActivity! : a)\n            .sort((a, b) => {\n              const aDate = a.due_date ? new Date(a.due_date).getTime() : Infinity;\n              const bDate = b.due_date ? new Date(b.due_date).getTime() : Infinity;\n              if (aDate !== bDate) return aDate - bDate;\n              return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\n            }),\n          activitiesError: null, // Clear any previous error on success\n        }));\n        return response.updateActivity;\n      }\n      return null;\n    } catch (error: unknown) {\n      console.error(`Error updating activity ${id}:`, error);\n      let message = `Failed to update activity ${id}`;\n      if (isGraphQLErrorWithMessage(error) && error.response?.errors?.[0]?.message) {\n        message = error.response.errors[0].message;\n      } else if (error instanceof Error) {\n        message = error.message;\n      }\n      set({ activitiesError: message });\n      return null;\n    }\n  },\n\n  deleteActivity: async (id: string): Promise<boolean> => {\n    const originalActivities = get().activities;\n    set((state) => ({\n      activities: state.activities.filter(a => a.id !== id),\n      activitiesError: null // Clear error for optimistic update attempt\n    }));\n    try {\n      const response = await gqlClient.request<{ deleteActivity?: Maybe<string | boolean> }, MutationDeleteActivityArgs>(\n        DELETE_ACTIVITY_MUTATION,\n        { id }\n      );\n      // Assuming API returns true or the ID on successful deletion\n      if (response.deleteActivity) { \n        return true;\n      }\n      // Deletion failed according to API but didn't throw an error (unlikely for GQL but good to handle)\n      set({ activities: originalActivities, activitiesError: \"Delete operation failed as reported by API.\" });\n      return false;\n    } catch (error: unknown) {\n      console.error(`Error deleting activity ${id}:`, error);\n      let message = `Failed to delete activity ${id}`;\n      if (isGraphQLErrorWithMessage(error) && error.response?.errors?.[0]?.message) {\n        message = error.response.errors[0].message;\n      } else if (error instanceof Error) {\n        message = error.message;\n      }\n      set({ activities: originalActivities, activitiesError: message }); // Revert optimistic update\n      return false;\n    }\n  },\n}));\n\nexport default useActivitiesStore; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/stores/useAppStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stage' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":8},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":146,"column":13,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":146,"endColumn":42,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4267,4267],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4267,4267],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4741,4744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4741,4744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":160,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":160,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":171,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5224,5227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5224,5227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":172,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":172,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":193,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6268,6271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6268,6271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extensions on an `any` value.","line":193,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":193,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extensions on an `any` value.","line":193,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":193,"endColumn":79},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7209,7212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7209,7212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":224,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7508,7511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7508,7511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extensions on an `any` value.","line":224,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":224,"endColumn":84},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":228,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7701,7704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7701,7704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":228,"column":67,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":228,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":228,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":228,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":230,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":230,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":231,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":231,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":231,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":231,"endColumn":37},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":240,"column":3,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":240,"endColumn":38,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[8052,8052],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[8052,8052],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport type { Session, User } from '@supabase/supabase-js';\nimport { supabase } from '../lib/supabase';\nimport { gqlClient } from '../lib/graphqlClient';\nimport { gql } from 'graphql-request';\nimport { isGraphQLErrorWithMessage } from '../lib/graphqlUtils';\nimport type {\n  Stage,\n  Maybe,\n  Pipeline,\n  Deal as GraphQLDeal,\n  DealHistoryEntry as GraphQLDealHistoryEntry,\n  User as GraphQLUser\n} from '../generated/graphql/graphql';\n\n// Re-export core entity and input types for external use\nexport type {\n  Pipeline,\n  Maybe\n};\n\n// --- GraphQL Queries/Mutations ---\n\nconst GET_MY_PERMISSIONS_QUERY = gql`query GetMyPermissions { myPermissions }`;\n\nconst GET_DEAL_WITH_HISTORY_QUERY = gql`\n  query GetDealWithHistory($dealId: ID!) {\n    deal(id: $dealId) {\n      id\n      name\n      amount\n      expected_close_date\n      created_at\n      updated_at\n      deal_specific_probability\n      stage {\n        id\n        name\n        pipeline_id\n      }\n      person {\n          id\n          first_name\n          last_name\n          email\n      }\n      organization {\n          id\n          name\n      }\n      customFieldValues {\n        definition {\n          id\n          fieldName\n          fieldLabel\n          fieldType\n          dropdownOptions {\n            value\n            label\n          }\n        }\n        stringValue\n        numberValue\n        booleanValue\n        dateValue\n        selectedOptionValues\n      }\n      history(limit: 50) {\n        id\n        eventType\n        changes\n        createdAt\n        user {\n          id\n          email\n          display_name\n        }\n      }\n    }\n  }\n`;\n\n// Define a more specific type for the deal we expect from GetDealWithHistory\n// This helps with typing in the component that uses this data.\n// We can use Pick or extend GraphQLDeal if needed, but for now, let's assume this structure matches the query.\nexport interface DealWithHistory extends GraphQLDeal {\n    history: (Pick<GraphQLDealHistoryEntry, 'id' | 'eventType' | 'changes' | 'createdAt'> & {\n        user: Pick<GraphQLUser, 'id' | 'email' | 'display_name'> | null;\n    })[];\n    // Ensure other fields from the query like person, organization are also strongly typed if not already by GraphQLDeal\n    person: GraphQLDeal['person'];\n    organization: GraphQLDeal['organization'];\n}\n\nexport interface AppState {\n  // Auth\n  session: Session | null;\n  user: User | null;\n  isLoadingAuth: boolean;\n  userPermissions: string[] | null;\n  permissionsLoading: boolean;\n  setSession: (session: Session | null) => void;\n  checkAuth: () => Promise<void>;\n  handleSignOut: () => Promise<void>;\n  fetchUserPermissions: () => Promise<void>; \n\n  // Current Deal Detail\n  currentDeal: DealWithHistory | null;\n  currentDealLoading: boolean;\n  currentDealError: string | null;\n  fetchDealById: (dealId: string) => Promise<void>; \n}\n\nexport const useAppStore = create<AppState>((set, get) => ({\n  // Initial Auth State\n  session: null,\n  user: null,\n  isLoadingAuth: true, // Start with true, checkAuth will set it\n  userPermissions: null,\n  permissionsLoading: false,\n\n  // Initial Deal Detail State\n  currentDeal: null,\n  currentDealLoading: false,\n  currentDealError: null,\n\n  // Auth Action Implementations\n  setSession: (session) => set({ session, user: session?.user ?? null, isLoadingAuth: false }),\n  checkAuth: async () => {\n    set({ isLoadingAuth: true });\n    try {\n      const { data: { session }, error } = await supabase.auth.getSession();\n      if (error) throw error;\n      set({ session, user: session?.user ?? null, isLoadingAuth: false });\n      if (session) {\n        // gqlClient.setHeader('Authorization', `Bearer ${session.access_token}`);\n        // Set up a listener for auth changes AFTER initial check\n        supabase.auth.onAuthStateChange((_event, currentSession) => {\n          set({ session: currentSession, user: currentSession?.user ?? null });\n          // if (currentSession?.access_token) {\n          //   gqlClient.setHeader('Authorization', `Bearer ${currentSession.access_token}`);\n          // } else {\n          //    gqlClient.setHeader('Authorization', '');\n          // }\n          if (_event === 'SIGNED_IN' || _event === 'TOKEN_REFRESHED' || _event === 'USER_UPDATED') {\n            get().fetchUserPermissions();\n          }\n          if (_event === 'SIGNED_OUT') {\n            set({ userPermissions: null });\n            // gqlClient.setHeader('Authorization', '');\n          }\n        });\n        await get().fetchUserPermissions(); // Fetch initial permissions\n      } else {\n        // No session, clear auth header and permissions\n        set({ userPermissions: null });\n        // gqlClient.setHeader('Authorization', '');\n      }\n    } catch (error: any) {\n      console.error('Auth check error:', error.message);\n      set({ session: null, user: null, isLoadingAuth: false, userPermissions: null });\n      // gqlClient.setHeader('Authorization', '');\n    }\n  },\n  handleSignOut: async () => {\n    set({ isLoadingAuth: true });\n    try {\n      await supabase.auth.signOut();\n      set({ session: null, user: null, userPermissions: null, isLoadingAuth: false });\n      // gqlClient.setHeader('Authorization', '');\n    } catch (error: any) {\n      console.error('Sign out error:', error.message);\n      set({ isLoadingAuth: false });\n    }\n  },\n  fetchUserPermissions: async () => {\n    const session = get().session;\n    if (!session || !session.access_token) {\n      set({ userPermissions: [], permissionsLoading: false });\n      return;\n    }\n    set({ permissionsLoading: true });\n    try {\n      // Ensure gqlClient has the latest token before this call specifically\n      // gqlClient.setHeader('Authorization', `Bearer ${session.access_token}`);\n      const data = await gqlClient.request<{ myPermissions: string[] }>(GET_MY_PERMISSIONS_QUERY);\n      set({ userPermissions: data.myPermissions || [], permissionsLoading: false });\n    } catch (error) {\n      console.error(\"Error fetching user permissions:\", error);\n      set({ userPermissions: [], permissionsLoading: false });\n      if (isGraphQLErrorWithMessage(error) && error.response && error.response.errors && error.response.errors.length > 0) {\n        const authError = error.response.errors.find(\n          (e: any) => e.extensions?.code === 'UNAUTHENTICATED' || e.extensions?.code === 'FORBIDDEN'\n        );\n        if (authError) {\n          console.warn(\"Permissions fetch failed due to auth error, potentially stale session.\");\n          // Consider auto sign-out or token refresh attempt here if this becomes a recurring issue.\n      }\n    }\n    }\n  },\n\n  // Deal Detail Actions\n  fetchDealById: async (dealId: string) => {\n    set({ currentDealLoading: true, currentDealError: null, currentDeal: null });\n    if (!get().session?.access_token) {\n      set({ currentDealLoading: false, currentDealError: 'User not authenticated to fetch deal.' });\n      return;\n    }\n    try {\n      const data = await gqlClient.request<\n        { deal: DealWithHistory }, \n        { dealId: string } \n      >(\n        GET_DEAL_WITH_HISTORY_QUERY, \n        { dealId } \n      );\n      set({ currentDeal: data.deal, currentDealLoading: false });\n    } catch (error: any) {\n      console.error(`Error fetching deal ${dealId}:`, error);\n      let errorMessage = 'Failed to fetch deal details.';\n      if (isGraphQLErrorWithMessage(error)) {\n        // Check for specific GraphQL errors (e.g., NOT_FOUND)\n        const notFoundError = error.response?.errors?.find((e: any) => e.extensions?.code === 'NOT_FOUND');\n        if (notFoundError) {\n          errorMessage = 'Deal not found.';\n        } else {\n            errorMessage = error.response?.errors?.map((e:any) => e.message).join('\\n') || errorMessage;\n        }\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      set({ currentDealLoading: false, currentDealError: errorMessage, currentDeal: null });\n    }\n  },\n}));\n\n// Initialize auth check when store is loaded (client-side only)\nif (typeof window !== 'undefined') {\n  useAppStore.getState().checkAuth();\n} \n\nexport default useAppStore;","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/stores/useCustomFieldDefinitionStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MutationDeactivateCustomFieldDefinitionArgs' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MutationReactivateCustomFieldDefinitionArgs' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":54,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":54,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":64,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":64,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":80,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":80,"endColumn":8}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create, StateCreator } from 'zustand';\nimport { gqlClient } from '../lib/graphqlClient';\nimport { isGraphQLErrorWithMessage } from '../lib/graphqlUtils';\nimport type {\n  CustomFieldDefinition,\n  CustomFieldDefinitionInput,\n  CustomFieldEntityType,\n  QueryCustomFieldDefinitionsArgs,\n  MutationCreateCustomFieldDefinitionArgs,\n  MutationUpdateCustomFieldDefinitionArgs,\n  MutationDeactivateCustomFieldDefinitionArgs,\n  MutationReactivateCustomFieldDefinitionArgs,\n} from '../generated/graphql/graphql'; // Adjust path as needed\n\nimport {\n  GET_CUSTOM_FIELD_DEFINITIONS,\n  // GET_CUSTOM_FIELD_DEFINITION, // We might not need a separate fetch by ID if list is comprehensive\n  CREATE_CUSTOM_FIELD_DEFINITION,\n  UPDATE_CUSTOM_FIELD_DEFINITION,\n  DEACTIVATE_CUSTOM_FIELD_DEFINITION,\n  REACTIVATE_CUSTOM_FIELD_DEFINITION,\n} from '../lib/graphql/customFieldDefinitionOperations';\n\nexport interface CustomFieldDefinitionState {\n  definitions: CustomFieldDefinition[];\n  loading: boolean;\n  error: string | null;\n  fetchCustomFieldDefinitions: (\n    entityType: CustomFieldEntityType,\n    includeInactive?: boolean\n  ) => Promise<void>;\n  createCustomFieldDefinition: (\n    input: CustomFieldDefinitionInput\n  ) => Promise<CustomFieldDefinition | null>;\n  updateCustomFieldDefinition: (\n    id: string,\n    input: CustomFieldDefinitionInput\n  ) => Promise<CustomFieldDefinition | null>;\n  deactivateCustomFieldDefinition: (id: string) => Promise<CustomFieldDefinition | null>;\n  reactivateCustomFieldDefinition: (id: string) => Promise<CustomFieldDefinition | null>;\n  // The _setActiveStatus method is an internal helper and should not be part of this public interface.\n}\n\n// Define the helper function outside the store creator, but within the module scope.\n// It needs `set` to modify the store state.\ntype SetCustomFieldDefinitionState = StateCreator<CustomFieldDefinitionState>['arguments']['0'];\n\nconst _setActiveStatusHelper = async (\n  set: SetCustomFieldDefinitionState,\n  id: string, \n  mutationGql: string, \n  operationName: string\n): Promise<CustomFieldDefinition | null> => {\n  set({ loading: true, error: null });\n  try {\n    const variables: {id: string} = { id };\n    // The response type for deactivate/reactivate returns id, isActive, updatedAt\n    type MutationResponse = { [key: string]: Pick<CustomFieldDefinition, 'id' | 'isActive' | 'updatedAt'> }; \n    const result = await gqlClient.request<MutationResponse>(mutationGql, variables);\n    const updatedStatus = result[operationName];\n    \n    let fullUpdatedDefinition: CustomFieldDefinition | undefined;\n\n    set((state: CustomFieldDefinitionState) => ({\n      definitions: state.definitions.map((def: CustomFieldDefinition) => {\n        if (def.id === id) {\n          fullUpdatedDefinition = { ...def, isActive: updatedStatus.isActive, updatedAt: updatedStatus.updatedAt };\n          return fullUpdatedDefinition;\n        }\n        return def;\n      }).sort((a: CustomFieldDefinition, b: CustomFieldDefinition) => a.displayOrder - b.displayOrder),\n      loading: false,\n    }));\n    return fullUpdatedDefinition || null;\n  } catch (err: unknown) {\n    let message = `Failed to ${operationName.toLowerCase().replace(/customfielddefinition/g, 'custom field definition')}.`;\n    if (isGraphQLErrorWithMessage(err)) {\n      message = err.response?.errors?.[0]?.message || message;\n    }\n    set({ error: message, loading: false });\n    console.error(`Error in ${operationName}:`, err);\n    return null;\n  }\n};\n\nexport const useCustomFieldDefinitionStore = create<CustomFieldDefinitionState>((set) => ({\n  definitions: [],\n  loading: false,\n  error: null,\n\n  fetchCustomFieldDefinitions: async (entityType, includeInactive = true) => {\n    set({ loading: true, error: null });\n    try {\n      const variables: QueryCustomFieldDefinitionsArgs = { entityType, includeInactive };\n      type Response = { customFieldDefinitions: CustomFieldDefinition[] };\n      const result = await gqlClient.request<Response>(GET_CUSTOM_FIELD_DEFINITIONS, variables);\n      set({ definitions: result.customFieldDefinitions || [], loading: false });\n    } catch (err: unknown) {\n      let message = 'Failed to fetch custom field definitions.';\n      if (isGraphQLErrorWithMessage(err)) {\n        message = err.response?.errors?.[0]?.message || message;\n      }\n      set({ error: message, loading: false, definitions: [] });\n      console.error('Error fetching custom field definitions:', err);\n    }\n  },\n\n  createCustomFieldDefinition: async (input) => {\n    set({ loading: true, error: null });\n    try {\n      const variables: MutationCreateCustomFieldDefinitionArgs = { input };\n      type Response = { createCustomFieldDefinition: CustomFieldDefinition };\n      const result = await gqlClient.request<Response>(CREATE_CUSTOM_FIELD_DEFINITION, variables);\n      const newDefinition = result.createCustomFieldDefinition;\n      set((state: CustomFieldDefinitionState) => ({\n        definitions: [...state.definitions, newDefinition].sort((a: CustomFieldDefinition, b: CustomFieldDefinition) => a.displayOrder - b.displayOrder),\n        loading: false,\n      }));\n      return newDefinition;\n    } catch (err: unknown) {\n      let message = 'Failed to create custom field definition.';\n      if (isGraphQLErrorWithMessage(err)) {\n        message = err.response?.errors?.[0]?.message || message;\n      }\n      set({ error: message, loading: false });\n      console.error('Error creating custom field definition:', err);\n      return null;\n    }\n  },\n\n  updateCustomFieldDefinition: async (id, input) => {\n    set({ loading: true, error: null });\n    try {\n      const variables: MutationUpdateCustomFieldDefinitionArgs = { id, input };\n      type Response = { updateCustomFieldDefinition: CustomFieldDefinition };\n      const result = await gqlClient.request<Response>(UPDATE_CUSTOM_FIELD_DEFINITION, variables);\n      const updatedDefinition = result.updateCustomFieldDefinition;\n      set((state: CustomFieldDefinitionState) => ({\n        definitions: state.definitions.map((def: CustomFieldDefinition) =>\n          def.id === id ? updatedDefinition : def\n        ).sort((a: CustomFieldDefinition, b: CustomFieldDefinition) => a.displayOrder - b.displayOrder),\n        loading: false,\n      }));\n      return updatedDefinition;\n    } catch (err: unknown) {\n      let message = 'Failed to update custom field definition.';\n      if (isGraphQLErrorWithMessage(err)) {\n        message = err.response?.errors?.[0]?.message || message;\n      }\n      set({ error: message, loading: false });\n      console.error('Error updating custom field definition:', err);\n      return null;\n    }\n  },\n\n  deactivateCustomFieldDefinition: async (id: string) => {\n    return _setActiveStatusHelper(set, id, DEACTIVATE_CUSTOM_FIELD_DEFINITION, 'deactivateCustomFieldDefinition');\n  },\n\n  reactivateCustomFieldDefinition: async (id: string) => {\n    return _setActiveStatusHelper(set, id, REACTIVATE_CUSTOM_FIELD_DEFINITION, 'reactivateCustomFieldDefinition');\n  },\n})); ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/stores/useDealsStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/stores/useOrganizationsStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/stores/usePeopleStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":168,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":168,"endColumn":66},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4594,4597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4594,4597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extensions on an `any` value.","line":170,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":170,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extensions on an `any` value.","line":171,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":171,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extensions on an `any` value.","line":172,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":172,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extensions on an `any` value.","line":173,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":173,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":174,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":174,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extensions on an `any` value.","line":174,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":174,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":177,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":177,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":177,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":46}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { gql } from 'graphql-request';\nimport { gqlClient } from '../lib/graphqlClient';\n// import { supabase } from '../lib/supabase'; // REMOVED\nimport type { Person as GeneratedPerson, PersonInput, MutationCreatePersonArgs, MutationUpdatePersonArgs, MutationDeletePersonArgs } from '../generated/graphql/graphql';\nimport { isGraphQLErrorWithMessage /*, GraphQLErrorWithMessage REMOVED */ } from '../lib/graphqlUtils';\n\n// Re-export Person type for convenience by consumers\nexport type { GeneratedPerson as Person };\n\n// GQL Operations for People\nconst GET_PEOPLE_QUERY = gql`\n  query GetPeople {\n    people {\n      id\n      first_name\n      last_name\n      email\n      phone\n      notes\n      created_at\n      updated_at\n      organization_id\n      organization { id name }\n      customFieldValues {\n        stringValue\n        numberValue\n        booleanValue\n        dateValue\n        selectedOptionValues\n        definition {\n          id\n          fieldName\n          fieldLabel\n          fieldType\n          isRequired\n          dropdownOptions { value label }\n        }\n      }\n    }\n  }\n`;\n\nconst CREATE_PERSON_MUTATION = gql`\n  mutation CreatePerson($input: PersonInput!) {\n    createPerson(input: $input) {\n      id\n      first_name\n      last_name\n      email\n      phone\n      notes\n      created_at\n      updated_at\n      organization_id\n      organization { id name }\n      customFieldValues {\n        stringValue\n        numberValue\n        booleanValue\n        dateValue\n        selectedOptionValues\n        definition {\n          id\n          fieldName\n          fieldLabel\n          fieldType\n          isRequired\n          dropdownOptions { value label }\n        }\n      }\n    }\n  }\n`;\n\nconst UPDATE_PERSON_MUTATION = gql`\n  mutation UpdatePerson($id: ID!, $input: PersonInput!) {\n    updatePerson(id: $id, input: $input) {\n      id\n      first_name\n      last_name\n      email\n      phone\n      notes\n      created_at\n      updated_at\n      organization_id\n      organization { id name }\n      customFieldValues {\n        stringValue\n        numberValue\n        booleanValue\n        dateValue\n        selectedOptionValues\n        definition {\n          id\n          fieldName\n          fieldLabel\n          fieldType\n          isRequired\n          dropdownOptions { value label }\n        }\n      }\n    }\n  }\n`;\n\nconst DELETE_PERSON_MUTATION = gql`\n  mutation DeletePerson($id: ID!) {\n    deletePerson(id: $id)\n  }\n`;\n\ninterface PeopleState {\n  people: GeneratedPerson[];\n  peopleLoading: boolean;\n  peopleError: string | null;\n  fetchPeople: () => Promise<void>;\n  createPerson: (input: PersonInput) => Promise<GeneratedPerson | null>;\n  updatePerson: (id: string, input: PersonInput) => Promise<GeneratedPerson | null>;\n  deletePerson: (id: string) => Promise<boolean>;\n}\n\nexport const usePeopleStore = create<PeopleState>((set, _) => ({\n  people: [],\n  peopleLoading: false,\n  peopleError: null,\n\n  fetchPeople: async () => {\n    set({ peopleLoading: true, peopleError: null });\n    try {\n      type GetPeopleQueryResponse = { people: GeneratedPerson[] }; \n      const response = await gqlClient.request<GetPeopleQueryResponse>(GET_PEOPLE_QUERY);\n      set({ people: response.people || [], peopleLoading: false });\n    } catch (error: unknown) {\n      let message = 'An unknown error occurred';\n      if (isGraphQLErrorWithMessage(error)) {\n        message = error.response?.errors?.[0]?.message || 'GraphQL error';\n      } else if (error instanceof Error) {\n        message = error.message;\n      }\n      set({ peopleError: message, peopleLoading: false });\n      console.error(\"Error fetching people:\", error);\n    }\n  },\n\n  createPerson: async (input: PersonInput) => {\n    set({ peopleLoading: true, peopleError: null });\n    try {\n      const variables: MutationCreatePersonArgs = { input };\n      type CreatePersonMutationResponse = { createPerson?: GeneratedPerson | null }; \n      const response = await gqlClient.request<CreatePersonMutationResponse>(\n        CREATE_PERSON_MUTATION,\n        variables\n      );\n      if (response.createPerson) {\n        set((state) => ({ \n          people: [...state.people, response.createPerson!], \n          peopleLoading: false \n        }));\n        return response.createPerson;\n      }\n      set({ peopleLoading: false });\n      return null;\n    } catch (error: unknown) {\n      let message = 'An unknown error occurred during person creation';\n      if (isGraphQLErrorWithMessage(error) && error.response?.errors?.length) {\n        const firstGraphQLError = error.response.errors[0] as any; // Broaden type here for now\n        \n        if (firstGraphQLError.extensions && \n            firstGraphQLError.extensions.originalError && \n            firstGraphQLError.extensions.originalError.code === '23505' && \n            typeof firstGraphQLError.extensions.originalError.message === 'string' &&\n            firstGraphQLError.extensions.originalError.message.includes('contacts_email_key')) {\n          message = 'This email address is already in use. Please use a different email.';\n        } else {\n          message = firstGraphQLError.message || 'GraphQL error during person creation';\n        }\n      } else if (error instanceof Error) {\n        message = error.message;\n      }\n      set({ peopleError: message, peopleLoading: false });\n      console.error(\"Error creating person:\", error);\n      return null;\n    }\n  },\n\n  updatePerson: async (id: string, input: PersonInput) => {\n    set({ peopleLoading: true, peopleError: null });\n    try {\n      const variables: MutationUpdatePersonArgs = { id, input };\n      type UpdatePersonMutationResponse = { updatePerson?: GeneratedPerson | null };\n      const response = await gqlClient.request<UpdatePersonMutationResponse>(\n        UPDATE_PERSON_MUTATION,\n        variables\n      );\n      if (response.updatePerson) {\n        set((state) => ({\n          people: state.people.map((p) => (p.id === id ? response.updatePerson! : p)),\n          peopleLoading: false,\n        }));\n        return response.updatePerson;\n      }\n      set({ peopleLoading: false });\n      return null;\n    } catch (error: unknown) {\n      let message = 'An unknown error occurred during person update';\n      if (isGraphQLErrorWithMessage(error)) {\n        message = error.response?.errors?.[0]?.message || 'GraphQL error';\n      } else if (error instanceof Error) {\n        message = error.message;\n      }\n      set({ peopleError: message, peopleLoading: false });\n      console.error(\"Error updating person:\", error);\n      return null;\n    }\n  },\n\n  deletePerson: async (id: string) => {\n    try {\n      const variables: MutationDeletePersonArgs = { id };\n      type DeletePersonMutationResponse = { deletePerson?: boolean | null };\n      await gqlClient.request<DeletePersonMutationResponse>(DELETE_PERSON_MUTATION, variables);\n      set((state) => ({ people: state.people.filter((p) => p.id !== id) }));\n      return true;\n    } catch (error: unknown) {\n      let message = 'An unknown error occurred during person deletion';\n      if (isGraphQLErrorWithMessage(error)) {\n        message = error.response?.errors?.[0]?.message || 'GraphQL error';\n      } else if (error instanceof Error) {\n        message = error.message;\n      }\n      set({ peopleError: message }); \n      console.error(\"Error deleting person:\", error);\n      return false;\n    }\n  },\n})); ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/stores/usePipelinesStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/stores/usePriceQuoteStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PriceQuoteEntity' is defined but never used.","line":7,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[419,422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[419,422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PriceQuoteCreateInputData' is defined but never used.","line":8,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[501,504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[501,504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PriceQuoteUpdateInputData' is defined but never used.","line":9,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[583,586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[583,586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PriceQuoteCalculatedOutputData' is defined but never used.","line":10,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":105,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":108,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[694,697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[694,697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1925,1928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1925,1928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6094,6097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6094,6097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":222,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7006,7009],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7006,7009],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":224,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":224,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":224,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":224,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":254,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8624,8627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8624,8627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":256,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":256,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":256,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":256,"endColumn":40},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":265,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":265,"endColumn":45,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[9089,9089],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[9089,9089],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":269,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9309,9312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9309,9312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":271,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":271,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":271,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":271,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":336,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":336,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12886,12889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12886,12889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":338,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":338,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":338,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":338,"endColumn":43},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":352,"column":10,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":352,"endColumn":57,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[13534,13534],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[13534,13534],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":360,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":360,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13861,13864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13861,13864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":362,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":362,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":362,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":362,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":369,"column":58,"nodeType":"Property","messageId":"anyAssignment","endLine":369,"endColumn":72},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":404,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":404,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16095,16098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16095,16098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":406,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":406,"endColumn":110},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .response on an `any` value.","line":406,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":406,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":406,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":406,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":407,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":407,"endColumn":35},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":423,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":423,"endColumn":44,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[16765,16765],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[16765,16765],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { gqlClient } from '../lib/graphqlClient';\n// Import generated GraphQL types as they become available, e.g.:\n// import type { PriceQuote, PriceQuoteCreateInput, PriceQuoteUpdateInput, PriceQuoteCalculatedOutputs } from '../generated/graphql/graphql';\n\n// Example types - replace with generated GraphQL types\ninterface PriceQuoteEntity { id: string; name: string; [key: string]: any; }\ninterface PriceQuoteCreateInputData { name?: string | null; [key: string]: any; }\ninterface PriceQuoteUpdateInputData { name?: string | null; [key: string]: any; }\ninterface PriceQuoteCalculatedOutputData { calculated_total_direct_cost?: number | null; [key: string]: any; }\n\ninterface GQLAdditionalCost {\n  id: string;\n  description: string;\n  amount: number;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface GQLInvoiceScheduleEntry {\n  id: string;\n  entry_type: string;\n  due_date: string;\n  amount_due: number;\n  description?: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface PriceQuoteGQL {\n  id: string;\n  deal_id: string;\n  user_id: string;\n  version_number: number;\n  name?: string | null;\n  status: string;\n  base_minimum_price_mp?: number | null;\n  target_markup_percentage?: number | null;\n  final_offer_price_fop?: number | null;\n  overall_discount_percentage?: number | null;\n  upfront_payment_percentage?: number | null;\n  upfront_payment_due_days?: number | null;\n  subsequent_installments_count?: number | null;\n  subsequent_installments_interval_days?: number | null;\n  created_at: string;\n  updated_at: string;\n  calculated_total_direct_cost?: number | null;\n  calculated_target_price_tp?: number | null;\n  calculated_full_target_price_ftp?: number | null;\n  calculated_discounted_offer_price?: number | null;\n  calculated_effective_markup_fop_over_mp?: number | null;\n  escalation_status?: string | null;\n  escalation_details?: Record<string, any> | null;\n  additional_costs: GQLAdditionalCost[];\n  invoice_schedule_entries: GQLInvoiceScheduleEntry[];\n  // deal and user objects are not included here as they are resolved fields, \n  // but their IDs (deal_id, user_id) are present.\n}\n\nexport interface AdditionalCostInputData {\n    description: string;\n    amount: number;\n}\n\nexport interface PriceQuoteInputData { // Used for create/update and preview\n  name?: string | null;\n  status?: string | null;\n  base_minimum_price_mp?: number | null;\n  target_markup_percentage?: number | null;\n  final_offer_price_fop?: number | null;\n  overall_discount_percentage?: number | null;\n  upfront_payment_percentage?: number | null;\n  upfront_payment_due_days?: number | null;\n  subsequent_installments_count?: number | null;\n  subsequent_installments_interval_days?: number | null;\n  additional_costs?: AdditionalCostInputData[];\n}\n\n// --- GraphQL Operations --- (Embed for now, ideally from .gql files or codegen)\n\nconst FRAGMENT_PRICE_QUOTE_FIELDS = `\n  fragment PriceQuoteFields on PriceQuote {\n    id\n    deal_id\n    user_id\n    version_number\n    name\n    status\n    base_minimum_price_mp\n    target_markup_percentage\n    final_offer_price_fop\n    overall_discount_percentage\n    upfront_payment_percentage\n    upfront_payment_due_days\n    subsequent_installments_count\n    subsequent_installments_interval_days\n    created_at\n    updated_at\n    calculated_total_direct_cost\n    calculated_target_price_tp\n    calculated_full_target_price_ftp\n    calculated_discounted_offer_price\n    calculated_effective_markup_fop_over_mp\n    escalation_status\n    escalation_details\n    additional_costs {\n      id\n      description\n      amount\n      created_at\n      updated_at\n    }\n    invoice_schedule_entries {\n      id\n      entry_type\n      due_date\n      amount_due\n      description\n      created_at\n      updated_at\n    }\n  }\n`;\n\nconst FETCH_PRICE_QUOTES_FOR_DEAL = `\n  ${FRAGMENT_PRICE_QUOTE_FIELDS}\n  query PriceQuotesForDeal($dealId: ID!) {\n    priceQuotesForDeal(dealId: $dealId) {\n      ...PriceQuoteFields\n    }\n  }\n`;\n\nconst FETCH_PRICE_QUOTE_BY_ID = `\n  ${FRAGMENT_PRICE_QUOTE_FIELDS}\n  query PriceQuoteById($id: ID!) {\n    priceQuote(id: $id) {\n      ...PriceQuoteFields\n    }\n  }\n`;\n\nconst CREATE_PRICE_QUOTE = `\n  ${FRAGMENT_PRICE_QUOTE_FIELDS}\n  mutation CreatePriceQuote($dealId: ID!, $input: PriceQuoteCreateInput!) {\n    createPriceQuote(dealId: $dealId, input: $input) {\n      ...PriceQuoteFields\n    }\n  }\n`;\n\nconst UPDATE_PRICE_QUOTE = `\n  ${FRAGMENT_PRICE_QUOTE_FIELDS}\n  mutation UpdatePriceQuote($id: ID!, $input: PriceQuoteUpdateInput!) {\n    updatePriceQuote(id: $id, input: $input) {\n      ...PriceQuoteFields\n    }\n  }\n`;\n\nconst DELETE_PRICE_QUOTE = `\n  mutation DeletePriceQuote($id: ID!) {\n    deletePriceQuote(id: $id)\n  }\n`;\n\nconst CALCULATE_PRICE_QUOTE_PREVIEW = `\n  ${FRAGMENT_PRICE_QUOTE_FIELDS}\n  mutation CalculatePriceQuotePreview($dealId: ID, $input: PriceQuoteUpdateInput!) {\n    calculatePriceQuotePreview(dealId: $dealId, input: $input) {\n      ...PriceQuoteFields\n    }\n  }\n`;\n\n// --- Zustand Store Definition ---\n\nexport interface PriceQuoteState {\n  currentQuoteInputs: PriceQuoteInputData; // Form data for create/update\n  currentQuotePreview: PriceQuoteGQL | null; // Result of calculation or full quote preview\n  quotesForDealList: PriceQuoteGQL[];\n  selectedQuoteId: string | null; // ID of the quote being edited/viewed in detail\n  \n  isLoadingList: boolean;\n  isLoadingDetails: boolean; // For fetching a single quote or preview\n  isSubmitting: boolean; // For create/update/delete operations\n  \n  errorList: string | null;\n  errorDetails: string | null;\n  errorSubmitting: string | null;\n\n  fetchPriceQuotesForDeal: (dealId: string) => Promise<void>;\n  fetchPriceQuoteById: (quoteId: string) => Promise<void>; \n  createPriceQuote: (dealId: string, data: PriceQuoteInputData) => Promise<PriceQuoteGQL | null>;\n  updatePriceQuote: (quoteId: string, data: PriceQuoteInputData) => Promise<PriceQuoteGQL | null>;\n  deletePriceQuote: (quoteId: string, dealIdToRefresh?: string) => Promise<boolean>;\n  \n  updateCurrentQuoteInputValue: (field: keyof PriceQuoteInputData, value: any) => void;\n  getQuotePreview: (inputs: PriceQuoteInputData, dealId?: string | null) => Promise<void>;\n  \n  selectQuoteToEdit: (quoteId: string | null) => void; \n  resetCurrentQuoteForm: (initialInputs?: Partial<PriceQuoteInputData>) => void;\n}\n\nexport const usePriceQuoteStore = create<PriceQuoteState>((set, get) => ({\n  currentQuoteInputs: {},\n  currentQuotePreview: null,\n  quotesForDealList: [],\n  selectedQuoteId: null,\n  isLoadingList: false,\n  isLoadingDetails: false,\n  isSubmitting: false,\n  errorList: null,\n  errorDetails: null,\n  errorSubmitting: null,\n\n  fetchPriceQuotesForDeal: async (dealId) => {\n    set({ isLoadingList: true, errorList: null });\n    try {\n      const response = await gqlClient.request<{ priceQuotesForDeal: PriceQuoteGQL[] }>(FETCH_PRICE_QUOTES_FOR_DEAL, { dealId });\n      set({ quotesForDealList: response.priceQuotesForDeal, isLoadingList: false });\n    } catch (error: any) {\n      console.error('fetchPriceQuotesForDeal error:', error);\n      set({ errorList: error.message || 'Failed to fetch quotes for deal', isLoadingList: false });\n    }\n  },\n\n  fetchPriceQuoteById: async (quoteId) => {\n    set({ isLoadingDetails: true, errorDetails: null, selectedQuoteId: quoteId });\n    try {\n      const response = await gqlClient.request<{ priceQuote: PriceQuoteGQL }>(FETCH_PRICE_QUOTE_BY_ID, { id: quoteId });\n      const quote = response.priceQuote;\n\n      // Construct a clean input object for the form from the fetched quote\n      const formInputs: PriceQuoteInputData = {\n        name: quote.name,\n        status: quote.status,\n        base_minimum_price_mp: quote.base_minimum_price_mp,\n        target_markup_percentage: quote.target_markup_percentage,\n        final_offer_price_fop: quote.final_offer_price_fop,\n        overall_discount_percentage: quote.overall_discount_percentage,\n        upfront_payment_percentage: quote.upfront_payment_percentage,\n        upfront_payment_due_days: quote.upfront_payment_due_days,\n        subsequent_installments_count: quote.subsequent_installments_count,\n        subsequent_installments_interval_days: quote.subsequent_installments_interval_days,\n        additional_costs: quote.additional_costs ? quote.additional_costs.map(ac => ({ description: ac.description, amount: ac.amount })) : [],\n      };\n\n      set({ \n        currentQuoteInputs: formInputs, // Populate form with *only* editable fields\n        currentQuotePreview: quote,    // Set preview to the full fetched quote\n        isLoadingDetails: false \n      });\n    } catch (error: any) {\n      console.error('fetchPriceQuoteById error:', error);\n      set({ errorDetails: error.message || 'Failed to fetch quote details', isLoadingDetails: false });\n    }\n  },\n\n  createPriceQuote: async (dealId, data) => {\n    set({ isSubmitting: true, errorSubmitting: null });\n    try {\n      const response = await gqlClient.request<{ createPriceQuote: PriceQuoteGQL }>(CREATE_PRICE_QUOTE, { dealId, input: data });\n      set({ isSubmitting: false });\n      get().fetchPriceQuotesForDeal(dealId); // Refresh list\n      // Optionally, reset form or select the new quote for editing\n      get().resetCurrentQuoteForm();\n      return response.createPriceQuote;\n    } catch (error: any) {\n      console.error('createPriceQuote error:', error);\n      set({ errorSubmitting: error.message || 'Failed to create quote', isSubmitting: false });\n      return null;\n    }\n  },\n\n  updatePriceQuote: async (quoteId, data) => {\n    set({ isSubmitting: true, errorSubmitting: null });\n    try {\n      // Sanitize the input to match PriceQuoteUpdateInput and AdditionalCostInput\n      const sanitizedInput: PriceQuoteInputData = {\n        name: data.name,\n        status: data.status,\n        base_minimum_price_mp: data.base_minimum_price_mp,\n        target_markup_percentage: data.target_markup_percentage,\n        final_offer_price_fop: data.final_offer_price_fop,\n        overall_discount_percentage: data.overall_discount_percentage,\n        upfront_payment_percentage: data.upfront_payment_percentage,\n        upfront_payment_due_days: data.upfront_payment_due_days,\n        subsequent_installments_count: data.subsequent_installments_count,\n        subsequent_installments_interval_days: data.subsequent_installments_interval_days,\n        // Ensure additional_costs only contain description and amount\n        additional_costs: data.additional_costs?.map(ac => ({\n          description: ac.description,\n          amount: ac.amount,\n          // Do NOT include id, created_at, updated_at from existing ac object\n        })) || undefined, // Send undefined if no additional costs, matching schema expectations\n      };\n\n      // Remove keys with undefined values, as GraphQL might not like explicit nulls if undefined is expected\n      // Or, ensure your backend/Zod handles nulls appropriately if you prefer sending them.\n      // For now, let's filter out undefined top-level keys.\n      const cleanInput = Object.fromEntries(\n        Object.entries(sanitizedInput).filter(([_, v]) => v !== undefined)\n      );\n      if (sanitizedInput.additional_costs === undefined) {\n        delete cleanInput.additional_costs; // Ensure it's not sent if undefined\n      }\n\n\n      const response = await gqlClient.request<{ updatePriceQuote: PriceQuoteGQL }>(UPDATE_PRICE_QUOTE, { \n        id: quoteId, \n        input: cleanInput // Use the sanitized and cleaned input\n      });\n      \n      const updatedQuote = response.updatePriceQuote;\n      set(state => ({\n        quotesForDealList: state.quotesForDealList.map(q => q.id === quoteId ? updatedQuote : q),\n        // If the updated quote is the one currently in form, update preview/inputs too\n        currentQuotePreview: state.selectedQuoteId === quoteId ? updatedQuote : state.currentQuotePreview,\n        currentQuoteInputs: state.selectedQuoteId === quoteId ? {\n          name: updatedQuote.name,\n          status: updatedQuote.status,\n          base_minimum_price_mp: updatedQuote.base_minimum_price_mp,\n          target_markup_percentage: updatedQuote.target_markup_percentage,\n          final_offer_price_fop: updatedQuote.final_offer_price_fop,\n          overall_discount_percentage: updatedQuote.overall_discount_percentage,\n          upfront_payment_percentage: updatedQuote.upfront_payment_percentage,\n          upfront_payment_due_days: updatedQuote.upfront_payment_due_days,\n          subsequent_installments_count: updatedQuote.subsequent_installments_count,\n          subsequent_installments_interval_days: updatedQuote.subsequent_installments_interval_days,\n          additional_costs: updatedQuote.additional_costs?.map(ac => ({ description: ac.description, amount: ac.amount })),\n        } : state.currentQuoteInputs,\n        isSubmitting: false\n      }));\n      return updatedQuote;\n    } catch (error: any) {\n      console.error('updatePriceQuote error:', error);\n      set({ errorSubmitting: error.message || 'Failed to update quote', isSubmitting: false });\n      return null;\n    }\n  },\n\n  deletePriceQuote: async (quoteId, dealIdToRefresh) => {\n    set({ isSubmitting: true, errorSubmitting: null });\n    try {\n      await gqlClient.request<{ deletePriceQuote: boolean }>(DELETE_PRICE_QUOTE, { id: quoteId });\n      set({ isSubmitting: false });\n      if (get().selectedQuoteId === quoteId) { // If deleted quote was selected\n        get().resetCurrentQuoteForm();\n      }\n      if (dealIdToRefresh) { // Refresh list if dealId is known\n         get().fetchPriceQuotesForDeal(dealIdToRefresh);\n      } else {\n        // Fallback: remove from list locally if dealIdToRefresh is not provided (less ideal)\n        set(state => ({ \n            quotesForDealList: state.quotesForDealList.filter(q => q.id !== quoteId)\n        }));\n      }\n      return true;\n    } catch (error: any) {\n      console.error('deletePriceQuote error:', error);\n      set({ errorSubmitting: error.message || 'Failed to delete quote', isSubmitting: false });\n      return false;\n    }\n  },\n\n  updateCurrentQuoteInputValue: (field, value) => {\n    set(state => ({\n      currentQuoteInputs: { ...state.currentQuoteInputs, [field]: value },\n      currentQuotePreview: null, // Invalidate preview when inputs change directly\n    }));\n    // Consider if getQuotePreview should be called automatically here, perhaps debounced.\n  },\n\n  getQuotePreview: async (inputs, dealId) => {\n    set({ isLoadingDetails: true, errorDetails: null });\n    try {\n      const state = get();\n      const sourceInputs: PriceQuoteInputData | PriceQuoteGQL = inputs || state.currentQuoteInputs;\n\n      // Construct a new object with only the fields allowed in PriceQuoteUpdateInput\n      const validPayload: PriceQuoteInputData = {\n        name: sourceInputs.name,\n        status: sourceInputs.status,\n        base_minimum_price_mp: sourceInputs.base_minimum_price_mp,\n        target_markup_percentage: sourceInputs.target_markup_percentage,\n        final_offer_price_fop: sourceInputs.final_offer_price_fop,\n        overall_discount_percentage: sourceInputs.overall_discount_percentage,\n        upfront_payment_percentage: sourceInputs.upfront_payment_percentage,\n        upfront_payment_due_days: sourceInputs.upfront_payment_due_days,\n        subsequent_installments_count: sourceInputs.subsequent_installments_count,\n        subsequent_installments_interval_days: sourceInputs.subsequent_installments_interval_days,\n        // Ensure additional_costs are correctly formatted if present\n        additional_costs: sourceInputs.additional_costs ? sourceInputs.additional_costs.map(ac => ({ description: ac.description, amount: ac.amount })) : undefined,\n      };\n      \n      const currentDealId = dealId || state.currentQuotePreview?.deal_id;\n\n      const response = await gqlClient.request<{ calculatePriceQuotePreview: PriceQuoteGQL }>(CALCULATE_PRICE_QUOTE_PREVIEW, { \n        dealId: currentDealId,\n        input: validPayload \n      });\n      set({ currentQuotePreview: response.calculatePriceQuotePreview, isLoadingDetails: false });\n    } catch (error: any) {\n      console.error('getQuotePreview error:', error);\n      const gqlError = error.response?.errors?.[0]?.message || error.message || 'Failed to calculate preview';\n      set({ errorDetails: gqlError, isLoadingDetails: false });\n    }\n  },\n  \n  selectQuoteToEdit: (quoteId) => {\n    if (quoteId) {\n      const quoteToEdit = get().quotesForDealList.find(q => q.id === quoteId);\n      if (quoteToEdit) {\n        set({\n          currentQuoteInputs: quoteToEdit, \n          currentQuotePreview: quoteToEdit, \n          selectedQuoteId: quoteId,\n          errorDetails: null,\n        });\n      } else {\n        // Quote not in list, fetch it (or handle error)\n        get().fetchPriceQuoteById(quoteId);\n      }\n    } else {\n      get().resetCurrentQuoteForm();\n    }\n  },\n\n  resetCurrentQuoteForm: (initialInputs = {}) => {\n    set({\n      currentQuoteInputs: initialInputs,\n      currentQuotePreview: null,\n      selectedQuoteId: null,\n      errorDetails: null,\n      errorSubmitting: null,\n    });\n  },\n})); ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/stores/useStagesStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'get' is defined but never used. Allowed unused args must match /^_/u.","line":82,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'state' is defined but never used. Allowed unused args must match /^_/u.","line":94,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":14}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { gql } from 'graphql-request';\nimport { gqlClient } from '../lib/graphqlClient';\nimport { isGraphQLErrorWithMessage } from '../lib/graphqlUtils';\n\nimport {\n  Stage,\n  CreateStageInput as GeneratedCreateStageInput,\n  UpdateStageInput as GeneratedUpdateStageInput,\n  QueryStagesArgs,\n  MutationCreateStageArgs,\n  MutationUpdateStageArgs,\n  MutationDeleteStageArgs,\n  Maybe,\n} from '../generated/graphql/graphql';\n\n// Re-export core Stage types\nexport type { Stage, GeneratedCreateStageInput, GeneratedUpdateStageInput, Maybe };\n\n// GQL Constants\nconst GET_STAGES_QUERY = gql`\n  query GetStages($pipelineId: ID!) {\n    stages(pipelineId: $pipelineId) {\n      id\n      name\n      order\n      deal_probability\n      pipeline_id\n      stage_type\n    }\n  }\n`;\n\nconst CREATE_STAGE_MUTATION = gql`\n  mutation CreateStage($input: CreateStageInput!) {\n    createStage(input: $input) {\n      id\n      name\n      order\n      deal_probability\n      pipeline_id\n      stage_type\n    }\n  }\n`;\n\nconst UPDATE_STAGE_MUTATION = gql`\n  mutation UpdateStage($id: ID!, $input: UpdateStageInput!) {\n    updateStage(id: $id, input: $input) {\n      id\n      name\n      order\n      deal_probability\n      pipeline_id\n      stage_type\n    }\n  }\n`;\n\nconst DELETE_STAGE_MUTATION = gql`\n  mutation DeleteStage($id: ID!) {\n    deleteStage(id: $id)\n  }\n`;\n\n// State Interface\nexport interface StagesState {\n  stages: Stage[];\n  stagesLoading: boolean;\n  stagesError: string | null;\n  hasInitiallyFetchedStages: boolean;\n  fetchStages: (pipelineId: string) => Promise<void>;\n  createStage: (input: GeneratedCreateStageInput) => Promise<Stage | null>;\n  updateStage: (id: string, input: GeneratedUpdateStageInput) => Promise<Stage | null>;\n  deleteStage: (id: string) => Promise<boolean>;\n  // Add selectedStageId and selectStage if needed, similar to pipelines\n  // selectedStageId: string | null;\n  // selectStage: (stageId: string | null) => void;\n}\n\n// Store Implementation\nexport const useStagesStore = create<StagesState>((set, get) => ({\n  stages: [],\n  stagesLoading: false,\n  stagesError: null,\n  hasInitiallyFetchedStages: false,\n  // selectedStageId: null, // Uncomment if selectedStageId is needed\n\n  // selectStage: (stageId: string | null) => { // Uncomment if selectedStageId is needed\n  //   set({ selectedStageId: stageId });\n  // },\n\n  fetchStages: async (pipelineId: string) => {\n    set(state => ({ \n      stagesLoading: true, \n      stagesError: null\n    }));\n    try {\n      type GetStagesQueryResponse = { stages: Stage[] };\n      const data = await gqlClient.request<GetStagesQueryResponse, QueryStagesArgs>(\n        GET_STAGES_QUERY,\n        { pipelineId }\n      );\n      \n      const fetchedStages = data.stages || [];\n\n      set(state => {\n        // Create a map of existing stages for quick lookups\n        const existingStagesMap = new Map(state.stages.map(s => [s.id, s]));\n\n        // Add or update stages from the fetch\n        fetchedStages.forEach(s => {\n          existingStagesMap.set(s.id, s);\n        });\n\n        // Convert back to an array and sort\n        const mergedStages = Array.from(existingStagesMap.values());\n        mergedStages.sort((a, b) => a.order - b.order);\n\n        return {\n          stages: mergedStages,\n          stagesLoading: false,\n          hasInitiallyFetchedStages: true,\n        };\n      });\n    } catch (error) {\n      console.error(`Error fetching stages for pipeline ${pipelineId}:`, error);\n      let message = `Failed to fetch stages for pipeline ${pipelineId}`;\n      if (isGraphQLErrorWithMessage(error) && error.response && error.response.errors && error.response.errors.length > 0) {\n        message = error.response.errors[0].message;\n      }\n      set({ stagesError: message, stagesLoading: false, hasInitiallyFetchedStages: true });\n    }\n  },\n\n  createStage: async (input: GeneratedCreateStageInput): Promise<Stage | null> => {\n    set({ stagesLoading: true, stagesError: null });\n    try {\n      const response = await gqlClient.request<{ createStage?: Maybe<Stage> }, MutationCreateStageArgs>(\n        CREATE_STAGE_MUTATION,\n        { input }\n      );\n      if (response.createStage) {\n        set((state) => ({\n          stages: [...state.stages, response.createStage!].sort((a: Stage, b: Stage) => a.order - b.order),\n          stagesLoading: false,\n        }));\n        return response.createStage;\n      }\n      set({ stagesLoading: false });\n      return null;\n    } catch (error) {\n      console.error('Error creating stage:', error);\n      let message = 'Failed to create stage';\n      if (isGraphQLErrorWithMessage(error) && error.response && error.response.errors && error.response.errors.length > 0) {\n        message = error.response.errors[0].message;\n      }\n      set({ stagesError: message, stagesLoading: false });\n      return null;\n    }\n  },\n\n  updateStage: async (id: string, input: GeneratedUpdateStageInput): Promise<Stage | null> => {\n    set({ stagesLoading: true, stagesError: null });\n    try {\n      const response = await gqlClient.request<{ updateStage?: Maybe<Stage> }, MutationUpdateStageArgs>(\n        UPDATE_STAGE_MUTATION,\n        { id, input }\n      );\n      if (response.updateStage) {\n        set((state) => ({\n          stages: state.stages.map((s) => (s.id === id ? response.updateStage! : s)).sort((a: Stage, b: Stage) => a.order - b.order),\n          stagesLoading: false,\n        }));\n        return response.updateStage;\n      }\n      set({ stagesLoading: false });\n      return null;\n    } catch (error) {\n      console.error(`Error updating stage ${id}:`, error);\n      let message = `Failed to update stage ${id}`;\n      if (isGraphQLErrorWithMessage(error) && error.response && error.response.errors && error.response.errors.length > 0) {\n        message = error.response.errors[0].message;\n      }\n      set({ stagesError: message, stagesLoading: false });\n      return null;\n    }\n  },\n\n  deleteStage: async (id: string): Promise<boolean> => {\n    // Optimistic update can be considered here if desired\n    set({ stagesLoading: true, stagesError: null }); // Or just set error: null\n    try {\n      await gqlClient.request<{ deleteStage: boolean }, MutationDeleteStageArgs>(\n        DELETE_STAGE_MUTATION,\n        { id }\n      );\n      set((state) => ({\n        stages: state.stages.filter((s) => s.id !== id),\n        stagesLoading: false,\n        // Potentially clear selectedStageId if it matches 'id'\n        // selectedStageId: state.selectedStageId === id ? null : state.selectedStageId,\n      }));\n      return true;\n    } catch (error) {\n      console.error(`Error deleting stage ${id}:`, error);\n      let message = `Failed to delete stage ${id}`;\n      if (isGraphQLErrorWithMessage(error) && error.response && error.response.errors && error.response.errors.length > 0) {\n        message = error.response.errors[0].message;\n      }\n      // Revert optimistic update if it was implemented and failed\n      set({ stagesError: message, stagesLoading: false });\n      return false;\n    }\n  },\n}));\n\nexport default useStagesStore; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/stores/useThemeStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/stores/useViewPreferencesStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":19,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":19,"endColumn":43}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\n\nconst LOCAL_STORAGE_PREFIX = 'tableColumnPreferences_';\n\ninterface TablePreference {\n  visibleColumnKeys: string[];\n}\n\ninterface ViewPreferencesState {\n  tableColumnPreferences: Record<string, TablePreference>;\n  initializeTable: (tableKey: string, defaultVisibleColumnKeys: string[]) => void;\n  setVisibleColumnKeys: (tableKey: string, newVisibleColumnKeys: string[]) => void;\n  resetTableToDefaults: (tableKey: string, defaultVisibleColumnKeys: string[]) => void;\n}\n\nconst loadFromLocalStorage = (tableKey: string): string[] | null => {\n  try {\n    const item = localStorage.getItem(`${LOCAL_STORAGE_PREFIX}${tableKey}`);\n    return item ? JSON.parse(item) : null;\n  } catch (error) {\n    console.warn(`Error reading localStorage key \"${LOCAL_STORAGE_PREFIX}${tableKey}\":`, error);\n    return null;\n  }\n};\n\nconst saveToLocalStorage = (tableKey: string, visibleColumnKeys: string[]): void => {\n  try {\n    localStorage.setItem(`${LOCAL_STORAGE_PREFIX}${tableKey}`, JSON.stringify(visibleColumnKeys));\n  } catch (error) {\n    console.warn(`Error setting localStorage key \"${LOCAL_STORAGE_PREFIX}${tableKey}\":`, error);\n  }\n};\n\nexport const useViewPreferencesStore = create<ViewPreferencesState>((set, get) => ({\n  tableColumnPreferences: {},\n\n  initializeTable: (tableKey, defaultVisibleColumnKeys) => {\n    const currentGlobalState = get().tableColumnPreferences[tableKey];\n    const storedKeysFromLocalStorage = loadFromLocalStorage(tableKey);\n    \n    // Determine the effective keys: localStorage first, then defaults.\n    const effectiveKeys = storedKeysFromLocalStorage !== null ? storedKeysFromLocalStorage : defaultVisibleColumnKeys;\n\n    // Check if the current global state already matches the effective keys.\n    // Comparing arrays by stringifying them. Assumes order matters and elements are simple enough for this.\n    const globalStateMatchesEffectiveKeys = \n      currentGlobalState && \n      JSON.stringify(currentGlobalState.visibleColumnKeys) === JSON.stringify(effectiveKeys);\n\n    if (!globalStateMatchesEffectiveKeys) {\n      set((state) => ({\n        tableColumnPreferences: {\n          ...state.tableColumnPreferences,\n          [tableKey]: { visibleColumnKeys: effectiveKeys },\n        },\n      }));\n    }\n\n    // Ensure localStorage is also up-to-date with effectiveKeys.\n    // This is important if we initialized from defaults (localStorage was empty)\n    // or if localStorage somehow got out of sync.\n    const currentLocalStorageValue = localStorage.getItem(`${LOCAL_STORAGE_PREFIX}${tableKey}`);\n    if (currentLocalStorageValue !== JSON.stringify(effectiveKeys)) {\n        saveToLocalStorage(tableKey, effectiveKeys);\n    }\n  },\n\n  setVisibleColumnKeys: (tableKey, newVisibleColumnKeys) => {\n    set((state) => ({\n      tableColumnPreferences: {\n        ...state.tableColumnPreferences,\n        [tableKey]: { visibleColumnKeys: newVisibleColumnKeys },\n      },\n    }));\n    saveToLocalStorage(tableKey, newVisibleColumnKeys);\n  },\n\n  resetTableToDefaults: (tableKey, defaultVisibleColumnKeys) => {\n    set((state) => ({\n      tableColumnPreferences: {\n        ...state.tableColumnPreferences,\n        [tableKey]: { visibleColumnKeys: defaultVisibleColumnKeys },\n      },\n    }));\n    saveToLocalStorage(tableKey, defaultVisibleColumnKeys);\n  },\n}));\n\n// Example usage (for illustration, not part of the store itself):\n// const { initializeTable, setVisibleColumnKeys, tableColumnPreferences } = useViewPreferencesStore();\n// const peopleTablePrefs = tableColumnPreferences['people_list'];\n// if (peopleTablePrefs) { console.log(peopleTablePrefs.visibleColumnKeys); } ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/theme/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'extendTheme' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StyleFunctionProps' is defined but never used.","line":1,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":54}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ThemeConfig, extendTheme, StyleFunctionProps } from '@chakra-ui/react';\nimport { baseThemeConfig } from './theme.config'; // Import baseThemeConfig\nimport { cdColors as importedCdColors } from './theme.colors'; // Import cdColors\n\n// Export the imported cdColors\nexport const cdColors = importedCdColors;\n\n// Creative Dock Specific Colors based on Visual Identity Guidelines\n\n// Export the imported base config as 'config' for compatibility\nexport const config: ThemeConfig = baseThemeConfig;\n\n// Import themes from their individual files\nimport { creativeDockLightTheme } from './themes/creativeDockLightTheme';\nimport { creativeDockDarkTheme } from './themes/creativeDockDarkTheme';\nimport { daliDarkTheme } from './themes/daliDarkTheme';\nimport { bowieTheme } from './themes/bowieTheme';\nimport { industrialMetalTheme } from './themes/industrialMetalTheme';\nimport { andyWarholTheme } from './themes/andyWarholTheme';\n\n// Export all themes\nexport const themes = {\n  light: creativeDockLightTheme,\n  dark: creativeDockDarkTheme,\n  daliDark: daliDarkTheme,\n  bowie: bowieTheme,\n  industrialMetal: industrialMetalTheme,\n  andyWarhol: andyWarholTheme,\n};\n\n// Default export for compatibility\nexport default creativeDockLightTheme; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/theme/theme.colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/theme/theme.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/theme/themes/andyWarholTheme.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":87,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":207,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":207,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":226,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":226,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":265,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":265,"endColumn":24}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { extendTheme, ThemeConfig, StyleFunctionProps } from '@chakra-ui/react';\nimport { baseThemeConfig } from '../theme.config'; // Import baseThemeConfig\n\nconst warholColors = {\n  popPink: {\n    50: '#FFE6F2',\n    100: '#FFB3D9',\n    200: '#FF80BF',\n    300: '#FF4DA6',\n    400: '#FF1A8C',\n    500: '#FF007F', // Main Hot Pink\n    600: '#E60073',\n    700: '#CC0066',\n    800: '#B30059',\n    900: '#99004D',\n  },\n  popBlue: {\n    50: '#E6F2FF',\n    100: '#B3D9FF',\n    200: '#80BFFF',\n    300: '#4DA6FF',\n    400: '#1A8CFF',\n    500: '#007FFF', // Main Electric Blue\n    600: '#0073E6',\n    700: '#0066CC',\n    800: '#0059B3',\n    900: '#004D99',\n  },\n  popYellow: {\n    50: '#FFFAED',\n    100: '#FFF6DE',\n    200: '#FFEEBF',\n    300: '#FFDE8A',\n    400: '#FFCD55',\n    500: '#FFD700',\n    600: '#E6BF00',\n    700: '#CCA800',\n    800: '#B39200',\n    900: '#997C00',\n  },\n  popGreen: {\n    50: '#F2FFF0',\n    100: '#D9FFD6',\n    200: '#BFFFAD',\n    300: '#A6FF85',\n    400: '#8CFF5C',\n    500: '#7FFF00', // Main Lime Green\n    600: '#73E600',\n    700: '#66CC00',\n    800: '#59B300',\n    900: '#4D9900',\n  },\n  black: '#000000',\n  white: '#FFFFFF',\n  lightGray: '#F0F0F0',\n  darkGray: '#2A2A2A',\n};\n\nexport const andyWarholTheme = extendTheme({\n  config: { ...baseThemeConfig, initialColorMode: 'dark' } as ThemeConfig,\n  fonts: {\n    heading: `'Bebas Neue', cursive`,\n    body: `'Montserrat', sans-serif`,\n  },\n  colors: {\n    primary: warholColors.popPink,\n    secondary: warholColors.popBlue,\n    accent1: warholColors.popYellow,\n    accent2: warholColors.popGreen,\n    pink: warholColors.popPink,\n    blue: warholColors.popBlue,\n    yellow: warholColors.popYellow,\n    green: warholColors.popGreen,\n    gray: {\n      50: warholColors.white,\n      100: warholColors.lightGray,\n      200: '#E0E0E0',\n      700: '#4A4A4A',\n      800: warholColors.darkGray,\n      900: warholColors.black,\n    },\n    error: warholColors.popPink,\n    success: warholColors.popGreen,\n    info: warholColors.popBlue,\n  },\n  styles: {\n    global: (props: StyleFunctionProps) => ({\n      body: {\n        bg: 'gray.900',\n        color: 'gray.50',\n      },\n    }),\n  },\n  components: {\n    Sidebar: {\n      baseStyle: {\n        container: {\n          bg: 'gray.900',\n          borderColor: 'gray.800',\n        },\n        navLink: {\n          color: 'gray.50',\n          _hover: { bg: 'primary.500', color: 'gray.900' },\n        },\n        activeNavLink: {\n          bg: 'primary.500',\n          color: 'gray.900',\n          fontWeight: 'bold',\n           _hover: { bg: 'primary.600' },\n        },\n        headerText: {\n          color: 'primary.500',\n          fontFamily: `'Bebas Neue', cursive`,\n        },\n        userInfoText: {\n            color: 'gray.100'\n        }\n      },\n    },\n    Button: {\n      baseStyle: {\n        fontFamily: `'Montserrat', sans-serif`,\n        borderRadius: '0',\n        textTransform: 'uppercase',\n      },\n      variants: {\n        solid: (props: StyleFunctionProps) => {\n          if (props.colorScheme === 'primary' || props.colorScheme === 'yellow') {\n            return {\n              bg: 'yellow.500',\n              color: 'gray.900',\n              _hover: { bg: 'yellow.600' },\n            };\n          }\n          if (props.colorScheme === 'pink') {\n            return { bg: 'pink.500', color: 'gray.900', _hover: { bg: 'pink.600' } };\n          }\n          if (props.colorScheme === 'blue') {\n            return { bg: 'blue.500', color: 'gray.900', _hover: { bg: 'blue.600' } };\n          }\n          return { \n            bg: 'gray.50',\n            color: 'gray.900',\n            _hover: { bg: 'gray.100'}\n          };\n        },\n        outline: (props: StyleFunctionProps) => {\n          const scheme = props.colorScheme || 'primary';\n          let color = warholColors.popPink[500];\n          if (scheme === 'blue') color = warholColors.popBlue[500];\n          else if (scheme === 'yellow') color = warholColors.popYellow[500];\n          else if (scheme === 'green') color = warholColors.popGreen[500];\n          else if (scheme === 'gray' || scheme === 'black') color = warholColors.lightGray;\n\n          return {\n            borderColor: color,\n            color: color,\n            borderRadius: '0',\n            textTransform: 'uppercase',\n            _hover: { bg: color, color: warholColors.darkGray },\n          };\n        },\n        ghost: (props: StyleFunctionProps) => {\n          let color = warholColors.popPink[500];\n          if (props.colorScheme === 'blue') color = warholColors.popBlue[500];\n          else if (props.colorScheme === 'yellow') color = warholColors.popYellow[500];\n          else if (props.colorScheme === 'green') color = warholColors.popGreen[500];\n          else if (props.colorScheme === 'gray' || !props.colorScheme) color = warholColors.lightGray;\n\n          return {\n            color: color,\n            bg: 'transparent',\n            _hover: {\n              bg: warholColors.darkGray,\n              color: warholColors.popYellow[500],\n            },\n            _active: {\n              bg: warholColors.black,\n              color: warholColors.popYellow[500],\n            },\n            _focus: {\n              boxShadow: `0 0 0 2px ${warholColors.popPink[500]}`,\n            }\n          };\n        },\n      },\n    },\n    Heading: {\n      baseStyle: {\n        fontFamily: `'Bebas Neue', cursive`,\n        textTransform: 'uppercase',\n        color: 'gray.50',\n      },\n    },\n    Card: {\n        baseStyle: {\n            bg: 'gray.800',\n            borderWidth: '2px',\n            borderColor: 'gray.50',\n            borderRadius: '0',\n            padding: 4,\n            color: 'gray.50',\n        }\n    },\n    Table: {\n      variants: {\n        simple: (props: StyleFunctionProps) => ({\n          th: {\n            fontFamily: `'Bebas Neue', cursive`,\n            textTransform: 'uppercase',\n            color: 'gray.900',\n            bg: 'yellow.500',\n            border: '2px solid', \n            borderColor: 'gray.900',\n          },\n          td: {\n            border: '2px solid', \n            borderColor: 'gray.700',\n            color: 'gray.50',\n            bg: 'gray.800',\n          },\n        }),\n      },\n    },\n    Modal: {\n      baseStyle: (props: StyleFunctionProps) => ({\n        dialog: {\n          bg: 'gray.800',\n          border: '4px solid', \n          borderColor: 'yellow.500',\n          borderRadius: '0',\n          color: 'gray.50',\n        },\n        header: {\n          fontFamily: `'Bebas Neue', cursive`,\n          textTransform: 'uppercase',\n          bg: 'yellow.500',\n          color: 'black',\n          padding: 4,\n          borderBottom: '2px solid black',\n        },\n        body: {\n          padding: 6,\n          color: 'gray.50',\n        },\n        footer: {\n            borderTop: '2px solid black',\n            padding: 4,\n        },\n        closeButton: {\n            color: 'black',\n            bg: 'yellow.500',\n            border: '2px solid black',\n            borderRadius: '0',\n            top: '10px',\n            right: '10px',\n            _hover: {\n                bg: 'pink.500',\n                color: 'black'\n            }\n        }\n      })\n    },\n    Menu: {\n      baseStyle: (props: StyleFunctionProps) => ({\n        list: {\n          bg: 'gray.800',\n          border: '2px solid',\n          borderColor: 'yellow.500',\n          borderRadius: '0',\n          color: 'gray.50',\n          boxShadow: `5px 5px 0px ${warholColors.popPink[500]}`,\n        },\n        item: {\n          bg: 'gray.800',\n          color: 'gray.50',\n          fontFamily: `'Montserrat', sans-serif`,\n          textTransform: 'uppercase',\n          borderRadius: '0',\n          _hover: {\n            bg: 'pink.500',\n            color: 'black',\n          },\n          _focus: {\n            bg: 'pink.600',\n            color: 'black',\n          },\n          icon: {\n            color: 'yellow.500',\n            marginRight: '12px',\n            fontSize: '1.2em',\n          }\n        },\n      }),\n    },\n  }\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/theme/themes/bowieTheme.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":70,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":198,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":198,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":223,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":223,"endColumn":23}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { extendTheme, ThemeConfig, StyleFunctionProps } from '@chakra-ui/react';\nimport { baseThemeConfig } from '../theme.config'; // Import baseThemeConfig\n\nconst bowieColors = {\n  primary: { // Electric Blue\n    50: '#E0F3FF',\n    100: '#B3E0FF',\n    200: '#80CFFF',\n    300: '#4DBEFF',\n    400: '#1AADFF',\n    500: '#007CF0', // Main Electric Blue\n    600: '#0063DB',\n    700: '#004EBC',\n    800: '#003B9C',\n    900: '#002C7A',\n  },\n  accentOrange: { // Fiery Orange/Red\n    50: '#FFF0E6',\n    100: '#FFD1B3',\n    200: '#FFB380',\n    300: '#FF944D',\n    400: '#FF751A',\n    500: '#FF4500', // Main OrangeRed\n    600: '#E63E00',\n    700: '#CC3600',\n    800: '#B32F00',\n    900: '#992800',\n  },\n  accentGold: { // Glam Gold\n    50: '#FFF9E6',\n    100: '#FFF0B3',\n    200: '#FFE680',\n    300: '#FFDC4D',\n    400: '#FFD11A',\n    500: '#FFD700', \n    600: '#E6C200',\n    700: '#CCAD00',\n    800: '#B39800',\n    900: '#998300',\n  },\n  neutral: { // Dark Grays/Black & Off-Whites\n    50: '#F5F5F5',\n    100: '#E0E0E0',\n    200: '#C2C2C2',\n    700: '#3C3C3C',\n    800: '#2C2C2C',\n    850: '#1F1F1F',\n    900: '#121212',\n  },\n  red: { \n    500: '#F04A4A',\n    600: '#D93B3B'\n  },\n};\n\nexport const bowieTheme = extendTheme({\n  config: { ...baseThemeConfig, initialColorMode: 'dark' } as ThemeConfig,\n  fonts: {\n    heading: `'Bungee', cursive`,\n    body: `'Roboto Condensed', sans-serif`,\n  },\n  colors: {\n    ...bowieColors,\n    gray: bowieColors.neutral,\n    blue: bowieColors.primary,\n    orange: bowieColors.accentOrange,\n    yellow: bowieColors.accentGold,\n  },\n  styles: {\n    global: (props: StyleFunctionProps) => ({\n      body: {\n        bg: 'neutral.900',\n        color: 'neutral.100',\n      },\n      '*::placeholder': {\n        color: 'neutral.200',\n      },\n    }),\n  },\n  components: {\n    Sidebar: {\n      baseStyle: {\n        container: {\n          bg: 'neutral.850',\n          borderColor: 'neutral.700',\n        },\n        navLink: {\n          color: 'neutral.100',\n          _hover: { bg: 'primary.600', color: 'white' },\n        },\n        activeNavLink: {\n          bg: 'primary.500',\n          color: 'white',\n          fontWeight: 'bold',\n          _hover: { bg: 'primary.500' },\n        },\n        headerText: {\n          color: 'accentGold.500',\n          fontFamily: `'Bungee', cursive`,\n        },\n        userInfoText: {\n            color: 'neutral.200' \n        }\n      },\n    },\n    Button: {\n      variants: {\n        solid: (props: StyleFunctionProps) => {\n          if (props.colorScheme === 'blue' || props.colorScheme === 'primary') {\n            return {\n              bg: 'primary.500',\n              color: 'white',\n              _hover: { bg: 'primary.600' },\n              _active: { bg: 'primary.700' },\n            };\n          }\n          if (props.colorScheme === 'orange' || props.colorScheme === 'accentOrange') {\n             return {\n              bg: 'accentOrange.500',\n              color: 'white',\n              _hover: { bg: 'accentOrange.600' },\n              _active: { bg: 'accentOrange.700' },\n            };\n          }\n           if (props.colorScheme === 'red') { // Ensure red buttons are styled\n            return {\n              bg: 'red.500',\n              color: 'white',\n              _hover: { bg: 'red.600' },\n            };\n          }\n          return {};\n        },\n        outline: (props: StyleFunctionProps) => {\n          if (props.colorScheme === 'accentGold' || props.colorScheme === 'yellow') {\n            return {\n              borderColor: 'accentGold.500',\n              color: 'accentGold.500',\n              _hover: { bg: 'accentGold.500', color: 'neutral.900' },\n              _active: { \n                bg: 'accentGold.500',\n                color: 'neutral.900',\n              }\n            };\n          }\n          return {\n            borderColor: 'primary.500', \n            color: 'primary.400',\n            _hover: {\n              bg: 'primary.500',\n              color: 'white',\n            },\n            _active: { \n              bg: 'primary.500',\n              color: 'white',\n              borderColor: 'primary.500',\n            }\n          };\n        },\n        ghost: (props: StyleFunctionProps) => {\n          if (props.colorScheme === 'red') {\n            return {\n              color: 'red.500',\n              _hover: { bg: 'red.500', color: 'white' },\n            };\n          }\n          if (props.colorScheme === 'primary' || props.colorScheme === 'blue') {\n            return {\n              color: 'primary.400',\n              _hover: { bg: 'primary.500', color: 'white' },\n            };\n          }\n          return {\n            color: 'neutral.100',\n            _hover: { bg: 'neutral.700' },\n          };\n        },\n      },\n    },\n    Card: {\n        baseStyle: {\n            bg: 'neutral.800',\n            borderColor: 'neutral.700',\n            color: 'neutral.100'\n        }\n    },\n    Heading: {\n        baseStyle: {\n            fontFamily: `'Bungee', cursive`,\n        },\n    },\n    Text: {\n        baseStyle: {\n            fontFamily: `'Roboto Condensed', sans-serif`,\n        }\n    },\n    Modal: {\n        baseStyle: (props: StyleFunctionProps) => ({ // Added props for consistency\n            dialog: {\n                bg: 'neutral.800', \n                borderColor: 'neutral.700',\n                color: 'neutral.100' // Ensure text in dialog is light\n            },\n            header: {\n                fontFamily: `'Bungee', cursive`,\n                color: 'primary.400',\n                borderColor: 'neutral.700',\n            },\n            body: {\n                 color: 'neutral.100', // ensure body text is light\n            },\n            footer: {\n                 borderColor: 'neutral.700',\n            },\n            closeButton: {\n                 color: 'neutral.300',\n                _hover: {bg: 'neutral.700'}\n            }\n        })\n    },\n    Table: {\n      variants: {\n        simple: (props: StyleFunctionProps) => ({ // Added props for consistency\n          th: {\n            borderColor: 'neutral.700',\n            color: 'accentGold.500',\n            fontFamily: `'Roboto Condensed', sans-serif`, \n            bg: 'neutral.850', // Darker header for Bowie table\n          },\n          td: {\n            borderColor: 'neutral.700',\n            color: 'neutral.100',\n          },\n          tbody: {\n            tr: {\n              bg: 'neutral.800',\n              _hover: {\n                bg: 'neutral.700',\n              },\n            },\n          },\n        }),\n      },\n    }\n  }\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/theme/themes/creativeDockDarkTheme.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":38,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":129,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":129,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":151,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":173,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":173,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":195,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":195,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":221,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":221,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":229,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":229,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":234,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":234,"endColumn":27}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { extendTheme, ThemeConfig, StyleFunctionProps } from '@chakra-ui/react';\nimport { cdColors } from '../theme.colors'; // Import cdColors directly\nimport { baseThemeConfig } from '../theme.config'; // Import baseThemeConfig\n\nexport const creativeDockDarkTheme = extendTheme({\n  config: { ...baseThemeConfig, initialColorMode: 'dark' } as ThemeConfig, // Use baseThemeConfig\n  fonts: {\n    heading: `'Roboto', sans-serif`,\n    body: `'Roboto', sans-serif`,\n  },\n  colors: {\n    brand: cdColors.brandYellow,\n    primary: cdColors.brandYellow,\n    blue: cdColors.brandBlue,\n    orange: cdColors.brandOrange,\n    green: cdColors.brandGreen,\n    yellow: cdColors.brandYellow,\n\n    gray: {\n      50: cdColors.white, // For contrast elements on dark bg\n      100: '#F0F0F0', // Lightest gray for dark theme (e.g., disabled text on dark)\n      200: '#D6D6D6', // Lighter borders or dividers\n      300: '#BCBCBC', // Light UI elements\n      400: '#A1A1A1', // Secondary text\n      500: '#878787', // Default interactive elements or borders\n      600: '#6D6D6D', // Hover states for light elements, or subtle text\n      700: '#3A3A3A', // Card backgrounds, input fields\n      750: '#2F2F2F', // Slightly darker card hover\n      800: '#242424', // Main component backgrounds (e.g. Modals, Popovers)\n      850: '#1F1F1F', // Sidebar background\n      900: cdColors.black, // Overall page background\n    },\n    error: cdColors.brandOrange,\n    success: cdColors.brandGreen,\n    info: cdColors.brandBlue,\n  },\n  styles: {\n    global: (props: StyleFunctionProps) => ({\n      body: {\n        bg: 'gray.900', \n        color: 'gray.50',\n      },\n      '*::placeholder': {\n        color: 'gray.500',\n      },\n    }),\n  },\n  components: {\n    Sidebar: { \n      baseStyle: {\n        container: {\n          bg: 'gray.850',\n          borderColor: 'gray.700',\n        },\n        navLink: {\n          color: 'gray.100',\n          _hover: { bg: 'brand.700', color: cdColors.black },\n        },\n        activeNavLink: {\n          bg: 'brand.500',\n          color: cdColors.black,\n          fontWeight: 'bold',\n          _hover: { bg: 'brand.500' },\n        },\n        headerText: {\n           color: 'brand.500'\n        },\n        userInfoText: {\n            color: 'gray.200'\n        }\n      },\n    },\n    Button: { \n        variants: {\n            solid: (props: StyleFunctionProps) => {\n                if (props.colorScheme === 'brand' || props.colorScheme === 'primary' || props.colorScheme === 'yellow') {\n                    return {\n                        bg: 'brand.500',\n                        color: cdColors.black,\n                        _hover: { bg: 'brand.400' }, // Lighter yellow for hover on dark\n                        _active: { bg: 'brand.300' },\n                    };\n                }\n                 if (props.colorScheme === 'blue') {\n                     return {\n                        bg: 'blue.500',\n                        color: cdColors.white,\n                        _hover: { bg: 'blue.400' },\n                        _active: { bg: 'blue.300' },\n                    };\n                }\n                if (props.colorScheme === 'red' || props.colorScheme === 'orange') {\n                    return { bg: 'orange.500', color: cdColors.white, _hover: {bg: 'orange.400'} };\n                }\n                if (props.colorScheme === 'green') {\n                    return { bg: 'green.500', color: cdColors.white, _hover: {bg: 'green.400'} };\n                }\n                return {};\n            },\n            outline: (props: StyleFunctionProps) => {\n                // In dark theme, outlines should be lighter to be visible\n                const schemeColor = props.colorScheme === 'blue' ? 'blue' :\n                                    props.colorScheme === 'orange' ? 'orange' :\n                                    props.colorScheme === 'green' ? 'green' : 'brand';\n                const colorValue = schemeColor === 'brand' ? cdColors.brandYellow[300] : \n                                   schemeColor === 'blue' ? cdColors.brandBlue[300] :\n                                   schemeColor === 'orange' ? cdColors.brandOrange[300] :\n                                   cdColors.brandGreen[300];\n                const hoverBg = schemeColor === 'brand' ? 'brand.700' : // Darker yellow bg for hover\n                                schemeColor === 'blue' ? 'blue.700' :\n                                schemeColor === 'orange' ? 'orange.700' :\n                                'green.700';\n                 const hoverColor = schemeColor === 'brand' ? cdColors.black : cdColors.white;\n\n\n                return {\n                    borderColor: colorValue,\n                    color: colorValue,\n                    _hover: {\n                        bg: hoverBg, // Use a dark version of the color for background on hover\n                        color: hoverColor, // Text color might need to change for contrast\n                    }\n                };\n            }\n        }\n    },\n    Input: { \n        variants: {\n            outline: (props: StyleFunctionProps) => ({ // Added props\n                field: {\n                    borderColor: 'gray.700',\n                    bg: 'gray.800', // Darker input background\n                    color: 'gray.50', // Light text color\n                    _hover: { \n                        borderColor: 'gray.600' \n                    },\n                    _focus: {\n                        borderColor: 'brand.500', // Yellow border on focus\n                        boxShadow: `0 0 0 1px ${cdColors.brandYellow[500]}`,\n                        bg: 'gray.800', // Keep bg same on focus\n                    },\n                     _placeholder: { // Explicitly define placeholder color for dark theme inputs\n                        color: 'gray.500',\n                    },\n                }\n            })\n        }\n    },\n    Select: { // Ensuring Select matches Input style for dark theme\n        variants: {\n            outline: (props: StyleFunctionProps) => ({ // Added props\n                field: {\n                    borderColor: 'gray.700',\n                    bg: 'gray.800',\n                    color: 'gray.50',\n                     _hover: { \n                        borderColor: 'gray.600' \n                    },\n                    _focus: {\n                        borderColor: 'brand.500',\n                        boxShadow: `0 0 0 1px ${cdColors.brandYellow[500]}`,\n                         bg: 'gray.800',\n                    },\n                },\n                 icon: {\n                    color: 'gray.400' // Make dropdown icon visible\n                }\n            })\n        }\n    },\n    Table: {\n      variants: {\n        simple: (props: StyleFunctionProps) => ({ // Added props\n          th: {\n            borderColor: 'gray.700',\n            color: 'gray.100', // Lighter headers for dark theme\n            bg: 'gray.800' // Header background\n          },\n          td: {\n            borderColor: 'gray.700',\n            color: 'gray.50', // Light text in cells\n          },\n          tbody: {\n            tr: {\n              bg: 'gray.850', // Slightly different from page bg for definition\n              _hover: {\n                bg: 'gray.750', // Hover for table rows\n              },\n            },\n          },\n        }),\n      },\n    },\n    Modal: {\n        baseStyle: (props: StyleFunctionProps) => ({ // Added props\n            dialog: {\n                bg: 'gray.800', // Dark modal dialog\n                color: 'gray.50'\n            },\n            header: {\n                borderColor: 'gray.700',\n                 color: 'gray.50',\n                 bg: 'gray.800', // Match dialog\n            },\n            body: {\n                color: 'gray.100', // ensure body text is light\n            },\n            footer: {\n                 borderColor: 'gray.700',\n                 bg: 'gray.800', // Match dialog\n            },\n            closeButton: {\n                color: 'gray.300',\n                _hover: {\n                    bg: 'gray.700'\n                }\n            }\n        })\n    },\n    Card: { // Assuming a Card component might exist or be added\n        baseStyle: (props: StyleFunctionProps) => ({ // Added props\n            container: {\n                bg: 'gray.800', // Card background for dark theme\n                borderColor: 'gray.700',\n                color: 'gray.50', // Default text color for content within card\n            }\n        }),\n         variants: {\n            outline: (props: StyleFunctionProps) => ({ // Added props\n                container: {\n                     borderColor: 'gray.700',\n                }\n            }),\n            filled: (props: StyleFunctionProps) => ({ // Added props\n                 container: {\n                    bg: 'gray.750'\n                }\n            })\n        }\n    },\n  }\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/theme/themes/creativeDockLightTheme.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ThemeConfig' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":39,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { extendTheme, ThemeConfig, StyleFunctionProps } from '@chakra-ui/react';\nimport { cdColors } from '../theme.colors'; // Import cdColors directly\nimport { baseThemeConfig } from '../theme.config'; // Import baseThemeConfig\n\n// Creative Dock Specific Colors based on Visual Identity Guidelines\n// const cdColors = { ... }; - REMOVED\n\n// const config: ThemeConfig = { ... }; - REMOVED\n\nexport const creativeDockLightTheme = extendTheme({\n  config: baseThemeConfig, // Use baseThemeConfig directly\n  fonts: {\n    heading: `'Roboto', sans-serif`,\n    body: `'Roboto', sans-serif`,\n  },\n  colors: {\n    brand: cdColors.brandYellow, // Now uses imported cdColors\n    primary: cdColors.brandYellow,\n    blue: cdColors.brandBlue,\n    orange: cdColors.brandOrange,\n    green: cdColors.brandGreen,\n    yellow: cdColors.brandYellow,\n    gray: {\n      50: cdColors.white,\n      100: cdColors.beige,\n      200: '#EAEAEA',\n      300: '#D1D1D1',\n      400: '#B8B8B8',\n      500: '#9F9F9F',\n      600: '#7F7F7F',\n      700: '#4A4A4A',\n      900: cdColors.black,\n    },\n    error: cdColors.brandOrange,\n    success: cdColors.brandGreen,\n    info: cdColors.brandBlue,\n  },\n  styles: {\n    global: (props: StyleFunctionProps) => ({\n      body: {\n        bg: 'gray.50',\n        color: 'gray.900',\n      },\n    }),\n  },\n  components: {\n    Sidebar: {\n      baseStyle: {\n        container: {\n          bg: 'gray.100',\n          borderColor: 'gray.200',\n        },\n        navLink: {\n          color: 'gray.900',\n          _hover: { bg: 'brand.100' },\n        },\n        activeNavLink: {\n          bg: 'brand.500',\n          color: cdColors.black,\n          fontWeight: 'bold',\n          _hover: { bg: 'brand.500' },\n        },\n        headerText: {\n          color: 'brand.500',\n        },\n        userInfoText: {\n          color: '#4A4A4A', // Directly using a darker gray if gray.800 is not in the scale\n        }\n      },\n    },\n    Button: {\n      variants: {\n        solid: (props: StyleFunctionProps) => {\n          if (props.colorScheme === 'brand' || props.colorScheme === 'primary' || props.colorScheme === 'yellow') {\n            return {\n              bg: 'brand.500',\n              color: cdColors.black,\n              _hover: { bg: 'brand.600' },\n              _active: { bg: 'brand.700' },\n            };\n          }\n          if (props.colorScheme === 'blue') {\n            return {\n              bg: 'blue.500',\n              color: cdColors.white,\n              _hover: { bg: 'blue.600' },\n              _active: { bg: 'blue.700' },\n            };\n          }\n          if (props.colorScheme === 'red' || props.colorScheme === 'orange') {\n            return { bg: 'orange.500', color: cdColors.white, _hover: { bg: 'orange.600' } };\n          }\n          if (props.colorScheme === 'green') {\n            return { bg: 'green.500', color: cdColors.white, _hover: { bg: 'green.600' } };\n          }\n          return {};\n        },\n        outline: (props: StyleFunctionProps) => {\n          const schemeColor = props.colorScheme === 'blue' ? 'blue' :\n            props.colorScheme === 'orange' ? 'orange' :\n            props.colorScheme === 'green' ? 'green' : 'brand';\n          return {\n            borderColor: `${schemeColor}.500`,\n            color: `${schemeColor}.500`,\n            _hover: {\n              bg: `${schemeColor}.50`,\n            }\n          };\n        }\n      }\n    },\n  }\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/theme/themes/daliDarkTheme.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":100,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { extendTheme, ThemeConfig, StyleFunctionProps } from '@chakra-ui/react';\nimport { baseThemeConfig } from '../theme.config'; // Import baseThemeConfig\n\nconst daliDarkColorsPalette = { // Renamed to avoid direct self-reference issue initially\n  primary: { // Deep Indigo/Prussian Blue\n    50: '#E6E9ED',\n    100: '#BCC6D5',\n    200: '#93A3BD',\n    300: '#697FA4',\n    400: '#405B8C',\n    500: '#0A2342', // Main Dark Prussian Blue\n    600: '#09203B',\n    700: '#081C33',\n    800: '#06182C',\n    900: '#051424',\n  },\n  accent1: { // Ochre/Muted Gold\n    50: '#F9F3ED',\n    100: '#EEDDCF',\n    200: '#E2C7B1',\n    300: '#D7B193',\n    400: '#CCA075',\n    500: '#C08A53', // Main Muted Gold/Ochre\n    600: '#AD764A',\n    700: '#9A6841',\n    800: '#875A38',\n    900: '#744C2F',\n  },\n  accent2: { // Burnt Sienna/Muted Red\n    50: '#F5EDED',\n    100: '#E5D0D0',\n    200: '#D6B3B3',\n    300: '#C69595',\n    400: '#B57878',\n    500: '#A45D5D', // Main Muted Burnt Sienna\n    600: '#8E5151',\n    700: '#7F4848',\n    800: '#6F3F3F',\n    900: '#5F3636',\n  },\n  surrealAccent: { // Cadmium Yellow highlight (like melting clocks)\n    500: '#FFD700',\n  },\n  mutedTeal: {\n    50: '#EAF2F0',\n    100: '#CADBCD',\n    200: '#AAC5AB',\n    300: '#8BAE8A',\n    400: '#6D9869',\n    500: '#4A7C59', // Main Muted Teal\n    600: '#416F50',\n    700: '#386247',\n    800: '#2F553E',\n    900: '#264835',\n  },\n  neutral: { // Charcoals, Off-Blacks, Desaturated Beige\n    50: '#D1C7B7',  // Desaturated Beige (for text on darkest bg)\n    100: '#A39E93',\n    200: '#7A756F',\n    300: '#59544E',\n    400: '#403C37',\n    500: '#2C2824',\n    600: '#211E1A',  // Dark Charcoal\n    700: '#1A1714',  // Darker Charcoal (cards/components)\n    800: '#12100E',  // Very Dark (sidebar/modal backgrounds)\n    900: '#0C0B0A',  // Off-Black (main body background)\n  },\n  // Define semantic colors directly or using fully defined parts of the palette\n  semanticRed: { 500: '#C53030' }, \n  semanticGreen: { 500: '#4A7C59' }, // Direct value from mutedTeal\n};\n\n// Now define the final daliDarkColors with aliases\nconst daliDarkColors = {\n    ...daliDarkColorsPalette,\n    success: { 500: daliDarkColorsPalette.mutedTeal[500] },\n    warning: { 500: '#DD6B20' }, // Placeholder, can be mapped to accent1 or similar later\n    error: { 500: daliDarkColorsPalette.semanticRed[500] },\n    info: { 500: daliDarkColorsPalette.primary[500] },\n};\n\nexport const daliDarkTheme = extendTheme({\n  config: { ...baseThemeConfig, initialColorMode: 'dark' } as ThemeConfig,\n  fonts: {\n    heading: `'Cinzel Decorative', serif`,\n    body: `'Lato', sans-serif`,\n  },\n  colors: {\n    ...daliDarkColors,\n    gray: daliDarkColors.neutral, // Map Chakra's gray to our neutral palette\n    // Map other Chakra colors if needed, or use specific Dali colors directly\n    blue: daliDarkColors.primary,\n    red: daliDarkColors.semanticRed,\n    green: daliDarkColors.semanticGreen, // Will use the new mutedTeal\n    orange: daliDarkColors.accent2, // Example mapping: orange to Burnt Sienna\n    yellow: daliDarkColors.surrealAccent, // Example mapping: yellow to Surreal Accent\n    teal: daliDarkColors.mutedTeal, // Make mutedTeal available as 'teal' color scheme\n  },\n  styles: {\n    global: (props: StyleFunctionProps) => ({\n      body: {\n        bg: 'neutral.900',\n        color: 'neutral.50',\n      },\n      '*::placeholder': {\n        color: 'neutral.200',\n      },\n    }),\n  },\n  components: {\n    // TODO: Rework all component styles for Dali theme\n    Sidebar: {\n      baseStyle: {\n        container: {\n          bg: 'neutral.800', // Very dark sidebar\n          borderColor: 'neutral.700',\n        },\n        navLink: {\n          color: 'neutral.100',\n          _hover: { bg: 'primary.600', color: 'accent1.400' },\n        },\n        activeNavLink: {\n          bg: 'primary.500',\n          color: 'accent1.500', // Ochre/Gold active link text\n          fontWeight: 'bold',\n          borderLeft: '3px solid',\n          borderColor: 'accent1.500',\n          _hover: { bg: 'primary.500' },\n        },\n        headerText: {\n          color: 'accent1.400',\n          fontFamily: `'Cinzel Decorative', serif`,\n        },\n        userInfoText: {\n          color: 'neutral.200',\n        },\n      },\n    },\n    Button: {\n      baseStyle: {\n        fontFamily: `'Lato', sans-serif`,\n      },\n      variants: {\n        solid: (props: StyleFunctionProps) => {\n          if (props.colorScheme === 'primary' || props.colorScheme === 'blue') {\n            return {\n              bg: 'primary.500',\n              color: 'neutral.50',\n              _hover: { bg: 'primary.600' },\n              _active: { bg: 'primary.700' },\n            };\n          }\n          // surrealAccent is mapped to yellow\n          if (props.colorScheme === 'accent1' || props.colorScheme === 'yellow') { \n            return {\n              bg: daliDarkColors.surrealAccent[500], // Use 500 directly for yellow\n              color: daliDarkColors.neutral[900], // Dark text for yellow button\n              _hover: { bg: daliDarkColors.accent1[500] }, // Hover with Ochre/Gold 500\n            };\n          }\n          if (props.colorScheme === 'red' || props.colorScheme === 'error') {\n            return {\n              bg: daliDarkColors.semanticRed[500],\n              color: 'neutral.50',\n              _hover: {bg: '#B22222'}, // Hardcoded darker red for hover\n            }\n          }\n          // Default solid button\n          return {\n            bg: 'neutral.700',\n            color: 'neutral.100',\n            _hover: {bg: 'neutral.600'}\n          };\n        },\n        outline: (props: StyleFunctionProps) => {\n          let currentSchemeKey: keyof typeof colorValues = 'default';\n          if (props.colorScheme === 'primary' || props.colorScheme === 'blue') currentSchemeKey = 'primary';\n          else if (props.colorScheme === 'accent1') currentSchemeKey = 'accent1';\n          else if (props.colorScheme === 'accent2') currentSchemeKey = 'accent2';\n          else if (props.colorScheme === 'yellow') currentSchemeKey = 'surrealAccent'; // map yellow to surrealAccent\n          else if (props.colorScheme === 'red' || props.colorScheme === 'error') currentSchemeKey = 'red';\n          \n          const colorValues = {\n            primary: daliDarkColors.primary[300],\n            accent1: daliDarkColors.accent1[400],\n            accent2: daliDarkColors.accent2[400],\n            surrealAccent: daliDarkColors.surrealAccent[500],\n            red: daliDarkColors.semanticRed[500],\n            default: daliDarkColors.neutral[300],\n          };\n\n          const hoverBgValues = {\n            primary: daliDarkColors.primary[700],\n            accent1: daliDarkColors.accent1[700],\n            accent2: daliDarkColors.accent2[700],\n            surrealAccent: daliDarkColors.accent1[500], // Use Ochre 500 for yellow hover fill\n            red: daliDarkColors.semanticRed[500], \n            default: daliDarkColors.neutral[700],\n          };\n          \n          const borderColor = colorValues[currentSchemeKey];\n          const hoverBg = hoverBgValues[currentSchemeKey];\n          const hoverColor = currentSchemeKey === 'surrealAccent' ? daliDarkColors.neutral[900] : daliDarkColors.neutral[50];\n\n          return {\n            borderColor: borderColor,\n            color: borderColor,\n            _hover: { \n              bg: hoverBg,\n              color: hoverColor\n            },\n          };\n        },\n        ghost: (props: StyleFunctionProps) => {\n            let currentSchemeKey: keyof typeof colorValues = 'default';\n            if (props.colorScheme === 'primary' || props.colorScheme === 'blue') currentSchemeKey = 'primary';\n            else if (props.colorScheme === 'accent1') currentSchemeKey = 'accent1';\n            else if (props.colorScheme === 'accent2') currentSchemeKey = 'accent2';\n            else if (props.colorScheme === 'yellow') currentSchemeKey = 'surrealAccent'; // map yellow to surrealAccent\n            else if (props.colorScheme === 'red' || props.colorScheme === 'error') currentSchemeKey = 'red';\n\n            const colorValues = {\n                primary: daliDarkColors.primary[300],\n                accent1: daliDarkColors.accent1[400],\n                accent2: daliDarkColors.accent2[400],\n                surrealAccent: daliDarkColors.surrealAccent[500],\n                red: daliDarkColors.semanticRed[500],\n                default: daliDarkColors.neutral[200],\n            };\n\n            const hoverBgValues = {\n                primary: daliDarkColors.primary[800],\n                accent1: daliDarkColors.accent1[800],\n                accent2: daliDarkColors.accent2[800],\n                surrealAccent: daliDarkColors.accent1[800], // Use Ochre 800 for yellow hover fill\n                red: daliDarkColors.semanticRed[500],\n                default: daliDarkColors.neutral[700],\n            }\n\n            const color = colorValues[currentSchemeKey];\n            const hoverBg = hoverBgValues[currentSchemeKey];\n            const hoverColor = currentSchemeKey === 'surrealAccent' ? daliDarkColors.neutral[900] : daliDarkColors.neutral[50];\n\n            return {\n                color: color,\n                _hover: { \n                    bg: hoverBg,\n                    color: hoverColor\n                },\n            };\n        }\n      },\n    },\n    // Other components (Card, Modal, Table, Input, Select) will need similar rework\n    Card: {\n        baseStyle: {\n            bg: 'neutral.800',\n            borderColor: 'neutral.700',\n            color: 'neutral.100',\n        }\n    },\n    Heading: {\n        baseStyle: {\n            fontFamily: `'Cinzel Decorative', serif`,\n            color: 'neutral.100',\n        },\n    },\n    Text: {\n        baseStyle: {\n            fontFamily: `'Lato', sans-serif`,\n            color: 'neutral.100',\n        }\n    },\n    Modal: {\n        baseStyle: {\n            dialog: {\n                bg: 'neutral.800',\n                borderColor: 'neutral.700',\n                color: 'neutral.100'\n            },\n            header: {\n                fontFamily: `'Cinzel Decorative', serif`,\n                color: 'accent1.400',\n                borderColor: 'neutral.600',\n            },\n            footer: {\n                 borderColor: 'neutral.600',\n            },\n            closeButton:{\n                _hover: {bg: 'neutral.700'}\n            }\n        }\n    },\n    Table: {\n      variants: {\n        simple: {\n          th: {\n            fontFamily: `'Lato', sans-serif`,\n            color: 'neutral.100',\n            borderColor: 'neutral.600',\n            bg: 'neutral.700'\n          },\n          td: {\n            borderColor: 'neutral.700',\n            color: 'neutral.50',\n          },\n          tbody: {\n            tr: {\n              bg: 'neutral.800',\n              _hover: {\n                bg: 'neutral.700',\n              },\n            },\n          },\n        },\n      },\n    },\n    Input: {\n        variants: {\n            outline: {\n                field: {\n                    bg: 'neutral.700',\n                    borderColor: 'neutral.600',\n                    _hover: { borderColor: 'neutral.500' },\n                    _focus: {\n                        borderColor: 'accent1.500',\n                        boxShadow: `0 0 0 1px ${daliDarkColors.accent1[500]}`\n                    }\n                }\n            }\n        }\n    },\n    Select: {\n        variants: {\n            outline: {\n                field: {\n                    bg: 'neutral.700',\n                    borderColor: 'neutral.600',\n                    _hover: { borderColor: 'neutral.500' },\n                    _focus: {\n                        borderColor: 'accent1.500',\n                        boxShadow: `0 0 0 1px ${daliDarkColors.accent1[500]}`\n                    }\n                }\n            }\n        }\n    }\n  },\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/theme/themes/industrialMetalTheme.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":83,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":201,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":201,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":227,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":227,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":251,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":251,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":269,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":269,"endColumn":28}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { extendTheme, ThemeConfig, StyleFunctionProps } from '@chakra-ui/react';\nimport { baseThemeConfig } from '../theme.config'; // Import baseThemeConfig\n\nconst industrialColors = {\n  primary: { // Dark Steel Grey\n    50: '#EAEAEA',\n    100: '#C5C5C5',\n    200: '#A0A0A0',\n    300: '#7B7B7B',\n    400: '#5F5F5F',\n    500: '#4A4A4A', // Main Steel\n    600: '#3E3E3E',\n    700: '#323232',\n    800: '#262626',\n    900: '#1A1A1A',\n  },\n  neutral: { // Concrete & Ash\n    50: '#E0E0E0',\n    100: '#CCCCCC',\n    200: '#A9A9A9',\n    300: '#8C8C8C',\n    400: '#6F6F6F',\n    500: '#545454',\n    600: '#404040',\n    700: '#3A3A3A',\n    800: '#303030',\n    850: '#262626',\n    900: '#1C1C1C',\n  },\n  accentRust: { // Rusted Orange/Brown\n    50: '#F3EAE4',\n    100: '#E2CABB',\n    200: '#D1AA91',\n    300: '#BF8968',\n    400: '#AD6F45',\n    500: '#7D4A23', // Main Rust\n    600: '#6F4220',\n    700: '#603A1C',\n    800: '#523118',\n    900: '#432814',\n  },\n  accentHazard: { // Hazard Yellow/Orange\n    50: '#FFF9E6',\n    100: '#FFEDB3',\n    200: '#FFE080',\n    300: '#FFD44D',\n    400: '#FFC71A',\n    500: '#FFAA00', // Main Hazard Yellow/Orange\n    600: '#E69900',\n    700: '#CC8800',\n    800: '#B37700',\n    900: '#996600',\n  },\n  semanticRed: { // For errors/delete\n    50: '#FBE6E9',\n    100: '#F3B9C2',\n    200: '#EB8C9B',\n    300: '#E25F73',\n    400: '#DA324C',\n    500: '#B00020', // Main Error Red\n    600: '#9D001C',\n    700: '#8A0019',\n    800: '#770015',\n    900: '#640011',\n  },\n};\n\nexport const industrialMetalTheme = extendTheme({\n  config: { ...baseThemeConfig, initialColorMode: 'dark' } as ThemeConfig,\n  fonts: {\n    heading: `'Press Start 2P', cursive`,\n    body: `'Roboto Condensed', sans-serif`,\n  },\n  colors: {\n    ...industrialColors,\n    gray: industrialColors.neutral,\n    blue: industrialColors.primary, \n    red: industrialColors.semanticRed,\n    orange: industrialColors.accentHazard, \n    yellow: industrialColors.accentHazard, \n  },\n  styles: {\n    global: (props: StyleFunctionProps) => ({\n      body: {\n        bg: 'neutral.900', \n        color: 'neutral.100', \n      },\n      '*::placeholder': {\n        color: 'neutral.300',\n      },\n    }),\n  },\n  components: {\n    Sidebar: {\n      baseStyle: {\n        container: {\n          bg: 'neutral.900', \n          borderColor: 'neutral.800', \n        },\n        navLink: {\n          color: 'neutral.100',\n          _hover: { bg: 'primary.700' },\n        },\n        activeNavLink: {\n          bg: 'primary.600', \n          color: 'white',\n          fontWeight: 'normal',\n          borderLeft: '3px solid',\n          borderColor: 'primary.400', \n           _hover: { bg: 'primary.600' },\n        },\n        headerText: {\n          color: 'neutral.100',\n          fontFamily: `'Press Start 2P', cursive`,\n        },\n        userInfoText: {\n            color: 'neutral.200'\n        }\n      },\n    },\n    Button: {\n      baseStyle: {\n        fontFamily: `'Roboto Condensed', sans-serif`,\n      },\n      variants: {\n        solid: (props: StyleFunctionProps) => {\n          if (props.colorScheme === 'primary' || props.colorScheme === 'blue') {\n            return {\n              bg: 'primary.500',\n              color: 'white',\n              _hover: { bg: 'primary.600' },\n              _active: { bg: 'primary.700' },\n            };\n          }\n          if (props.colorScheme === 'orange' || props.colorScheme === 'accentHazard' || props.colorScheme === 'yellow') {\n            return {\n              bg: 'accentHazard.500',\n              color: 'neutral.900', \n              _hover: { bg: 'accentHazard.600' },\n              _active: { bg: 'accentHazard.700' },\n            };\n          }\n          if (props.colorScheme === 'red' || props.colorScheme === 'semanticRed') {\n            return {\n                bg: 'semanticRed.500',\n                color: 'white',\n                _hover: { bg: 'semanticRed.600'}\n            }\n          }\n          return {};\n        },\n        outline: (props: StyleFunctionProps) => {\n           if (props.colorScheme === 'accentHazard' || props.colorScheme === 'yellow') {\n            return {\n              borderColor: 'accentHazard.500',\n              color: 'accentHazard.500',\n              _hover: { bg: 'accentHazard.500', color: 'neutral.900' },\n            };\n          }\n          return { \n            borderColor: 'primary.500',\n            color: 'primary.300',\n            _hover: { bg: 'primary.500', color: 'white' },\n          };\n        },\n        ghost: (props: StyleFunctionProps) => {\n          if (props.colorScheme === 'red' || props.colorScheme === 'semanticRed') {\n            return {\n              color: 'semanticRed.400',\n              _hover: { bg: 'semanticRed.500', color: 'white' },\n            };\n          }\n          return { \n            color: 'primary.300',\n            _hover: { bg: 'primary.600', color: 'white' },\n          };\n        },\n      },\n    },\n    Card: { \n        baseStyle: {\n            bg: 'neutral.800',\n            borderColor: 'neutral.700',\n            color: 'neutral.100', // Ensure card text is light\n        }\n    },\n    Heading: {\n        baseStyle: {\n            fontFamily: `'Roboto Condensed', sans-serif`,\n            fontWeight: '700',\n            color: 'neutral.50',\n        },\n    },\n    Text: {\n        baseStyle: {\n            fontFamily: `'Roboto Condensed', sans-serif`,\n            color: 'neutral.200',\n        }\n    },\n    Modal: {\n        baseStyle: (props: StyleFunctionProps) => ({ // Added props\n            dialog: {\n                bg: 'neutral.800',\n                borderColor: 'neutral.700',\n                color: 'neutral.100'\n            },\n            header: {\n                fontFamily: `'Roboto Condensed', sans-serif`,\n                fontWeight: '700',\n                color: 'neutral.100',\n                borderColor: 'neutral.700',\n            },\n            body: {\n                color: 'neutral.100',\n            },\n            footer: {\n                borderColor: 'neutral.700',\n            },\n            closeButton:{\n                color: 'neutral.300',\n                _hover: {bg: 'neutral.700'}\n            }\n        })\n    },\n    Table: {\n      variants: {\n        simple: (props: StyleFunctionProps) => ({ // Added props\n          th: {\n            fontFamily: `'Roboto Condensed', sans-serif`,\n            color: 'neutral.200',\n            borderColor: 'neutral.800',\n            bg: 'neutral.850', // Darker header\n          },\n          td: {\n            borderColor: 'neutral.700',\n            color: 'neutral.100',\n          },\n          tbody: {\n            tr: {\n              bg: 'neutral.850',\n              _hover: {\n                bg: 'neutral.800',\n              },\n            },\n          },\n        }),\n      },\n    },\n    Input: {\n        variants: {\n            outline: (props: StyleFunctionProps) => ({ // Added props\n                field: {\n                    bg: 'neutral.850',\n                    borderColor: 'neutral.600',\n                    color: 'neutral.100',\n                    _hover: { borderColor: 'neutral.500' },\n                    _focus: {\n                        borderColor: 'primary.400',\n                        boxShadow: `0 0 0 1px ${industrialColors.primary[400]}`,\n                        bg: 'neutral.850', // Keep background same on focus\n                    },\n                     _placeholder: { color: 'neutral.400' },\n                }\n            })\n        }\n    },\n    Select: {\n        variants: {\n            outline: (props: StyleFunctionProps) => ({ // Added props\n                field: {\n                    bg: 'neutral.850',\n                    borderColor: 'neutral.600',\n                    color: 'neutral.100',\n                    _hover: { borderColor: 'neutral.500' },\n                     _focus: {\n                        borderColor: 'primary.400',\n                        boxShadow: `0 0 0 1px ${industrialColors.primary[400]}`,\n                        bg: 'neutral.850',\n                    },\n                },\n                icon: {\n                    color: 'neutral.400' // Ensure icon is visible\n                }\n            })\n        }\n    },\n  }\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/frontend/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/activityService.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":10,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":10,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":10,"column":42,"nodeType":"Identifier","messageId":"unsafeCall","endLine":10,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":11,"column":18,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":11,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":18,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":18,"endColumn":24},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'Activity' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":30,"column":105,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":30,"endColumn":113},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":31,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":31,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":31,"column":42,"nodeType":"Identifier","messageId":"unsafeCall","endLine":31,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":32,"column":11,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":32,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":39,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":39,"endColumn":24},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'Activity' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":42,"column":18,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":42,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":59,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":59,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":59,"column":42,"nodeType":"Identifier","messageId":"unsafeCall","endLine":59,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":78,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":78,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":88,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":88,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":88,"column":42,"nodeType":"Identifier","messageId":"unsafeCall","endLine":88,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":92,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":92,"column":35,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":92,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":92,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":92,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subject on an `error` typed value.","line":93,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":93,"column":38,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":93,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subject on an `error` typed value.","line":93,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subject on an `error` typed value.","line":93,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .due_date on an `error` typed value.","line":94,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":94,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":94,"column":39,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":94,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .due_date on an `error` typed value.","line":94,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":94,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .due_date on an `error` typed value.","line":94,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":94,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `error` typed value.","line":95,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":95,"column":36,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":95,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `error` typed value.","line":95,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `error` typed value.","line":95,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .is_done on an `error` typed value.","line":96,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":96,"column":38,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":96,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .is_done on an `error` typed value.","line":96,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .is_done on an `error` typed value.","line":96,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_id on an `error` typed value.","line":97,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":97,"column":38,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":97,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_id on an `error` typed value.","line":97,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_id on an `error` typed value.","line":97,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .person_id on an `error` typed value.","line":98,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":98,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":98,"column":40,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":98,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .person_id on an `error` typed value.","line":98,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":98,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .person_id on an `error` typed value.","line":98,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":98,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .organization_id on an `error` typed value.","line":99,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":99,"column":46,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":99,"endColumn":99},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .organization_id on an `error` typed value.","line":99,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .organization_id on an `error` typed value.","line":99,"column":84,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":99},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `{}`.","line":101,"column":19,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":101,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":105,"column":11,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":105,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":116,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":116,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":128,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":128,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":128,"column":42,"nodeType":"Identifier","messageId":"unsafeCall","endLine":128,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":135,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":135,"endColumn":24}],"suppressedMessages":[],"errorCount":53,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SupabaseClient } from '@supabase/supabase-js';\nimport { GraphQLError } from 'graphql';\nimport { getAuthenticatedClient, handleSupabaseError } from './serviceUtils';\nimport type { Activity, CreateActivityInput, UpdateActivityInput } from './generated/graphql';\n\n/**\n * Creates a new activity for the given user.\n */\nexport const createActivity = async (userId: string, input: CreateActivityInput, accessToken: string): Promise<Activity> => {\n  const supabaseClient: SupabaseClient = getAuthenticatedClient(accessToken);\n  const { error, data } = await supabaseClient\n    .from('activities')\n    .insert({ ...input, user_id: userId })\n    .select()\n    .single();\n\n  if (error) {\n    handleSupabaseError(error, 'creating activity');\n  }\n  if (!data) {\n    throw new GraphQLError('Failed to create activity: No data returned');\n  }\n\n  return data as Activity;\n};\n\n/**\n * Retrieves a single activity by its ID, ensuring the user has access.\n */\nexport const getActivityById = async (userId: string, activityId: string, accessToken: string): Promise<Activity | null> => {\n  const supabaseClient: SupabaseClient = getAuthenticatedClient(accessToken);\n  const { data, error } = await supabaseClient\n    .from('activities')\n    .select('*')\n    .match({ id: activityId, user_id: userId }) \n    .maybeSingle();\n\n  if (error && error.code !== 'PGRST116') {\n    handleSupabaseError(error, 'getting activity by ID');\n  }\n\n  return data as Activity | null;\n};\n\n// Define a simple filter type for getActivities\nexport interface ActivityFilter {\n    dealId?: string;\n    personId?: string;\n    organizationId?: string;\n    isDone?: boolean;\n}\n\n/**\n * Fetches activities for a given user, optionally filtered.\n * Note: RLS policies are expected to enforce that users can only see their own activities\n * or activities related to entities they have access to.\n */\nexport const getActivities = async (_userId: string, accessToken: string, filter?: ActivityFilter): Promise<Activity[]> => {\n  const supabaseClient: SupabaseClient = getAuthenticatedClient(accessToken);\n  let query = supabaseClient\n    .from('activities')\n    .select('*');\n    // RLS handles user_id filtering\n\n  // Apply filters (logic remains the same)\n  if (filter?.dealId) query = query.eq('deal_id', filter.dealId);\n  if (filter?.personId) query = query.eq('person_id', filter.personId);\n  if (filter?.organizationId) query = query.eq('organization_id', filter.organizationId);\n  if (filter?.isDone !== undefined) query = query.eq('is_done', filter.isDone);\n\n  // Ordering logic remains the same\n  query = query.order('due_date', { ascending: true, nullsFirst: false })\n               .order('created_at', { ascending: false });\n\n  const { data, error } = await query;\n\n  if (error) {\n    handleSupabaseError(error, 'getting activities');\n  }\n\n  return (data || []) as Activity[];\n};\n\n/**\n * Updates an existing activity.\n */\nexport const updateActivity = async (userId: string, activityId: string, updates: UpdateActivityInput, accessToken: string): Promise<Activity> => {\n  const supabaseClient: SupabaseClient = getAuthenticatedClient(accessToken);\n  \n  // Safe update object logic remains the same\n  const safeUpdates: Partial<UpdateActivityInput> = {};\n  if (updates.type !== undefined) safeUpdates.type = updates.type;\n  if (updates.subject !== undefined) safeUpdates.subject = updates.subject;\n  if (updates.due_date !== undefined) safeUpdates.due_date = updates.due_date;\n  if (updates.notes !== undefined) safeUpdates.notes = updates.notes;\n  if (updates.is_done !== undefined) safeUpdates.is_done = updates.is_done;\n  if (updates.deal_id !== undefined) safeUpdates.deal_id = updates.deal_id;\n  if (updates.person_id !== undefined) safeUpdates.person_id = updates.person_id;\n  if (updates.organization_id !== undefined) safeUpdates.organization_id = updates.organization_id;\n  \n  if (Object.keys(safeUpdates).length === 0) {\n      throw new GraphQLError('No valid fields provided for update.');\n  }\n\n  const { data, error } = await supabaseClient\n    .from('activities')\n    .update(safeUpdates)\n    .match({ id: activityId, user_id: userId })\n    .select()\n    .single();\n\n   // Handle not found error specifically\n    if (error && error.code === 'PGRST116') {\n      throw new GraphQLError('Activity not found or user not authorized.', { extensions: { code: 'NOT_FOUND' } });\n    }\n    handleSupabaseError(error, 'updating activity');\n    if (!data) {\n       throw new GraphQLError('Activity update failed, no data returned', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n    }\n\n  return data as Activity;\n};\n\n/**\n * Deletes an activity.\n */\nexport const deleteActivity = async (userId: string, activityId: string, accessToken: string): Promise<{ id: string }> => {\n  const supabaseClient: SupabaseClient = getAuthenticatedClient(accessToken);\n  const { error, count } = await supabaseClient \n    .from('activities')\n    .delete({ count: 'exact' })\n    .match({ id: activityId, user_id: userId });\n\n  if (error) {\n    handleSupabaseError(error, 'deleting activity');\n  }\n  if (count === 0 && !error) {\n      throw new GraphQLError(`Activity with ID ${activityId} not found or user not authorized.`, { extensions: { code: 'NOT_FOUND' }});\n  }\n\n  return { id: activityId };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/customFieldDefinitionService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PostgrestError' is defined but never used.","line":1,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GraphQLCustomFieldOption' is defined but never used.","line":7,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GraphQLCustomFieldOptionInput' is defined but never used.","line":8,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[780,783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[780,783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":22,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":22,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":22,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":22,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":23,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":23,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .entity_type on an `any` value.","line":23,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":23,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":24,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":24,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .field_name on an `any` value.","line":24,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":24,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":25,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":25,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .field_label on an `any` value.","line":25,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":25,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":26,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":26,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .field_type on an `any` value.","line":26,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":27,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":27,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .is_required on an `any` value.","line":27,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":29,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":29,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .is_active on an `any` value.","line":29,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":30,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .display_order on an `any` value.","line":30,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":31,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":31,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `any` value.","line":31,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":32,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":32,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `any` value.","line":32,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":41,"column":112,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":114},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":42,"column":124,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":126},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dropdown_options on an `any` value.","line":47,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dropdown_options on an `any` value.","line":47,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dropdown_options on an `any` value.","line":48,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":49,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":63,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":49,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":49,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dropdown_options on an `any` value.","line":49,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2693,2696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2693,2696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":51,"column":124,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":126},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":52,"column":121,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":123},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .value on an `any` value.","line":54,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .value on an `any` value.","line":54,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":55,"column":128,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":130},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":56,"column":122,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":56,"endColumn":124},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .label on an `any` value.","line":58,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .label on an `any` value.","line":58,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":59,"column":128,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":130},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":60,"column":122,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":124},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .value on an `any` value.","line":62,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .label on an `any` value.","line":62,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":66,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dropdown_options on an `any` value.","line":66,"column":138,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":154},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dropdown_options on an `any` value.","line":66,"column":171,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":187},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":94,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":94,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5127,5130],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5127,5130],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":103,"column":91,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stack on an `any` value.","line":103,"column":113,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":118},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":108,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":38},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'GraphQLCustomFieldDefinition' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":117,"column":12,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":117,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":118,"column":11,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":118,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":128,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":128,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":143,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":151,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":154,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":154,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":155,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":155,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":156,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":156,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":157,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":157,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":158,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":158,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":159,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":161,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Dropdown on an `error` typed value.","line":159,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .MultiSelect on an `error` typed value.","line":159,"column":110,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":121},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":160,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":160,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":160,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":160,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":160,"column":39,"nodeType":"Property","messageId":"anyAssignment","endLine":160,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .value on an `any` value.","line":160,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":160,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":160,"column":57,"nodeType":"Property","messageId":"anyAssignment","endLine":160,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .label on an `any` value.","line":160,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":160,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":162,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":162,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":166,"column":11,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":166,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":172,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":172,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":188,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8211,8214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8211,8214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":191,"column":3,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":191,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldLabel on an `error` typed value.","line":191,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isRequired on an `error` typed value.","line":194,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":194,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isRequired on an `error` typed value.","line":194,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":194,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":195,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":195,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isRequired on an `error` typed value.","line":195,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":195,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .displayOrder on an `error` typed value.","line":199,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .displayOrder on an `error` typed value.","line":199,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":200,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":200,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .displayOrder on an `error` typed value.","line":200,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":200,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldType on an `error` typed value.","line":206,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":206,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Dropdown on an `error` typed value.","line":206,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":206,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldType on an `error` typed value.","line":206,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":206,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .MultiSelect on an `error` typed value.","line":206,"column":105,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":206,"endColumn":116},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dropdownOptions on an `error` typed value.","line":209,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":209,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":210,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":210,"endColumn":113},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":210,"column":39,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":210,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dropdownOptions on an `error` typed value.","line":210,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":210,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":210,"column":75,"nodeType":"Property","messageId":"anyAssignment","endLine":210,"endColumn":91},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .value on an `any` value.","line":210,"column":86,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":210,"endColumn":91},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":210,"column":93,"nodeType":"Property","messageId":"anyAssignment","endLine":210,"endColumn":109},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .label on an `any` value.","line":210,"column":104,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":210,"endColumn":109},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":222,"column":11,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":222,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":229,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":229,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":244,"column":11,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":244,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":251,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":251,"endColumn":22}],"suppressedMessages":[],"errorCount":101,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SupabaseClient, PostgrestError } from '@supabase/supabase-js';\nimport { GraphQLError } from 'graphql'; // Import GraphQLError\nimport {\n  CustomFieldDefinition as GraphQLCustomFieldDefinition,\n  CustomFieldDefinitionInput as GraphQLCustomFieldDefinitionInput,\n  CustomFieldEntityType as GraphQLCustomFieldEntityType,\n  CustomFieldOption as GraphQLCustomFieldOption,\n  CustomFieldOptionInput as GraphQLCustomFieldOptionInput,\n  CustomFieldType as GraphQLCustomFieldType,\n} from './generated/graphql'; // Assuming relative path to generated types\nimport { handleSupabaseError } from './serviceUtils';\n\n// Database table name\nconst CUSTOM_FIELD_DEFINITIONS_TABLE = 'custom_field_definitions';\n\n// Helper to map DB row to GraphQL type\nconst mapDbDefinitionToGraphQL = (dbDef: any): GraphQLCustomFieldDefinition => {\n  // Ensure all fields expected by GraphQLCustomFieldDefinition are present and correctly typed.\n  // GQL NonNullable fields: id, entityType, fieldName, fieldLabel, fieldType, isRequired, isActive, displayOrder, createdAt, updatedAt\n\n  const mappedData = {\n    id: dbDef.id,\n    entityType: dbDef.entity_type as GraphQLCustomFieldEntityType,\n    fieldName: dbDef.field_name,\n    fieldLabel: dbDef.field_label,\n    fieldType: dbDef.field_type as GraphQLCustomFieldType,\n    isRequired: dbDef.is_required ?? false, // Default if null, though DB should prevent null\n    dropdownOptions: null, // Will be populated below\n    isActive: dbDef.is_active ?? true,     // Default if null, though DB should prevent null\n    displayOrder: dbDef.display_order ?? 0, // Default if null, though DB should prevent null\n    createdAt: dbDef.created_at,\n    updatedAt: dbDef.updated_at,\n  };\n\n  // Explicitly check critical non-nullable fields that don't have defaults in this mapping\n  const criticalFields: Array<keyof Pick<GraphQLCustomFieldDefinition, 'id' | 'entityType' | 'fieldName' | 'fieldLabel' | 'fieldType' | 'createdAt' | 'updatedAt'>> = \n    ['id', 'entityType', 'fieldName', 'fieldLabel', 'fieldType', 'createdAt', 'updatedAt'];\n  \n  for (const field of criticalFields) {\n    if (mappedData[field] === null || mappedData[field] === undefined) {\n      console.error(`Critical Error: Non-nullable field '${field}' is null or undefined for DB row ID '${dbDef.id}'. DB Data:`, dbDef);\n      throw new Error(`Data integrity issue: Field '${field}' is unexpectedly missing for custom field definition '${dbDef.id}'.`);\n    }\n  }\n  \n  // Handle dropdownOptions with detailed checking\n  if (dbDef.dropdown_options !== null && dbDef.dropdown_options !== undefined) {\n    if (Array.isArray(dbDef.dropdown_options)) {\n      mappedData.dropdownOptions = dbDef.dropdown_options.map((opt: any, index: number) => {\n        if (opt === null || typeof opt !== 'object') {\n          console.error(`Critical Error: Dropdown option at index ${index} is null or not an object for DB row ID '${dbDef.id}'. Option Data:`, opt);\n          throw new Error(`Data integrity issue: Invalid dropdown option structure for custom field definition '${dbDef.id}'.`);\n        }\n        if (opt.value === null || opt.value === undefined) {\n          console.error(`Critical Error: Dropdown option 'value' is null or undefined at index ${index} for DB row ID '${dbDef.id}'. Option Data:`, opt);\n          throw new Error(`Data integrity issue: Dropdown option 'value' is missing for custom field definition '${dbDef.id}'.`);\n        }\n        if (opt.label === null || opt.label === undefined) {\n          console.error(`Critical Error: Dropdown option 'label' is null or undefined at index ${index} for DB row ID '${dbDef.id}'. Option Data:`, opt);\n          throw new Error(`Data integrity issue: Dropdown option 'label' is missing for custom field definition '${dbDef.id}'.`);\n        }\n        return { value: String(opt.value), label: String(opt.label) }; // Ensure string types\n      });\n    } else {\n      // This case should ideally not happen if JSONB is well-formed in DB.\n      console.warn(`Warning: 'dropdown_options' for DB row ID '${dbDef.id}' is not an array and not null/undefined. Type: ${typeof dbDef.dropdown_options}. Data:`, dbDef.dropdown_options);\n      // GraphQL schema allows dropdownOptions to be null, so setting to null if malformed.\n      mappedData.dropdownOptions = null; \n    }\n  }\n\n  return mappedData as GraphQLCustomFieldDefinition;\n};\n\nexport const getCustomFieldDefinitions = async (\n  supabase: SupabaseClient,\n  entityType: GraphQLCustomFieldEntityType,\n  includeInactive: boolean = false\n): Promise<GraphQLCustomFieldDefinition[]> => {\n  let query = supabase\n    .from(CUSTOM_FIELD_DEFINITIONS_TABLE)\n    .select('*')\n    .eq('entity_type', entityType);\n\n  if (!includeInactive) {\n    query = query.eq('is_active', true);\n  }\n\n  query = query.order('display_order', { ascending: true });\n\n  const { data, error } = await query;\n  console.log('[Service DEBUG] getCustomFieldDefinitions raw response:', { data, error });\n\n  handleSupabaseError(error, 'fetching custom field definitions');\n\n  if (!data) {\n    return [];\n  }\n\n  try {\n    return data.map(mapDbDefinitionToGraphQL);\n  } catch (mappingError: any) {\n    console.error('[Service Error] Failed to map custom field definitions:', mappingError.message, mappingError.stack);\n    // Re-throw as a GraphQLError to provide better error information to the client\n    throw new GraphQLError('Error processing custom field definitions data.', {\n      extensions: {\n        code: 'DATA_PROCESSING_ERROR',\n        details: mappingError.message,\n      },\n    });\n  }\n};\n\nexport const getCustomFieldDefinitionById = async (\n  supabase: SupabaseClient,\n  id: string\n): Promise<GraphQLCustomFieldDefinition | null> => {\n  const { data, error } = await supabase\n    .from(CUSTOM_FIELD_DEFINITIONS_TABLE)\n    .select('*')\n    .eq('id', id)\n    .single(); // Use single to get one record or null, and error if multiple\n\n  // handleSupabaseError will throw if there's a PostgrestError\n  // If error is not null and not a PostgrestError (e.g. multiple rows found for .single()), \n  // or if data is null for other reasons after a non-erroring query, we should handle it.\n  if (error && error.code !== 'PGRST116') { // PGRST116: \"Searched item was not found\"\n    handleSupabaseError(error, `fetching custom field definition by id ${id}`);\n  }\n\n  if (!data) {\n    // This case covers both PGRST116 (not found) and other potential null data scenarios without a thrown error.\n    return null;\n  }\n\n  return mapDbDefinitionToGraphQL(data);\n};\n\nexport const createCustomFieldDefinition = async (\n  supabase: SupabaseClient,\n  input: GraphQLCustomFieldDefinitionInput\n): Promise<GraphQLCustomFieldDefinition> => {\n  const { \n    entityType, \n    fieldName, \n    fieldLabel, \n    fieldType, \n    isRequired, \n    dropdownOptions, \n    displayOrder \n  } = input;\n\n  const dbRow = {\n    entity_type: entityType,\n    field_name: fieldName,\n    field_label: fieldLabel,\n    field_type: fieldType,\n    is_required: isRequired === null || isRequired === undefined ? false : isRequired, // Default to false\n    dropdown_options: (fieldType === GraphQLCustomFieldType.Dropdown || fieldType === GraphQLCustomFieldType.MultiSelect) && dropdownOptions \n      ? dropdownOptions.map(opt => ({ value: opt.value, label: opt.label })) \n      : null,\n    display_order: displayOrder === null || displayOrder === undefined ? 0 : displayOrder, // Default to 0\n    // is_active defaults to true in the database\n  };\n\n  const { data, error } = await supabase\n    .from(CUSTOM_FIELD_DEFINITIONS_TABLE)\n    .insert(dbRow)\n    .select()\n    .single();\n\n  handleSupabaseError(error, 'creating custom field definition');\n\n  if (!data) {\n    // This should ideally not happen if handleSupabaseError doesn't throw and no data is returned.\n    // Consider if a more specific error is needed or if RLS might cause this.\n    throw new Error('Failed to create custom field definition and retrieve the created record.');\n  }\n\n  return mapDbDefinitionToGraphQL(data);\n};\n\nexport const updateCustomFieldDefinition = async (\n  supabase: SupabaseClient,\n  id: string,\n  input: GraphQLCustomFieldDefinitionInput\n): Promise<GraphQLCustomFieldDefinition> => {\n  const dbUpdateData: Record<string, any> = {};\n\n  // fieldLabel is a required field in GraphQLCustomFieldDefinitionInput\n  dbUpdateData.field_label = input.fieldLabel;\n\n  // Only update is_required if it's explicitly provided in the input\n  if (input.isRequired !== undefined && input.isRequired !== null) {\n    dbUpdateData.is_required = input.isRequired;\n  }\n\n  // Only update display_order if it's explicitly provided in the input\n  if (input.displayOrder !== undefined && input.displayOrder !== null) {\n    dbUpdateData.display_order = input.displayOrder;\n  }\n\n  // Determine dropdown_options based on input.fieldType (but don't update field_type in DB).\n  // input.fieldType is required in GraphQLCustomFieldDefinitionInput.\n  // input.dropdownOptions is also required by GraphQL validation if fieldType is DROPDOWN or MULTI_SELECT.\n  if (input.fieldType === GraphQLCustomFieldType.Dropdown || input.fieldType === GraphQLCustomFieldType.MultiSelect) {\n    // input.dropdownOptions is guaranteed to be an array (possibly empty) by GraphQL validation here.\n    // Safely handle if input.dropdownOptions is not an array (e.g. undefined despite GQL validation)\n    if (Array.isArray(input.dropdownOptions)) {\n      dbUpdateData.dropdown_options = input.dropdownOptions.map(opt => ({ value: opt.value, label: opt.label }));\n    } else {\n      // If fieldType is Dropdown/MultiSelect and options are not an array (e.g. undefined),\n      // default to empty array, signifying no options.\n      dbUpdateData.dropdown_options = [];\n    }\n  } else {\n    dbUpdateData.dropdown_options = null;\n  }\n  \n  // The updated_at field will be handled automatically by the database trigger or Supabase.\n\n  const { data, error } = await supabase\n    .from(CUSTOM_FIELD_DEFINITIONS_TABLE)\n    .update(dbUpdateData)\n    .eq('id', id)\n    .select()\n    .single();\n\n  handleSupabaseError(error, `updating custom field definition ${id}`);\n\n  if (!data) {\n    // This could happen if the ID doesn't exist or RLS prevents the update/select.\n    throw new Error(`Failed to update or retrieve custom field definition ${id}. It might not exist or access was denied.`);\n  }\n\n  return mapDbDefinitionToGraphQL(data);\n};\n\nexport const setCustomFieldDefinitionActiveStatus = async (\n  supabase: SupabaseClient,\n  id: string,\n  isActive: boolean\n): Promise<GraphQLCustomFieldDefinition> => {\n  const { data, error } = await supabase\n    .from(CUSTOM_FIELD_DEFINITIONS_TABLE)\n    .update({ is_active: isActive })\n    .eq('id', id)\n    .select()\n    .single();\n\n  handleSupabaseError(error, `setting active status for custom field definition ${id}`);\n\n  if (!data) {\n    throw new Error(`Failed to set active status or retrieve custom field definition ${id}. It might not exist or access was denied.`);\n  }\n\n  return mapDbDefinitionToGraphQL(data);\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/database.types.ts","messages":[{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'never' is overridden by other types in this union type.","line":575,"column":7,"nodeType":"TSTypeOperator","messageId":"overridden","endLine":575,"endColumn":35},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'never' is overridden by other types in this union type.","line":590,"column":7,"nodeType":"TSTypeOperator","messageId":"overridden","endLine":590,"endColumn":44}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  graphql_public: {\n    Tables: {\n      [_ in never]: never\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      graphql: {\n        Args: {\n          operationName?: string\n          query?: string\n          variables?: Json\n          extensions?: Json\n        }\n        Returns: Json\n      }\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n  public: {\n    Tables: {\n      activities: {\n        Row: {\n          created_at: string\n          deal_id: string | null\n          due_date: string | null\n          id: string\n          is_done: boolean\n          notes: string | null\n          organization_id: string | null\n          person_id: string | null\n          subject: string\n          type: string\n          updated_at: string\n          user_id: string\n        }\n        Insert: {\n          created_at?: string\n          deal_id?: string | null\n          due_date?: string | null\n          id?: string\n          is_done?: boolean\n          notes?: string | null\n          organization_id?: string | null\n          person_id?: string | null\n          subject: string\n          type: string\n          updated_at?: string\n          user_id: string\n        }\n        Update: {\n          created_at?: string\n          deal_id?: string | null\n          due_date?: string | null\n          id?: string\n          is_done?: boolean\n          notes?: string | null\n          organization_id?: string | null\n          person_id?: string | null\n          subject?: string\n          type?: string\n          updated_at?: string\n          user_id?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"activities_deal_id_fkey\"\n            columns: [\"deal_id\"]\n            isOneToOne: false\n            referencedRelation: \"deals\"\n            referencedColumns: [\"id\"]\n          },\n          {\n            foreignKeyName: \"activities_organization_id_fkey\"\n            columns: [\"organization_id\"]\n            isOneToOne: false\n            referencedRelation: \"organizations\"\n            referencedColumns: [\"id\"]\n          },\n          {\n            foreignKeyName: \"activities_person_id_fkey\"\n            columns: [\"person_id\"]\n            isOneToOne: false\n            referencedRelation: \"people\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      deal_history: {\n        Row: {\n          changes: Json | null\n          created_at: string\n          deal_id: string\n          event_type: string\n          id: string\n          user_id: string | null\n        }\n        Insert: {\n          changes?: Json | null\n          created_at?: string\n          deal_id: string\n          event_type: string\n          id?: string\n          user_id?: string | null\n        }\n        Update: {\n          changes?: Json | null\n          created_at?: string\n          deal_id?: string\n          event_type?: string\n          id?: string\n          user_id?: string | null\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"deal_history_deal_id_fkey\"\n            columns: [\"deal_id\"]\n            isOneToOne: false\n            referencedRelation: \"deals\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      deals: {\n        Row: {\n          amount: number | null\n          created_at: string\n          deal_specific_probability: number | null\n          expected_close_date: string | null\n          id: string\n          name: string\n          notes: string | null\n          person_id: string | null\n          stage: string | null\n          stage_id: string | null\n          updated_at: string\n          user_id: string\n          weighted_amount: number | null\n        }\n        Insert: {\n          amount?: number | null\n          created_at?: string\n          deal_specific_probability?: number | null\n          expected_close_date?: string | null\n          id?: string\n          name: string\n          notes?: string | null\n          person_id?: string | null\n          stage?: string | null\n          stage_id?: string | null\n          updated_at?: string\n          user_id: string\n          weighted_amount?: number | null\n        }\n        Update: {\n          amount?: number | null\n          created_at?: string\n          deal_specific_probability?: number | null\n          expected_close_date?: string | null\n          id?: string\n          name?: string\n          notes?: string | null\n          person_id?: string | null\n          stage?: string | null\n          stage_id?: string | null\n          updated_at?: string\n          user_id?: string\n          weighted_amount?: number | null\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"deals_person_id_fkey\"\n            columns: [\"person_id\"]\n            isOneToOne: false\n            referencedRelation: \"people\"\n            referencedColumns: [\"id\"]\n          },\n          {\n            foreignKeyName: \"deals_stage_id_fkey\"\n            columns: [\"stage_id\"]\n            isOneToOne: false\n            referencedRelation: \"stages\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      organizations: {\n        Row: {\n          address: string | null\n          created_at: string\n          id: string\n          name: string\n          notes: string | null\n          updated_at: string\n          user_id: string\n        }\n        Insert: {\n          address?: string | null\n          created_at?: string\n          id?: string\n          name: string\n          notes?: string | null\n          updated_at?: string\n          user_id: string\n        }\n        Update: {\n          address?: string | null\n          created_at?: string\n          id?: string\n          name?: string\n          notes?: string | null\n          updated_at?: string\n          user_id?: string\n        }\n        Relationships: []\n      }\n      people: {\n        Row: {\n          company: string | null\n          created_at: string\n          email: string | null\n          first_name: string | null\n          id: string\n          last_name: string | null\n          notes: string | null\n          organization_id: string | null\n          phone: string | null\n          updated_at: string\n          user_id: string\n        }\n        Insert: {\n          company?: string | null\n          created_at?: string\n          email?: string | null\n          first_name?: string | null\n          id?: string\n          last_name?: string | null\n          notes?: string | null\n          organization_id?: string | null\n          phone?: string | null\n          updated_at?: string\n          user_id: string\n        }\n        Update: {\n          company?: string | null\n          created_at?: string\n          email?: string | null\n          first_name?: string | null\n          id?: string\n          last_name?: string | null\n          notes?: string | null\n          organization_id?: string | null\n          phone?: string | null\n          updated_at?: string\n          user_id?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"people_organization_id_fkey\"\n            columns: [\"organization_id\"]\n            isOneToOne: false\n            referencedRelation: \"organizations\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      permissions: {\n        Row: {\n          action: string\n          description: string | null\n          id: string\n          resource: string\n        }\n        Insert: {\n          action: string\n          description?: string | null\n          id?: string\n          resource: string\n        }\n        Update: {\n          action?: string\n          description?: string | null\n          id?: string\n          resource?: string\n        }\n        Relationships: []\n      }\n      pipelines: {\n        Row: {\n          created_at: string\n          id: string\n          name: string\n          updated_at: string\n          user_id: string\n        }\n        Insert: {\n          created_at?: string\n          id?: string\n          name: string\n          updated_at?: string\n          user_id: string\n        }\n        Update: {\n          created_at?: string\n          id?: string\n          name?: string\n          updated_at?: string\n          user_id?: string\n        }\n        Relationships: []\n      }\n      role_permissions: {\n        Row: {\n          permission_id: string\n          role_id: string\n        }\n        Insert: {\n          permission_id: string\n          role_id: string\n        }\n        Update: {\n          permission_id?: string\n          role_id?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"role_permissions_permission_id_fkey\"\n            columns: [\"permission_id\"]\n            isOneToOne: false\n            referencedRelation: \"permissions\"\n            referencedColumns: [\"id\"]\n          },\n          {\n            foreignKeyName: \"role_permissions_role_id_fkey\"\n            columns: [\"role_id\"]\n            isOneToOne: false\n            referencedRelation: \"roles\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      roles: {\n        Row: {\n          description: string | null\n          id: string\n          name: string\n        }\n        Insert: {\n          description?: string | null\n          id?: string\n          name: string\n        }\n        Update: {\n          description?: string | null\n          id?: string\n          name?: string\n        }\n        Relationships: []\n      }\n      stages: {\n        Row: {\n          created_at: string\n          deal_probability: number | null\n          id: string\n          name: string\n          order: number\n          pipeline_id: string\n          stage_type: string\n          updated_at: string\n          user_id: string\n        }\n        Insert: {\n          created_at?: string\n          deal_probability?: number | null\n          id?: string\n          name: string\n          order?: number\n          pipeline_id: string\n          stage_type?: string\n          updated_at?: string\n          user_id: string\n        }\n        Update: {\n          created_at?: string\n          deal_probability?: number | null\n          id?: string\n          name?: string\n          order?: number\n          pipeline_id?: string\n          stage_type?: string\n          updated_at?: string\n          user_id?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"stages_pipeline_id_fkey\"\n            columns: [\"pipeline_id\"]\n            isOneToOne: false\n            referencedRelation: \"pipelines\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      user_profiles: {\n        Row: {\n          avatar_url: string | null\n          created_at: string\n          display_name: string | null\n          email: string | null\n          first_name: string | null\n          id: string\n          last_name: string | null\n          updated_at: string\n        }\n        Insert: {\n          avatar_url?: string | null\n          created_at?: string\n          display_name?: string | null\n          email?: string | null\n          first_name?: string | null\n          id: string\n          last_name?: string | null\n          updated_at?: string\n        }\n        Update: {\n          avatar_url?: string | null\n          created_at?: string\n          display_name?: string | null\n          email?: string | null\n          first_name?: string | null\n          id?: string\n          last_name?: string | null\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      user_roles: {\n        Row: {\n          role_id: string\n          user_id: string\n        }\n        Insert: {\n          role_id: string\n          user_id: string\n        }\n        Update: {\n          role_id?: string\n          user_id?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"user_roles_role_id_fkey\"\n            columns: [\"role_id\"]\n            isOneToOne: false\n            referencedRelation: \"roles\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      check_permission: {\n        Args: { p_user_id: string; p_action: string; p_resource: string }\n        Returns: boolean\n      }\n      get_my_permissions: {\n        Args: Record<PropertyKey, never>\n        Returns: Json\n      }\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n        Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n      Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n    ? R\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])\n    ? (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n        Row: infer R\n      }\n      ? R\n      : never\n    : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Insert: infer I\n    }\n    ? I\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Insert: infer I\n      }\n      ? I\n      : never\n    : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Update: infer U\n    }\n    ? U\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Update: infer U\n      }\n      ? U\n      : never\n    : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n    | keyof DefaultSchema[\"Enums\"]\n    | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n    : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n    ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n    : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n    | keyof DefaultSchema[\"CompositeTypes\"]\n    | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n    : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n    ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n    : never\n\nexport const Constants = {\n  graphql_public: {\n    Enums: {},\n  },\n  public: {\n    Enums: {},\n  },\n} as const\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/dealService.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":90,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":90,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":90,"column":27,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":90,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getDeals on an `error` typed value.","line":90,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":100,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":100,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":102,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":119,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":119,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getDeals on an `error` typed value.","line":119,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":130,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":130,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":132,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":132,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":150,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":150,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":150,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":150,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getDealById on an `error` typed value.","line":150,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":150,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":158,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":158,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":159,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":178,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":178,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":178,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":178,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getDealById on an `error` typed value.","line":178,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":178,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":183,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":183,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":184,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":184,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":203,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":203,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getDealById on an `error` typed value.","line":203,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":213,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":213,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":214,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":214,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":238,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":238,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":238,"column":31,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":238,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createDeal on an `error` typed value.","line":238,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":238,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":246,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":246,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":247,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":247,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":264,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":264,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createDeal on an `error` typed value.","line":264,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":264,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":276,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":276,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createDeal on an `error` typed value.","line":276,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":276,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":301,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":301,"endColumn":108},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":301,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":301,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updateDeal on an `error` typed value.","line":301,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":301,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":305,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":305,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":306,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":306,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":318,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":318,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updateDeal on an `error` typed value.","line":318,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":318,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":326,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":326,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updateDeal on an `error` typed value.","line":326,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":326,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":346,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":346,"endColumn":96},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":346,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":346,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deleteDeal on an `error` typed value.","line":346,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":346,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":351,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":351,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":352,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":352,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":362,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":362,"endColumn":96},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":362,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":362,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deleteDeal on an `error` typed value.","line":362,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":362,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":369,"column":14,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":369,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":369,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":369,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deleteDeal on an `error` typed value.","line":369,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":369,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":383,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":383,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deleteDeal on an `error` typed value.","line":383,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":383,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":393,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":393,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":394,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":394,"endColumn":33}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1178,1181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1178,1181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":56,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, MockedFunction } from 'vitest';\nimport { dealService } from './dealService';\nimport { createClient, /* SupabaseClient, */ PostgrestError } from '@supabase/supabase-js'; // Comment out SupabaseClient\nimport { GraphQLError } from 'graphql';\n\n// --- Mock Setup --- \n\n// Define the shape of the builder mock here for typing\nconst mockPostgrestBuilderMethods = {\n    select: vi.fn().mockReturnThis(),\n    insert: vi.fn().mockReturnThis(),\n    update: vi.fn().mockReturnThis(),\n    delete: vi.fn().mockReturnThis(),\n    eq: vi.fn().mockReturnThis(),\n    single: vi.fn(),\n    order: vi.fn().mockReturnThis(),\n};\n\nvi.mock('@supabase/supabase-js', () => {\n  const mockClient = {\n    // Reference the methods defined outside\n    from: vi.fn(() => mockPostgrestBuilderMethods), \n    auth: {},\n  };\n  return {\n    createClient: vi.fn(() => mockClient),\n  };\n});\n\n// --- Helper Types --- \n\ninterface MockUser {\n  id: string;\n}\n\n// Type helper for the mocked PostgrestBuilder methods\ntype MockedBuilderMethods = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [K in keyof typeof mockPostgrestBuilderMethods]: MockedFunction<any>;\n};\n\n// --- Test Suite --- \n\ndescribe('dealService', () => {\n  // Store the reference to the mock function\n  let mockedCreateClient: MockedFunction<typeof createClient>;\n  let mockBuilderMethods: MockedBuilderMethods; \n\n  const mockUser: MockUser = { id: 'user-123' };\n  const mockAccessToken = 'mock-access-token';\n\n  beforeEach(async () => { // Make beforeEach async if needed for imports\n    vi.clearAllMocks();\n\n    // Import the mocked createClient directly\n    // vi.mock hoists this, so it should refer to our mock\n    const { createClient: actualMockedCreateClient } = await import('@supabase/supabase-js');\n    mockedCreateClient = actualMockedCreateClient as MockedFunction<typeof createClient>;\n\n    // Assign references to the builder methods (defined outside vi.mock)\n    mockBuilderMethods = mockPostgrestBuilderMethods as MockedBuilderMethods;\n\n    // Reset builder mocks (ensure mockReturnThis is reset correctly)\n    Object.values(mockBuilderMethods).forEach(mockFn => {\n        if (typeof mockFn?.mockClear === 'function') {\n            mockFn.mockClear();\n            // Reset mockReturnThis for chainable methods\n            if (mockFn !== mockBuilderMethods.single) { \n               mockFn.mockReturnThis();\n            }\n        }\n    });\n  });\n\n  // --- Test Cases --- \n\n  describe('getDeals', () => {\n    it('should fetch deals for a given user using access token', async () => {\n      const mockDealsData = [\n        { id: 'deal-1', name: 'Deal One', user_id: mockUser.id },\n        { id: 'deal-2', name: 'Deal Two', user_id: mockUser.id },\n      ];\n      \n      // Setup mock response for the ORDER method, the last in the chain\n      mockBuilderMethods.order.mockResolvedValueOnce({ \n        data: mockDealsData, \n        error: null \n      });\n\n      const deals = await dealService.getDeals(mockUser.id, mockAccessToken);\n\n      // Assertions\n      expect(mockedCreateClient).toHaveBeenCalledWith(\n          process.env.SUPABASE_URL, \n          process.env.SUPABASE_ANON_KEY, \n          { global: { headers: { Authorization: `Bearer ${mockAccessToken}` } } }\n      );\n      // Check from() was called on the client *instance* returned by createClient\n      expect(mockedCreateClient.mock.results.length).toBeGreaterThan(0);\n      const mockClientInstance = mockedCreateClient.mock.results[0]!.value;\n      expect(mockClientInstance).toBeDefined();\n      expect(mockClientInstance.from).toHaveBeenCalledWith('deals'); \n      // Check methods called on the builder\n      expect(mockBuilderMethods.select).toHaveBeenCalledWith('*');\n      expect(mockBuilderMethods.order).toHaveBeenCalledWith('created_at', { ascending: false }); \n      expect(deals).toEqual(mockDealsData);\n    });\n\n    it('should throw GraphQLError if Supabase select fails', async () => {\n      const mockDbError: Partial<PostgrestError> = { message: 'Select failed' };\n      \n      // Setup mock error response for the ORDER method\n      mockBuilderMethods.order.mockResolvedValueOnce({ \n        data: null, \n        error: mockDbError as PostgrestError\n      });\n\n      // Assertions\n      await expect(dealService.getDeals(mockUser.id, mockAccessToken))\n        .rejects\n        .toThrow(new GraphQLError(`Database error during fetching deals. Please try again later.`, {\n            extensions: { \n              code: 'INTERNAL_SERVER_ERROR', \n              originalError: { message: mockDbError.message, code: undefined }\n            },\n        }));\n\n      expect(mockedCreateClient).toHaveBeenCalledTimes(1);\n      expect(mockedCreateClient.mock.results.length).toBe(1);\n      const mockClientInstance_error = mockedCreateClient.mock.results[0]!.value;\n      expect(mockClientInstance_error).toBeDefined();\n      expect(mockClientInstance_error.from).toHaveBeenCalledWith('deals');\n      expect(mockBuilderMethods.select).toHaveBeenCalledWith('*');\n      expect(mockBuilderMethods.order).toHaveBeenCalledWith('created_at', { ascending: false });\n    });\n  });\n\n  describe('getDealById', () => {\n    const dealId = 'deal-999';\n\n    it('should fetch a single deal by ID for the user', async () => {\n      const mockDealData = { id: dealId, name: 'Single Deal', user_id: mockUser.id };\n\n      // Setup mock response for the single() call\n      mockBuilderMethods.single.mockResolvedValueOnce({ \n        data: mockDealData, \n        error: null \n      });\n\n      const deal = await dealService.getDealById(mockUser.id, dealId, mockAccessToken);\n\n      // Assertions\n      expect(mockedCreateClient).toHaveBeenCalledWith(\n          process.env.SUPABASE_URL, \n          process.env.SUPABASE_ANON_KEY, \n          { global: { headers: { Authorization: `Bearer ${mockAccessToken}` } } }\n      );\n      const clientInstance = mockedCreateClient.mock.results[0]!.value;\n      expect(clientInstance.from).toHaveBeenCalledWith('deals');\n      expect(mockBuilderMethods.select).toHaveBeenCalledWith('*');\n      expect(mockBuilderMethods.eq).toHaveBeenCalledWith('id', dealId);\n      expect(mockBuilderMethods.single).toHaveBeenCalled();\n      expect(deal).toEqual(mockDealData);\n    });\n\n    it('should return null if deal not found (PGRST116 error)', async () => {\n        const notFoundError: Partial<PostgrestError> = { \n            message: 'No rows found', \n            code: 'PGRST116' \n        };\n\n        // Setup mock response for not found\n        mockBuilderMethods.single.mockResolvedValueOnce({ \n            data: null, \n            error: notFoundError as PostgrestError\n        });\n\n        const deal = await dealService.getDealById(mockUser.id, dealId, mockAccessToken);\n\n        // Assertions\n        expect(deal).toBeNull();\n        expect(mockedCreateClient).toHaveBeenCalledTimes(1);\n        const clientInstance = mockedCreateClient.mock.results[0]!.value;\n        expect(clientInstance.from).toHaveBeenCalledWith('deals');\n        expect(mockBuilderMethods.select).toHaveBeenCalledWith('*');\n        expect(mockBuilderMethods.eq).toHaveBeenCalledWith('id', dealId);\n        expect(mockBuilderMethods.single).toHaveBeenCalled();\n    });\n\n    it('should throw GraphQLError for other database errors', async () => {\n        const dbError: Partial<PostgrestError> = { \n            message: 'Connection error', \n            code: '500' \n        };\n\n         // Setup mock response for error\n        mockBuilderMethods.single.mockResolvedValueOnce({ \n            data: null, \n            error: dbError as PostgrestError\n        });\n\n        // Assertions\n        await expect(dealService.getDealById(mockUser.id, dealId, mockAccessToken))\n            .rejects\n            .toThrow(new GraphQLError(`Database error during fetching deal by ID. Please try again later.`, {\n                extensions: { \n                  code: 'INTERNAL_SERVER_ERROR', \n                  originalError: { message: dbError.message, code: dbError.code }\n                },\n            }));\n            \n        expect(mockedCreateClient).toHaveBeenCalledTimes(1);\n        const clientInstance = mockedCreateClient.mock.results[0]!.value;\n        expect(clientInstance.from).toHaveBeenCalledWith('deals');\n        expect(mockBuilderMethods.select).toHaveBeenCalledWith('*');\n        expect(mockBuilderMethods.eq).toHaveBeenCalledWith('id', dealId);\n        expect(mockBuilderMethods.single).toHaveBeenCalled();\n    });\n  });\n\n  describe('createDeal', () => {\n    const dealInput = { name: 'New Deal', stage_id: 'stage-lead-123', amount: 1000, person_id: 'person-xyz' };\n    const expectedDealRecord = {\n        ...dealInput,\n        id: 'new-deal-123',\n        user_id: mockUser.id,\n        created_at: new Date().toISOString(), // Match structure, exact value doesn't matter in mock\n        updated_at: new Date().toISOString(),\n    };\n\n    it('should create a deal and return the new record', async () => {\n        // Mock the insert().select().single() chain\n        mockBuilderMethods.single.mockResolvedValueOnce({ \n            data: expectedDealRecord, \n            error: null \n        });\n\n        const newDeal = await dealService.createDeal(mockUser.id, dealInput, mockAccessToken);\n\n        // Assertions\n        expect(mockedCreateClient).toHaveBeenCalledWith(\n            process.env.SUPABASE_URL, \n            process.env.SUPABASE_ANON_KEY, \n            { global: { headers: { Authorization: `Bearer ${mockAccessToken}` } } }\n        );\n        const clientInstance = mockedCreateClient.mock.results[0]!.value;\n        expect(clientInstance.from).toHaveBeenCalledWith('deals');\n        // Check insert was called with the correct data payload (single object)\n        expect(mockBuilderMethods.insert).toHaveBeenCalledWith(\n            { ...dealInput, user_id: mockUser.id }\n        );\n        expect(mockBuilderMethods.select).toHaveBeenCalled(); // Implicit call after insert\n        expect(mockBuilderMethods.single).toHaveBeenCalled();\n        expect(newDeal).toEqual(expectedDealRecord);\n    });\n\n    it('should throw GraphQLError if Supabase insert fails', async () => {\n        const mockDbError: Partial<PostgrestError> = { message: 'Insert failed' };\n        mockBuilderMethods.single.mockResolvedValueOnce({ \n            data: null, \n            error: mockDbError as PostgrestError\n        });\n\n        await expect(dealService.createDeal(mockUser.id, dealInput, mockAccessToken))\n            .rejects\n            .toThrow(new GraphQLError(`Database error during creating deal. Please try again later.`, {\n                 extensions: { \n                   code: 'INTERNAL_SERVER_ERROR', \n                   originalError: { message: mockDbError.message, code: undefined }\n                 },\n            }));\n    });\n\n    it('should throw GraphQLError if insert returns no data', async () => {\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: null });\n        await expect(dealService.createDeal(mockUser.id, dealInput, mockAccessToken))\n            .rejects\n            .toThrow(new GraphQLError('Failed to create deal, no data returned', {\n                 extensions: { code: 'INTERNAL_SERVER_ERROR' }\n            }));\n    });\n  });\n\n  describe('updateDeal', () => {\n    const dealId = 'deal-to-update';\n    const updateInput = { name: 'Updated Deal Name', amount: 1500, stage_id: 'stage-won-456' };\n    const expectedDealRecord = {\n        id: dealId,\n        user_id: mockUser.id,\n        ...updateInput,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n    };\n\n    it('should update a deal and return the record', async () => {\n        mockBuilderMethods.single.mockResolvedValueOnce({ \n            data: expectedDealRecord, \n            error: null \n        });\n\n        const updatedDeal = await dealService.updateDeal(mockUser.id, dealId, updateInput, mockAccessToken);\n\n        // Assertions\n        expect(mockedCreateClient).toHaveBeenCalledTimes(1);\n        const clientInstance = mockedCreateClient.mock.results[0]!.value;\n        expect(clientInstance.from).toHaveBeenCalledWith('deals');\n        expect(mockBuilderMethods.update).toHaveBeenCalledWith(updateInput);\n        expect(mockBuilderMethods.eq).toHaveBeenCalledWith('id', dealId);\n        expect(mockBuilderMethods.select).toHaveBeenCalled();\n        expect(mockBuilderMethods.single).toHaveBeenCalled();\n        expect(updatedDeal).toEqual(expectedDealRecord);\n    });\n\n    it('should throw GraphQLError if deal not found (PGRST116 error)', async () => {\n        const notFoundError: Partial<PostgrestError> = { code: 'PGRST116' };\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: notFoundError as PostgrestError });\n\n        await expect(dealService.updateDeal(mockUser.id, dealId, updateInput, mockAccessToken))\n            .rejects.toThrow(new GraphQLError('Deal not found', { extensions: { code: 'NOT_FOUND' } }));\n    });\n\n    it('should throw GraphQLError for other update errors', async () => {\n        const dbError: Partial<PostgrestError> = { message: 'Update failed' };\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: dbError as PostgrestError });\n\n        await expect(dealService.updateDeal(mockUser.id, dealId, updateInput, mockAccessToken))\n            .rejects.toThrow(new GraphQLError('Database error during updating deal. Please try again later.', {\n                extensions: { \n                  code: 'INTERNAL_SERVER_ERROR', \n                  originalError: { message: dbError.message, code: undefined }\n                },\n            }));\n    });\n  });\n\n  describe('deleteDeal', () => {\n    const dealIdToDelete = 'deal-to-delete-789';\n\n    it('should return true on successful deletion', async () => {\n      // Mock the delete().eq() chain - eq resolves\n      mockBuilderMethods.eq.mockResolvedValueOnce({ \n          error: null, \n          count: 1 \n      });\n\n      const result = await dealService.deleteDeal(mockUser.id, dealIdToDelete, mockAccessToken);\n\n      // Assertions\n      expect(result).toBe(true);\n      expect(mockedCreateClient).toHaveBeenCalledTimes(1);\n      const clientInstance = mockedCreateClient.mock.results[0]!.value;\n      expect(clientInstance.from).toHaveBeenCalledWith('deals');\n      expect(mockBuilderMethods.eq).toHaveBeenCalledWith('id', dealIdToDelete);\n    });\n\n    it('should return true even if count is 0 or null (item already deleted)', async () => {\n      // Mock the delete().eq() chain - eq resolves\n      mockBuilderMethods.eq.mockResolvedValueOnce({ \n          error: null, \n          count: 0 \n      });\n      const result = await dealService.deleteDeal(mockUser.id, dealIdToDelete, mockAccessToken);\n      expect(result).toBe(true);\n\n       mockBuilderMethods.eq.mockResolvedValueOnce({ \n          error: null, \n          count: null \n      });\n       const result2 = await dealService.deleteDeal(mockUser.id, dealIdToDelete, mockAccessToken);\n      expect(result2).toBe(true);\n    });\n\n    it('should throw GraphQLError if Supabase delete fails', async () => {\n      const dbError: Partial<PostgrestError> = { message: 'Delete failed' };\n\n      // Mock error on eq() as it resolves the delete chain\n      mockBuilderMethods.eq.mockResolvedValueOnce({ \n          error: dbError as PostgrestError, \n          count: null \n      });\n\n      // Assertions\n      await expect(dealService.deleteDeal(mockUser.id, dealIdToDelete, mockAccessToken))\n        .rejects\n        .toThrow(new GraphQLError(`Database error during deleting deal. Please try again later.`, {\n            extensions: { \n              code: 'INTERNAL_SERVER_ERROR', \n              originalError: { message: dbError.message, code: undefined }\n            },\n        }));\n      \n      expect(mockedCreateClient).toHaveBeenCalledTimes(1);\n      const clientInstance = mockedCreateClient.mock.results[0]!.value;\n      expect(clientInstance.from).toHaveBeenCalledWith('deals');\n      expect(mockBuilderMethods.eq).toHaveBeenCalledWith('id', dealIdToDelete);\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/dealService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GraphQLError' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAuthenticatedClient' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleSupabaseError' is defined but never used.","line":4,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'recordEntityHistory' is defined but never used.","line":4,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":74},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CustomFieldValueInput' is defined but never used.","line":5,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'diff' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Diff' is defined but never used.","line":6,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'inngest' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getCustomFieldDefinitionById' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'generateDealChanges' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TRACKED_DEAL_FIELDS' is defined but never used.","line":9,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'processCustomFieldsForCreate' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'processCustomFieldsForUpdate' is defined but never used.","line":10,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":68},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'calculateDealProbabilityFields' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DealUpdatePayload' is defined but never used.","line":22,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1687,1690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1687,1690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { /* createClient, SupabaseClient, PostgrestError */ } from '@supabase/supabase-js';\n// import type { User } from '@supabase/supabase-js'; // Keep User type if needed later (Commented out)\nimport { GraphQLError } from 'graphql';\nimport { getAuthenticatedClient, handleSupabaseError, recordEntityHistory } from './serviceUtils.js'; // Import shared helpers\nimport type { Deal, DealInput, CustomFieldValueInput } from './generated/graphql.js'; // Changed to DealInput for both create and update, added CustomFieldValueInput\nimport { diff, Diff } from 'deep-diff';\nimport { inngest } from './inngestClient.js'; // Import the shared Inngest client\nimport { getCustomFieldDefinitionById } from './customFieldDefinitionService.js'; // Correctly import the specific function needed\nimport { generateDealChanges, TRACKED_DEAL_FIELDS } from './dealService/dealHistory.js'; // ADDED IMPORT\nimport { processCustomFieldsForCreate, processCustomFieldsForUpdate } from './dealService/dealCustomFields.js';\nimport { calculateDealProbabilityFields } from './dealService/dealProbability.js';\nimport {\n    getDeals as getDealsInternal,\n    getDealById as getDealByIdInternal,\n    createDeal as createDealInternal,\n    updateDeal as updateDealInternal,\n    deleteDeal as deleteDealInternal,\n    getDealsByPersonId as getDealsByPersonIdInternal\n} from './dealService/dealCrud.js';\n\n// Define a more specific type for the update payload to include weighted_amount\ninterface DealUpdatePayload extends Partial<DealInput> {\n  user_id?: string; // user_id is added by create, but not typically in DealInput for updates from client\n  weighted_amount?: number | null;\n  custom_field_values?: Record<string, any> | null; // Added for direct DB update\n}\n\n// --- Deal Service ---\nexport const dealService = {\n  getDeals: (userId: string, accessToken: string): Promise<Deal[]> => \n    getDealsInternal(userId, accessToken),\n  \n  getDealById: (userId: string, id: string, accessToken: string): Promise<Deal | null> => \n    getDealByIdInternal(userId, id, accessToken),\n  \n  getDealsByPersonId: (personId: string, accessToken: string): Promise<Deal[]> =>\n    getDealsByPersonIdInternal(personId, accessToken),\n  \n  createDeal: (userId: string, input: DealInput, accessToken: string): Promise<Deal> => \n    createDealInternal(userId, input, accessToken),\n  \n  updateDeal: (userId: string, id: string, input: Partial<DealInput>, accessToken: string): Promise<Deal> => \n    updateDealInternal(userId, id, input, accessToken),\n  \n  deleteDeal: (userId: string, id: string, accessToken: string): Promise<boolean> => \n    deleteDealInternal(userId, id, accessToken),\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/dealService/dealCrud.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CustomFieldValueInput' is defined but never used.","line":3,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[748,751],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[748,751],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":48,"column":11,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":48,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":57,"column":3,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":57,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'pipeline_id' is assigned a value but never used.","line":64,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'insertPayload' is assigned a value but never used.","line":68,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2786,2789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2786,2789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4030,4033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4030,4033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":100,"column":17,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":100,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4659,4662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4659,4662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [stringKey] on an `any` value.","line":115,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":115,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [stringKey] on an `any` value.","line":115,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":115,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":116,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":116,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [stringKey] on an `any` value.","line":116,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":116,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":120,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":120,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":121,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":121,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":121,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":121,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":128,"column":5,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":128,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":128,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":128,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Record<string, any> | null`.","line":158,"column":11,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":158,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":158,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6825,6828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6825,6828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":158,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":158,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7849,7852],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7849,7852],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipeline_id on an `any` value.","line":181,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_key' is assigned a value but never used.","line":189,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":189,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":200,"column":17,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":200,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":237,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9745,9748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9745,9748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":238,"column":117,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":238,"endColumn":124}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GraphQLError } from 'graphql';\nimport { getAuthenticatedClient, handleSupabaseError, recordEntityHistory } from '../serviceUtils.js';\nimport type { Deal, DealInput, CustomFieldValueInput } from '../generated/graphql.js';\nimport { inngest } from '../inngestClient.js';\n\nimport { processCustomFieldsForCreate, processCustomFieldsForUpdate } from './dealCustomFields.js';\nimport { calculateDealProbabilityFields } from './dealProbability.js';\nimport { generateDealChanges } from './dealHistory.js';\n\n// Define a more specific type for the update payload, similar to original dealService.ts\ninterface DealUpdatePayload extends Partial<DealInput> {\n  user_id?: string; \n  weighted_amount?: number | null;\n  custom_field_values?: Record<string, any> | null;\n  deal_specific_probability?: number | null; // Explicitly added\n}\n\n// --- Deal CRUD Operations ---\n\nexport async function getDeals(userId: string, accessToken: string): Promise<Deal[]> {\n  console.log('[dealCrud.getDeals] called for user:', userId);\n  const supabase = getAuthenticatedClient(accessToken);\n  const { data, error } = await supabase\n    .from('deals')\n    .select('*')\n    .order('created_at', { ascending: false });\n\n  handleSupabaseError(error, 'fetching deals');\n  return (data || []) as Deal[];\n}\n\nexport async function getDealsByPersonId(personId: string, accessToken: string): Promise<Deal[]> {\n  console.log('[dealCrud.getDealsByPersonId] called for personId:', personId);\n  const supabase = getAuthenticatedClient(accessToken);\n  const { data, error } = await supabase\n    .from('deals')\n    .select('*')\n    .eq('person_id', personId)\n    .order('created_at', { ascending: false });\n\n  handleSupabaseError(error, 'fetching deals by person_id');\n  return (data || []) as Deal[];\n}\n\nexport async function getDealById(userId: string, id: string, accessToken:string): Promise<Deal | null> {\n  console.log('[dealCrud.getDealById] called for user:', userId, 'id:', id);\n  const supabase = getAuthenticatedClient(accessToken);\n  const { data, error } = await supabase\n    .from('deals')\n    .select('*')\n    .eq('id', id)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { \n     handleSupabaseError(error, 'fetching deal by ID');\n  }\n  return data;\n}\n\nexport async function createDeal(userId: string, input: DealInput, accessToken: string): Promise<Deal> {\n  console.log('[dealCrud.createDeal] called for user:', userId, 'input:', JSON.stringify(input, null, 2));\n  const supabase = getAuthenticatedClient(accessToken);\n  \n  const { pipeline_id, customFields, ...dealCoreData } = input; // pipeline_id is part of DealInput, used by schema/Zod, but not directly on 'deals' table\n  \n  const processedCustomFields = await processCustomFieldsForCreate(customFields, supabase);\n  \n  const insertPayload: any = { \n    ...dealCoreData, \n    user_id: userId,\n    // Ensure pipeline_id is not in insertPayload if it's not a direct column on 'deals' table\n    // It's used for validation/association elsewhere, not part of the direct deals table schema usually.\n    // If pipeline_id IS a direct column, this can be adjusted.\n    // Based on current DealInput, pipeline_id and stage_id are required.\n    // stage_id is on deals table, pipeline_id might be for stage validation.\n    // Assuming pipeline_id is not directly inserted into deals table from here.\n  };\n  // Remove pipeline_id if it was destructured into dealCoreData and is not a direct column.\n  // It's safer to explicitly build the payload if there's ambiguity.\n  // Let's rebuild dealCoreData for insert to be explicit:\n  const explicitDealCoreData: Partial<DealInput> = {\n    name: input.name,\n    stage_id: input.stage_id, // This is on deals table\n    amount: input.amount,\n    expected_close_date: input.expected_close_date,\n    person_id: input.person_id,\n    organization_id: input.organization_id,\n    deal_specific_probability: input.deal_specific_probability,\n    // Do NOT include pipeline_id here if it's not a direct column of 'deals' table\n  };\n\n  const finalInsertPayload: any = {\n    ...explicitDealCoreData,\n    user_id: userId,\n    custom_field_values: processedCustomFields, // This can be null\n  };\n\n  console.log('[dealCrud.createDeal] Final insert payload for Supabase:', JSON.stringify(finalInsertPayload, null, 2));\n\n  const { data: newDealRecord, error } = await supabase\n    .from('deals')\n    .insert(finalInsertPayload)\n    .select()\n    .single();\n\n  handleSupabaseError(error, 'creating deal');\n  if (!newDealRecord) {\n      throw new GraphQLError('Failed to create deal, no data returned', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n  }\n\n  const initialChanges: Record<string, any> = {};\n  const relevantFieldsForCreate: (keyof Deal)[] = ['name', 'stage_id', 'amount', 'expected_close_date', 'person_id', 'organization_id', 'deal_specific_probability'];\n  relevantFieldsForCreate.forEach(key => {\n    const stringKey = key as string; // Ensure key is treated as string for indexing\n    if (newDealRecord[stringKey] !== undefined && newDealRecord[stringKey] !== null) {\n      initialChanges[stringKey] = newDealRecord[stringKey];\n    }\n  });\n  // Also consider adding created custom fields to initialChanges if needed.\n  if (newDealRecord.custom_field_values) {\n    initialChanges.custom_field_values = newDealRecord.custom_field_values;\n  }\n\n  await recordEntityHistory(\n    supabase,\n    'deal_history',\n    'deal_id',\n    newDealRecord.id,\n    userId,\n    'DEAL_CREATED',\n    initialChanges\n  );\n  return newDealRecord as Deal;\n}\n\nexport async function updateDeal(userId: string, id: string, input: Partial<DealInput>, accessToken: string): Promise<Deal> {\n  console.log('[dealCrud.updateDeal] called for user:', userId, 'id:', id, 'input:', JSON.stringify(input, null, 2));\n  const supabase = getAuthenticatedClient(accessToken); \n  \n  const { customFields: inputCustomFields, ...coreInput } = input;\n\n  // Initial check: if coreInput is empty AND there are no customFields to process, then it's an empty update.\n  if (Object.keys(coreInput).length === 0 && (inputCustomFields === undefined || (Array.isArray(inputCustomFields) && inputCustomFields.length === 0))) {\n      throw new GraphQLError('No fields provided for deal update.', { extensions: { code: 'BAD_USER_INPUT' } });\n  }\n\n  const oldDealData = await getDealById(userId, id, accessToken);\n  if (!oldDealData) {\n      throw new GraphQLError('Deal not found for update', { extensions: { code: 'NOT_FOUND' } });\n  }\n\n  // Start with coreInput. Supabase client will ignore undefined fields.\n  const dbUpdatePayload: DealUpdatePayload = { ...coreInput }; \n  \n  // Process custom fields if the key 'customFields' was provided in the input\n  if (inputCustomFields !== undefined) { \n      const { finalCustomFieldValues } = await processCustomFieldsForUpdate(\n          (oldDealData as any).custom_field_values || null,\n          inputCustomFields, // can be null or empty array if key was present\n          supabase\n      );\n      // Assign regardless of whether finalCustomFieldValues is null, to allow clearing custom fields.\n      dbUpdatePayload.custom_field_values = finalCustomFieldValues;\n  }\n  \n  // Calculate and add probability fields\n  const probabilityUpdates = await calculateDealProbabilityFields(\n      coreInput, // Contains potential stage_id or amount changes\n      oldDealData,\n      supabase\n  );\n  if (probabilityUpdates.deal_specific_probability_to_set !== undefined) {\n      dbUpdatePayload.deal_specific_probability = probabilityUpdates.deal_specific_probability_to_set;\n  }\n  if (probabilityUpdates.weighted_amount_to_set !== undefined) {\n      dbUpdatePayload.weighted_amount = probabilityUpdates.weighted_amount_to_set;\n  }\n\n  // Ensure pipeline_id is not part of the direct update payload to 'deals' table\n  if ('pipeline_id' in dbUpdatePayload) {\n      delete (dbUpdatePayload as any).pipeline_id;\n  }\n\n  // Check if there's anything to update after all processing.\n  // We need to be careful: dbUpdatePayload might contain only { custom_field_values: null }\n  // which IS an update. Or { deal_specific_probability: null } which is also an update.\n  // An empty object {} means no fields are being explicitly changed.\n  let hasActualUpdate = false;\n  for (const _key in dbUpdatePayload) {\n      hasActualUpdate = true;\n      break;\n  }\n\n  if (!hasActualUpdate) {\n    console.log('[dealCrud.updateDeal] No actual fields to update in DB payload after processing. Returning old deal data.');\n    return oldDealData; \n  }\n\n  console.log('[dealCrud.updateDeal] Final DB update payload:', JSON.stringify(dbUpdatePayload, null, 2));\n  const { data: updatedDeal, error } = await supabase\n    .from('deals')\n    .update(dbUpdatePayload) // Pass dbUpdatePayload directly\n    .eq('id', id)\n    .select()\n    .single();\n\n  handleSupabaseError(error, 'updating deal');\n   if (!updatedDeal) { \n      throw new GraphQLError('Deal update failed, no data returned', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n  }\n\n  const actualChanges = generateDealChanges(oldDealData, updatedDeal as Deal);\n  \n  if (Object.keys(actualChanges).length > 0) {\n    console.log('[dealCrud.updateDeal] Recording history with changes:', JSON.stringify(actualChanges, null, 2));\n    await recordEntityHistory(\n      supabase,\n      'deal_history',\n      'deal_id',\n      id,\n      userId,\n      'DEAL_UPDATED',\n      actualChanges\n    );\n\n    try {\n      await inngest.send({\n        name: 'crm/deal.updated',\n        user: { id: userId }, \n        data: {\n          dealId: id,\n          updatedFields: Object.keys(actualChanges),\n          changes: actualChanges, \n        },\n      });\n      console.log(`[dealCrud.updateDeal] Sent 'crm/deal.updated' event for deal ID: ${id}`);\n    } catch (eventError: any) {\n      console.error(`[dealCrud.updateDeal] Failed to send 'crm/deal.updated' event for deal ID: ${id}:`, eventError.message);\n    }\n  } else {\n      console.log('[dealCrud.updateDeal] No actual changes detected to record in history.');\n  }\n\n  return updatedDeal as Deal;\n}\n\nexport async function deleteDeal(userId: string, id: string, accessToken: string): Promise<boolean> {\n  console.log('[dealCrud.deleteDeal] called for user:', userId, 'id:', id);\n  const supabase = getAuthenticatedClient(accessToken);\n  \n  const { error, count } = await supabase\n    .from('deals')\n    .delete()\n    .eq('id', id);\n\n  handleSupabaseError(error, 'deleting deal');\n  \n  if (!error) {\n    await recordEntityHistory(\n      supabase,\n      'deal_history',\n      'deal_id',\n      id,\n      userId,\n      'DEAL_DELETED',\n      { deleted_deal_id: id }\n    );\n  }\n  \n  console.log('[dealCrud.deleteDeal] Deleted count (informational):', count);\n  return !error;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/dealService/dealCustomFields.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[679,682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[679,682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[825,828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[825,828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":24,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":24,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":24,"column":32,"nodeType":"Identifier","messageId":"unsafeCall","endLine":24,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":24,"column":85,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":24,"endColumn":97},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":26,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":26,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldName on an `error` typed value.","line":26,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1218,1221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1218,1221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":29,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":29,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":29,"column":80,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":29,"endColumn":114},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":29,"column":103,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":114},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":30,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":30,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":30,"column":85,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":30,"endColumn":119},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":30,"column":108,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":119},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":31,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":31,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":31,"column":87,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":31,"endColumn":122},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":31,"column":110,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":122},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":32,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":32,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":32,"column":81,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":32,"endColumn":113},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":32,"column":104,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":113},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":33,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":33,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":92},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":33,"column":103,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":33,"endColumn":146},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":33,"column":126,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":146},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":36,"column":14,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":36,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [fieldName] resolves to an `error` typed value.","line":36,"column":34,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":36,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":39,"column":143,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":145},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":42,"column":105,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":117},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2475,2478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2475,2478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":45,"column":119,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":131},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":45,"column":145,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":152},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3372,3375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3372,3375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3535,3538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3535,3538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3600,3603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3600,3603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4037,4040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4037,4040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":77,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":77,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":77,"column":32,"nodeType":"Identifier","messageId":"unsafeCall","endLine":77,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":77,"column":85,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":97},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":79,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":79,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldName on an `error` typed value.","line":79,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4301,4304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4301,4304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":82,"column":39,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":82,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":82,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":83,"column":44,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":83,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":83,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":84,"column":45,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":84,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":84,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":85,"column":42,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":85,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":85,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":85,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":86,"column":53,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":86,"endColumn":96},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":86,"column":76,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":96},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":88,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":88,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [fieldName] resolves to an `error` typed value.","line":88,"column":30,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":88,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":91,"column":105,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":117},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5162,5165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5162,5165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":94,"column":119,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":94,"endColumn":131},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":94,"column":145,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":94,"endColumn":152}],"suppressedMessages":[],"errorCount":61,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { CustomFieldValueInput } from '../generated/graphql';\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport { getCustomFieldDefinitionById } from '../customFieldDefinitionService';\n\n/**\n * Processes custom field inputs for deal creation.\n * @param customFieldsInput Array of custom field value inputs.\n * @param supabaseClient Authenticated Supabase client instance.\n * @returns A record of custom field names to their values, or null if no valid custom fields processed.\n */\nexport const processCustomFieldsForCreate = async (\n  customFieldsInput: CustomFieldValueInput[] | undefined | null,\n  supabaseClient: SupabaseClient\n): Promise<Record<string, any> | null> => {\n  if (!customFieldsInput || customFieldsInput.length === 0) {\n    return null;\n  }\n\n  const dbCustomFieldValues: Record<string, any> = {};\n  console.log('[dealCustomFields.processCustomFieldsForCreate] Processing customFields input count:', customFieldsInput.length);\n\n  for (const cfInput of customFieldsInput) {\n    try {\n      const definition = await getCustomFieldDefinitionById(supabaseClient, cfInput.definitionId);\n      if (definition) {\n        const fieldName = definition.fieldName;\n        let valueToStore: any = undefined; \n\n        if (cfInput.stringValue !== undefined && cfInput.stringValue !== null) valueToStore = cfInput.stringValue;\n        else if (cfInput.numberValue !== undefined && cfInput.numberValue !== null) valueToStore = cfInput.numberValue;\n        else if (cfInput.booleanValue !== undefined && cfInput.booleanValue !== null) valueToStore = cfInput.booleanValue;\n        else if (cfInput.dateValue !== undefined && cfInput.dateValue !== null) valueToStore = cfInput.dateValue; \n        else if (cfInput.selectedOptionValues !== undefined && cfInput.selectedOptionValues !== null) valueToStore = cfInput.selectedOptionValues;\n        \n        if (valueToStore !== undefined) {\n             dbCustomFieldValues[fieldName] = valueToStore;\n             console.log(`[dealCustomFields.processCustomFieldsForCreate] Storing for ${fieldName}:`, valueToStore);\n        } else {\n             console.log(`[dealCustomFields.processCustomFieldsForCreate] No value provided for custom field based on definition ${definition.id} (${fieldName}), skipping.`);\n        }\n      } else {\n        console.warn(`[dealCustomFields.processCustomFieldsForCreate] Custom field definition ${cfInput.definitionId} not found. Skipping.`);\n      }\n    } catch (defError: any) {\n        console.error(`[dealCustomFields.processCustomFieldsForCreate] Error fetching/processing definition ${cfInput.definitionId}:`, defError.message);\n    }\n  }\n  \n  console.log('[dealCustomFields.processCustomFieldsForCreate] Constructed dbCustomFieldValues:', JSON.stringify(dbCustomFieldValues, null, 2));\n  return Object.keys(dbCustomFieldValues).length > 0 ? dbCustomFieldValues : null;\n};\n\n/**\n * Processes custom field inputs for deal updates.\n * @param currentDbCustomFieldValues The existing custom field values from the database for the deal.\n * @param customFieldsInput Array of custom field value inputs for update.\n * @param supabaseClient Authenticated Supabase client instance.\n * @returns An object containing the final custom field values to be stored in the database.\n */\nexport const processCustomFieldsForUpdate = async (\n  currentDbCustomFieldValues: Record<string, any> | null,\n  customFieldsInput: CustomFieldValueInput[] | undefined | null,\n  supabaseClient: SupabaseClient\n): Promise<{ finalCustomFieldValues: Record<string, any> | null }> => {\n  let finalCustomFieldValues: Record<string, any> | null = currentDbCustomFieldValues || {};\n\n  if (!customFieldsInput || customFieldsInput.length === 0) {\n    // If no new input, return current values (could be null if nothing existed)\n    return { finalCustomFieldValues: finalCustomFieldValues }; \n  }\n  \n  console.log('[dealCustomFields.processCustomFieldsForUpdate] Processing customFields input count:', customFieldsInput.length);\n  const customFieldsToUpdate: Record<string, any> = {};\n\n  for (const cfInput of customFieldsInput) {\n    try {\n      const definition = await getCustomFieldDefinitionById(supabaseClient, cfInput.definitionId);\n      if (definition) {\n        const fieldName = definition.fieldName;\n        let valueToStore: any = null; // Default to null for updates, to allow clearing fields\n\n        if ('stringValue' in cfInput) valueToStore = cfInput.stringValue;\n        else if ('numberValue' in cfInput) valueToStore = cfInput.numberValue;\n        else if ('booleanValue' in cfInput) valueToStore = cfInput.booleanValue;\n        else if ('dateValue' in cfInput) valueToStore = cfInput.dateValue;\n        else if ('selectedOptionValues' in cfInput) valueToStore = cfInput.selectedOptionValues;\n        \n        customFieldsToUpdate[fieldName] = valueToStore;\n        console.log(`[dealCustomFields.processCustomFieldsForUpdate] Queuing update for custom field ${fieldName}:`, valueToStore);\n      } else {\n        console.warn(`[dealCustomFields.processCustomFieldsForUpdate] Custom field definition ${cfInput.definitionId} not found. Skipping.`);\n      }\n    } catch (defError: any) {\n        console.error(`[dealCustomFields.processCustomFieldsForUpdate] Error fetching/processing definition ${cfInput.definitionId}:`, defError.message);\n    }\n  }\n  \n  finalCustomFieldValues = { ...(currentDbCustomFieldValues || {}), ...customFieldsToUpdate };\n  console.log('[dealCustomFields.processCustomFieldsForUpdate] Merged custom_field_values:', JSON.stringify(finalCustomFieldValues, null, 2));\n  \n  return { finalCustomFieldValues };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/dealService/dealHistory.ts","messages":[{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"\"custom_field_values\" is overridden by string in this union type.","line":6,"column":49,"nodeType":"TSLiteralType","messageId":"literalOverridden","endLine":6,"endColumn":70},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[851,854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[851,854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[866,869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[866,869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":27,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":27,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[918,921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[918,921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":28,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":28,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1009,1012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1009,1012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1079,1082],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1079,1082],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1084,1087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1084,1087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1197,1200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1197,1200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1212,1215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1212,1215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"\"custom_field_values\" is overridden by string in this union type.","line":36,"column":47,"nodeType":"TSLiteralType","messageId":"literalOverridden","endLine":36,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":43,"column":21,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":43,"endColumn":132},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":43,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":43,"column":84,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":103},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":44,"column":21,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":44,"endColumn":140},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":44,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":44,"column":92,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":111},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":47,"column":77,"nodeType":"Property","messageId":"anyAssignment","endLine":47,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":47,"column":87,"nodeType":"Property","messageId":"anyAssignment","endLine":47,"endColumn":95},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":52,"column":21,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":52,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":52,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":53,"column":21,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":53,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":53,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":55,"column":60,"nodeType":"Property","messageId":"anyAssignment","endLine":55,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":55,"column":87,"nodeType":"Property","messageId":"anyAssignment","endLine":55,"endColumn":112},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":60,"column":22,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":60,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":60,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":61,"column":22,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":61,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":61,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":61,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":63,"column":60,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":63,"column":87,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":112},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":68,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":68,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":68,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":69,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":69,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":69,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":69,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":71,"column":48,"nodeType":"Property","messageId":"anyAssignment","endLine":71,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":71,"column":58,"nodeType":"Property","messageId":"anyAssignment","endLine":71,"endColumn":66}],"suppressedMessages":[],"errorCount":38,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Deal } from '../generated/graphql';\nimport { diff, Diff } from 'deep-diff';\n\n// Define which fields are tracked for history purposes.\n// Add 'custom_field_values' as it's a special case handled in diffing.\nexport const TRACKED_DEAL_FIELDS: (keyof Deal | 'custom_field_values')[] = [\n  'name', \n  'stage_id', \n  'amount', \n  'expected_close_date', \n  'person_id', \n  'organization_id', \n  'deal_specific_probability',\n  'custom_field_values' \n];\n\n/**\n * Generates a structured diff of changes between old and new deal data.\n * @param oldDealData The original deal data.\n * @param updatedDealData The new deal data after updates.\n * @returns A record of actual changes, or an empty object if no tracked changes are found.\n */\nexport const generateDealChanges = (\n  oldDealData: Deal, \n  updatedDealData: Deal\n): Record<string, { oldValue: any; newValue: any }> => {\n  const oldDealForDiff = oldDealData as any; // Cast to handle custom_field_values\n  const updatedDealForDiff = updatedDealData as any; // Cast to handle custom_field_values\n\n  const differences: Diff<any, any>[] | undefined = diff(oldDealForDiff, updatedDealForDiff);\n  const actualChanges: Record<string, { oldValue: any; newValue: any }> = {};\n\n  if (differences) {\n    differences.forEach(d => {\n      if (d.path && d.path.length > 0) {\n        const key = d.path[0] as keyof Deal | 'custom_field_values';\n        \n        if (TRACKED_DEAL_FIELDS.includes(key)) {\n          if (key === 'custom_field_values') {\n            // Handle changes within the custom_field_values JSON object\n            if (d.path.length === 2) { // e.g., ['custom_field_values', 'fieldName']\n              const customFieldName = d.path[1] as string;\n              const oldValue = oldDealForDiff.custom_field_values ? oldDealForDiff.custom_field_values[customFieldName] : undefined;\n              const newValue = updatedDealForDiff.custom_field_values ? updatedDealForDiff.custom_field_values[customFieldName] : undefined;\n              \n              if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {\n                actualChanges[`custom_field_values.${customFieldName}`] = { oldValue, newValue };\n              }\n            } else if (d.kind === 'A' && d.item && d.item.kind) { \n              // This handles changes to array elements within custom_field_values (e.g. for MULTI_SELECT)\n              // For simplicity, we'll record the whole custom_field_values object if an array within it changes.\n              const fullOldCFValues = oldDealForDiff.custom_field_values || {};\n              const fullNewCFValues = updatedDealForDiff.custom_field_values || {};\n              if (JSON.stringify(fullOldCFValues) !== JSON.stringify(fullNewCFValues) && !actualChanges['custom_field_values']) { // Avoid overwriting granular changes if already recorded\n                  actualChanges['custom_field_values'] = { oldValue: fullOldCFValues, newValue: fullNewCFValues };\n              }\n            } else if (d.kind === 'N' || d.kind === 'D' || d.kind === 'E') {\n              // This handles cases where the entire custom_field_values object is new, deleted, or edited \n              // Or a top-level key within custom_field_values is added/deleted/edited.\n               const fullOldCFValues = oldDealForDiff.custom_field_values || {};\n               const fullNewCFValues = updatedDealForDiff.custom_field_values || {};\n               if (JSON.stringify(fullOldCFValues) !== JSON.stringify(fullNewCFValues)) {\n                  actualChanges['custom_field_values'] = { oldValue: fullOldCFValues, newValue: fullNewCFValues };\n               }\n            }\n          } else {\n            // Standard flat field change\n            const oldValue = oldDealForDiff[key];\n            const newValue = updatedDealForDiff[key];\n            if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {\n              actualChanges[key as string] = { oldValue, newValue };\n            }\n          }\n        }\n      }\n    });\n  }\n  return actualChanges;\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/dealService/dealProbability.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":26,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":26,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":26,"column":76,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":27,"column":79,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":27,"column":110,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":118},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":31,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":35,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":35,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":35,"column":79,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":37,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":54,"column":13,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":54,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":58,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":58,"endColumn":119},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":58,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":58,"column":92,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":58,"column":113,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":119},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":67,"column":80,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":70,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":70,"column":76,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":70,"column":99,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":105},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_specific_probability on an `error` typed value.","line":83,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_specific_probability on an `error` typed value.","line":83,"column":79,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":84,"column":17,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":84,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_specific_probability on an `error` typed value.","line":84,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":85,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":85,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":89,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":94,"column":26,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":94,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_specific_probability on an `error` typed value.","line":99,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_specific_probability on an `error` typed value.","line":99,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":100},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":100,"column":13,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":100,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_specific_probability on an `error` typed value.","line":100,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":101,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":105,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":111,"column":22,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":111,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":113,"column":103,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":111},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":118,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":118,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":119,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":63}],"suppressedMessages":[],"errorCount":35,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Deal, DealInput } from '../generated/graphql';\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport { handleSupabaseError } from '../serviceUtils'; // For consistent error handling\nimport { GraphQLError } from 'graphql';\n\ninterface DealProbabilityCalculationResult {\n  deal_specific_probability_to_set?: number | null;\n  weighted_amount_to_set?: number | null;\n}\n\n/**\n * Calculates deal probability and weighted amount based on stage or amount changes.\n * @param dealUpdateInput The partial input for the deal update.\n * @param oldDealData The current state of the deal from the database.\n * @param supabaseClient Authenticated Supabase client instance.\n * @returns An object with `deal_specific_probability_to_set` and `weighted_amount_to_set`.\n */\nexport const calculateDealProbabilityFields = async (\n  dealUpdateInput: Partial<DealInput>,\n  oldDealData: Deal, \n  supabaseClient: SupabaseClient\n): Promise<DealProbabilityCalculationResult> => {\n  const result: DealProbabilityCalculationResult = {};\n\n  // 1. Handle stage change and associated probability adjustments\n  if (dealUpdateInput.stage_id && dealUpdateInput.stage_id !== oldDealData.stage_id) {\n    console.log(`[dealProbability.calculate] Stage changed from ${oldDealData.stage_id} to ${dealUpdateInput.stage_id}`);\n    const { data: newStage, error: stageError } = await supabaseClient\n        .from('stages')\n        .select('stage_type, deal_probability') \n        .eq('id', dealUpdateInput.stage_id)\n        .single();\n\n    if (stageError) {\n        handleSupabaseError(stageError, `fetching new stage ${dealUpdateInput.stage_id} for deal update`);\n        // Throwing here ensures the operation stops if the target stage is invalid.\n        throw new GraphQLError(`Target stage ${dealUpdateInput.stage_id} not found.`, { extensions: { code: 'BAD_USER_INPUT' } });\n    }\n\n    if (newStage) {\n        console.log('[dealProbability.calculate] New stage properties:', newStage);\n        let effectiveProbability: number | null = null;\n\n        if (newStage.stage_type === 'WON') {\n            result.deal_specific_probability_to_set = 1.0;\n            effectiveProbability = 1.0;\n            console.log('[dealProbability.calculate] Setting deal_specific_probability to 1.0 for WON stage');\n        } else if (newStage.stage_type === 'LOST') {\n            result.deal_specific_probability_to_set = 0.0;\n            effectiveProbability = 0.0;\n            console.log('[dealProbability.calculate] Setting deal_specific_probability to 0.0 for LOST stage');\n        } else { // OPEN stage\n            result.deal_specific_probability_to_set = null; \n            effectiveProbability = newStage.deal_probability; \n            console.log('[dealProbability.calculate] Clearing deal_specific_probability for OPEN stage, effective probability from stage:', effectiveProbability);\n        }\n\n        const currentAmount = typeof dealUpdateInput.amount === 'number' ? dealUpdateInput.amount : oldDealData.amount;\n        if (typeof currentAmount === 'number' && effectiveProbability !== null) {\n            result.weighted_amount_to_set = currentAmount * effectiveProbability;\n            console.log('[dealProbability.calculate] Calculated weighted_amount:', result.weighted_amount_to_set);\n        } else {\n            result.weighted_amount_to_set = null; \n            console.log('[dealProbability.calculate] Setting weighted_amount to null due to missing amount or probability for new stage.');\n        }\n    } else {\n         console.warn(`[dealProbability.calculate] New stage ${dealUpdateInput.stage_id} not found, probability not adjusted. Weighted amount not calculated.`);\n    }\n  // 2. Handle amount change if stage did not change (or if stage change logic didn't set weighted_amount)\n  } else if (typeof dealUpdateInput.amount === 'number' && dealUpdateInput.amount !== oldDealData.amount) {\n    console.log('[dealProbability.calculate] Amount changed. Recalculating weighted_amount.');\n    let existingEffectiveProbability: number | null = null;\n\n    // Use the probability that would result from the current update input if stage also changed,\n    // otherwise use old deal's probability logic.\n    if (result.deal_specific_probability_to_set !== undefined) { // Stage change has determined new specific probability\n        if (result.deal_specific_probability_to_set === 1.0 || result.deal_specific_probability_to_set === 0.0) {\n            existingEffectiveProbability = result.deal_specific_probability_to_set;\n        } else { // deal_specific_probability is null (OPEN stage), need stage's default probability\n            // This requires fetching the stage if stage_id isn't changing or already fetched. This is complex if stage is not changing.\n            // For simplicity, if stage is not changing, use existing oldDealData probability logic.\n            // This case is primarily when ONLY amount changes.\n            if (oldDealData.deal_specific_probability !== null && oldDealData.deal_specific_probability !== undefined) {\n                existingEffectiveProbability = oldDealData.deal_specific_probability;\n            } else if (oldDealData.stage_id) {\n                const { data: currentStage } = await supabaseClient\n                    .from('stages')\n                    .select('deal_probability, stage_type') \n                    .eq('id', oldDealData.stage_id)\n                    .single(); // Error handling might be needed here too\n                if (currentStage) {\n                    if (currentStage.stage_type === 'WON') existingEffectiveProbability = 1.0;\n                    else if (currentStage.stage_type === 'LOST') existingEffectiveProbability = 0.0;\n                    else existingEffectiveProbability = currentStage.deal_probability;\n                }\n            }\n        }\n    } else { // Stage is not changing, use old deal's probability context\n        if (oldDealData.deal_specific_probability !== null && oldDealData.deal_specific_probability !== undefined) {\n            existingEffectiveProbability = oldDealData.deal_specific_probability;\n        } else if (oldDealData.stage_id) {\n            const { data: currentStage, error: currentStageError } = await supabaseClient\n                .from('stages')\n                .select('deal_probability, stage_type') \n                .eq('id', oldDealData.stage_id)\n                .single();\n            \n            if (currentStage && !currentStageError) {\n                if (currentStage.stage_type === 'WON') existingEffectiveProbability = 1.0;\n                else if (currentStage.stage_type === 'LOST') existingEffectiveProbability = 0.0;\n                else existingEffectiveProbability = currentStage.deal_probability;\n            } else {\n                console.warn(`[dealProbability.calculate] Could not fetch current stage ${oldDealData.stage_id} to recalculate weighted_amount.`);\n            }\n        }\n    }\n\n    if (typeof dealUpdateInput.amount === 'number' && existingEffectiveProbability !== null) {\n        result.weighted_amount_to_set = dealUpdateInput.amount * existingEffectiveProbability;\n        console.log('[dealProbability.calculate] Amount changed, recalculated weighted_amount:', result.weighted_amount_to_set);\n    } else {\n        result.weighted_amount_to_set = null;\n        console.log('[dealProbability.calculate] Amount changed, but weighted_amount set to null due to missing effective probability or new amount.');\n    }\n  }\n  return result;\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/inngestClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/organizationService.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":54,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":54,"endColumn":92},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":54,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":54,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getOrganizations on an `error` typed value.","line":54,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":61,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":61,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":62,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":71,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":71,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getOrganizations on an `error` typed value.","line":71,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":87,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":87,"endColumn":101},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":87,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":87,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getOrganizationById on an `error` typed value.","line":87,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":89,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":89,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":90,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":100,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":100,"endColumn":103},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":100,"column":27,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":100,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getOrganizationById on an `error` typed value.","line":100,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":107,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":107,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getOrganizationById on an `error` typed value.","line":107,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":107,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":123,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":123,"endColumn":108},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":123,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":123,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createOrganization on an `error` typed value.","line":123,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":123,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":125,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":125,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":126,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":136,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":136,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createOrganization on an `error` typed value.","line":136,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":136,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":147,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":147,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createOrganization on an `error` typed value.","line":147,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":161,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":161,"endColumn":120},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":161,"column":32,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":161,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updateOrganization on an `error` typed value.","line":161,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":163,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":163,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":164,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":175,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":175,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updateOrganization on an `error` typed value.","line":175,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":175,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":184,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":184,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updateOrganization on an `error` typed value.","line":184,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":184,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":198,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":198,"endColumn":103},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":198,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":198,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deleteOrganization on an `error` typed value.","line":198,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":201,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":201,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":202,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":202,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":208,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":208,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":208,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":208,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deleteOrganization on an `error` typed value.","line":208,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":208,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":211,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":211,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":211,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":211,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deleteOrganization on an `error` typed value.","line":211,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":211,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":218,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":218,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deleteOrganization on an `error` typed value.","line":218,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":58}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1044,1047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1044,1047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":48,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, MockedFunction } from 'vitest';\nimport { createClient, /* SupabaseClient, */ PostgrestError } from '@supabase/supabase-js'; // Comment out SupabaseClient\nimport { organizationService } from './organizationService'; // Import the service\nimport { GraphQLError } from 'graphql';\n\n// --- Mock Setup (Same pattern) ---\nconst mockPostgrestBuilderMethods = {\n    select: vi.fn().mockReturnThis(),\n    insert: vi.fn().mockReturnThis(),\n    update: vi.fn().mockReturnThis(),\n    delete: vi.fn().mockReturnThis(),\n    eq: vi.fn().mockReturnThis(),\n    single: vi.fn(),\n    order: vi.fn().mockReturnThis(),\n};\nvi.mock('@supabase/supabase-js', () => {\n  const mockClient = { from: vi.fn(() => mockPostgrestBuilderMethods), auth: {} };\n  return { createClient: vi.fn(() => mockClient) };\n});\n\n// --- Helper Types ---\ninterface MockUser { id: string; }\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype MockedBuilderMethods = { [K in keyof typeof mockPostgrestBuilderMethods]: MockedFunction<any>; };\n\n// --- Test Suite --- \ndescribe('organizationService', () => {\n  let mockedCreateClient: MockedFunction<typeof createClient>;\n  let mockBuilderMethods: MockedBuilderMethods; \n  const mockUser: MockUser = { id: 'user-org-789' };\n  const mockAccessToken = 'mock-org-access-token';\n\n  beforeEach(async () => { \n    vi.clearAllMocks();\n    const { createClient: actualMockedCreateClient } = await import('@supabase/supabase-js');\n    mockedCreateClient = actualMockedCreateClient as MockedFunction<typeof createClient>;\n    mockBuilderMethods = mockPostgrestBuilderMethods as MockedBuilderMethods;\n    Object.values(mockBuilderMethods).forEach(mockFn => {\n        mockFn.mockClear();\n        if (mockFn !== mockBuilderMethods.single) { mockFn.mockReturnThis(); }\n    });\n  });\n\n  // --- Test Cases --- \n\n  describe('getOrganizations', () => {\n    it('should fetch organizations for a given user', async () => {\n      const mockOrgsData = [\n        { id: 'org-1', name: 'Org Alpha', user_id: mockUser.id },\n        { id: 'org-2', name: 'Org Beta', user_id: mockUser.id },\n      ];\n      mockBuilderMethods.order.mockResolvedValueOnce({ data: mockOrgsData, error: null });\n\n      const orgs = await organizationService.getOrganizations(mockUser.id, mockAccessToken);\n\n      expect(mockedCreateClient).toHaveBeenCalledWith(\n          process.env.SUPABASE_URL, \n          process.env.SUPABASE_ANON_KEY, \n          { global: { headers: { Authorization: `Bearer ${mockAccessToken}` } } }\n      );\n      const clientInstance = mockedCreateClient.mock.results[0]!.value;\n      expect(clientInstance.from).toHaveBeenCalledWith('organizations');\n      expect(mockBuilderMethods.select).toHaveBeenCalledWith('*');\n      expect(mockBuilderMethods.order).toHaveBeenCalledWith('name', { ascending: true }); \n      expect(orgs).toEqual(mockOrgsData);\n    });\n\n    it('should throw GraphQLError if Supabase fails', async () => {\n      const mockDbError: Partial<PostgrestError> = { message: 'Org Select failed' };\n      mockBuilderMethods.order.mockResolvedValueOnce({ data: null, error: mockDbError as PostgrestError });\n      await expect(organizationService.getOrganizations(mockUser.id, mockAccessToken))\n        .rejects.toThrow(new GraphQLError('Database error during fetching organizations. Please try again later.', {\n            extensions: { \n              code: 'INTERNAL_SERVER_ERROR', \n              originalError: { message: mockDbError.message, code: undefined }\n            }\n        }));\n    });\n  });\n\n  describe('getOrganizationById', () => {\n    const orgId = 'org-def';\n    it('should fetch a single organization by ID', async () => {\n      const mockOrgData = { id: orgId, name: 'Specific Org', user_id: mockUser.id };\n      mockBuilderMethods.single.mockResolvedValueOnce({ data: mockOrgData, error: null });\n\n      const org = await organizationService.getOrganizationById(mockUser.id, orgId, mockAccessToken);\n\n      const clientInstance = mockedCreateClient.mock.results[0]!.value;\n      expect(clientInstance.from).toHaveBeenCalledWith('organizations');\n      expect(mockBuilderMethods.select).toHaveBeenCalledWith('*');\n      expect(mockBuilderMethods.eq).toHaveBeenCalledWith('id', orgId);\n      expect(mockBuilderMethods.single).toHaveBeenCalled();\n      expect(org).toEqual(mockOrgData);\n    });\n\n     it('should return null if organization not found (PGRST116)', async () => {\n        const notFoundError: Partial<PostgrestError> = { code: 'PGRST116' };\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: notFoundError as PostgrestError });\n        const org = await organizationService.getOrganizationById(mockUser.id, orgId, mockAccessToken);\n        expect(org).toBeNull();\n    });\n\n    it('should throw GraphQLError for other errors', async () => {\n        const dbError: Partial<PostgrestError> = { message: 'DB org error' };\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: dbError as PostgrestError });\n        await expect(organizationService.getOrganizationById(mockUser.id, orgId, mockAccessToken))\n            .rejects.toThrow(new GraphQLError('Database error during fetching organization by ID. Please try again later.', {\n                extensions: { \n                  code: 'INTERNAL_SERVER_ERROR', \n                  originalError: { message: dbError.message, code: undefined }\n                }\n            }));\n    });\n  });\n\n  describe('createOrganization', () => {\n    const orgInput = { name: 'New Org', address: '123 Main St' };\n    const expectedRecord = { ...orgInput, id: 'new-org-uuid', user_id: mockUser.id }; \n\n    it('should create an organization and return the record', async () => {\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: expectedRecord, error: null });\n        const newOrg = await organizationService.createOrganization(mockUser.id, orgInput, mockAccessToken);\n\n        const clientInstance = mockedCreateClient.mock.results[0]!.value;\n        expect(clientInstance.from).toHaveBeenCalledWith('organizations');\n        expect(mockBuilderMethods.insert).toHaveBeenCalledWith({ ...orgInput, user_id: mockUser.id });\n        expect(mockBuilderMethods.select).toHaveBeenCalled(); \n        expect(mockBuilderMethods.single).toHaveBeenCalled();\n        expect(newOrg).toEqual(expectedRecord);\n    });\n\n    it('should throw GraphQLError if insert fails', async () => {\n        const dbError: Partial<PostgrestError> = { message: 'Org Insert failed' };\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: dbError as PostgrestError });\n        await expect(organizationService.createOrganization(mockUser.id, orgInput, mockAccessToken))\n            .rejects.toThrow(new GraphQLError('Database error during creating organization. Please try again later.', {\n                extensions: { \n                  code: 'INTERNAL_SERVER_ERROR', \n                  originalError: { message: dbError.message, code: undefined }\n                }\n            }));\n    });\n\n     it('should throw GraphQLError if insert returns no data', async () => {\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: null });\n        await expect(organizationService.createOrganization(mockUser.id, orgInput, mockAccessToken))\n            .rejects.toThrow(new GraphQLError('Failed to create organization, no data returned', {\n                 extensions: { code: 'INTERNAL_SERVER_ERROR' }\n            }));\n    });\n  });\n\n  describe('updateOrganization', () => {\n    const orgId = 'org-to-update';\n    const updateInput = { name: 'Updated Org Name' };\n    const expectedRecord = { id: orgId, user_id: mockUser.id, ...updateInput };\n\n    it('should update an organization and return the record', async () => {\n      mockBuilderMethods.single.mockResolvedValueOnce({ data: expectedRecord, error: null });\n      const updatedOrg = await organizationService.updateOrganization(mockUser.id, orgId, updateInput, mockAccessToken);\n\n      const clientInstance = mockedCreateClient.mock.results[0]!.value;\n      expect(clientInstance.from).toHaveBeenCalledWith('organizations');\n      expect(mockBuilderMethods.update).toHaveBeenCalledWith(updateInput);\n      expect(mockBuilderMethods.eq).toHaveBeenCalledWith('id', orgId);\n      expect(mockBuilderMethods.select).toHaveBeenCalled();\n      expect(mockBuilderMethods.single).toHaveBeenCalled();\n      expect(updatedOrg).toEqual(expectedRecord);\n    });\n\n    it('should throw GraphQLError if organization not found (PGRST116)', async () => {\n        const notFoundError: Partial<PostgrestError> = { code: 'PGRST116' };\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: notFoundError as PostgrestError });\n        await expect(organizationService.updateOrganization(mockUser.id, orgId, updateInput, mockAccessToken))\n            .rejects.toThrow(new GraphQLError('Organization not found', {\n                extensions: { code: 'NOT_FOUND' }\n            }));\n    });\n\n     it('should throw GraphQLError for other errors', async () => {\n        const dbError: Partial<PostgrestError> = { message: 'Org Update failed' };\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: dbError as PostgrestError });\n        await expect(organizationService.updateOrganization(mockUser.id, orgId, updateInput, mockAccessToken))\n            .rejects.toThrow(new GraphQLError('Database error during updating organization. Please try again later.', {\n                extensions: { \n                  code: 'INTERNAL_SERVER_ERROR', \n                  originalError: { message: dbError.message, code: undefined }\n                }\n            }));\n    });\n  });\n\n  describe('deleteOrganization', () => {\n    const orgId = 'org-to-delete';\n    it('should return true on successful deletion', async () => {\n      mockBuilderMethods.eq.mockResolvedValueOnce({ error: null, count: 1 });\n      const result = await organizationService.deleteOrganization(mockUser.id, orgId, mockAccessToken);\n\n      expect(result).toBe(true);\n      const clientInstance = mockedCreateClient.mock.results[0]!.value;\n      expect(clientInstance.from).toHaveBeenCalledWith('organizations');\n      expect(mockBuilderMethods.eq).toHaveBeenCalledWith('id', orgId);\n    });\n\n     it('should return true even if count is 0 or null', async () => {\n      mockBuilderMethods.eq.mockResolvedValueOnce({ error: null, count: 0 });\n      const result1 = await organizationService.deleteOrganization(mockUser.id, orgId, mockAccessToken);\n      expect(result1).toBe(true);\n      mockBuilderMethods.eq.mockResolvedValueOnce({ error: null, count: null });\n      const result2 = await organizationService.deleteOrganization(mockUser.id, orgId, mockAccessToken);\n       expect(result2).toBe(true);\n    });\n\n    it('should throw GraphQLError if delete fails', async () => {\n      const dbError: Partial<PostgrestError> = { message: 'Org Delete failed' };\n      mockBuilderMethods.eq.mockResolvedValueOnce({ error: dbError as PostgrestError, count: null });\n      await expect(organizationService.deleteOrganization(mockUser.id, orgId, mockAccessToken))\n        .rejects.toThrow(new GraphQLError('Database error during deleting organization. Please try again later.', {\n            extensions: { \n              code: 'INTERNAL_SERVER_ERROR', \n              originalError: { message: dbError.message, code: undefined }\n            }\n        }));\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/organizationService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CustomFieldDefinition' is defined but never used.","line":6,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":92},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2108,2111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2108,2111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":52,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":56,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":52,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":52,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getCustomFieldDefinitions on an `error` typed value.","line":52,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Organization on an `error` typed value.","line":54,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":58,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3008,3011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3008,3011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `Iterable<readonly [unknown, unknown]> | null | undefined`.","line":67,"column":33,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":67,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":67,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":67,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":67,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":67,"column":56,"nodeType":"ArrayExpression","messageId":"unsafeReturn","endLine":67,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":67,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":70,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":72,"column":102,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":114},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Organization on an `error` typed value.","line":75,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":69},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3815,3818],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3815,3818],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Text on an `error` typed value.","line":86,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":86,"column":34,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":86,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":86,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Number on an `error` typed value.","line":87,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":87,"column":36,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":87,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":87,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Boolean on an `error` typed value.","line":88,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":88,"column":37,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":88,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":88,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Date on an `error` typed value.","line":89,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":89,"column":34,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":89,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":89,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Dropdown on an `error` typed value.","line":90,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .MultiSelect on an `error` typed value.","line":91,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":92,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":92,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":92,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":102,"column":10,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":102,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [definition.fieldName] resolves to an `error` typed value.","line":102,"column":31,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":102,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5002,5005],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5002,5005],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5118,5121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5118,5121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":123,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":127,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":123,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":123,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getCustomFieldDefinitions on an `error` typed value.","line":123,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":123,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Organization on an `error` typed value.","line":125,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":125,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":129,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":129,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6064,6067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6064,6067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `Iterable<readonly [unknown, unknown]> | null | undefined`.","line":135,"column":33,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":135,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":135,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":135,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":135,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":135,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":135,"column":56,"nodeType":"ArrayExpression","messageId":"unsafeReturn","endLine":135,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":135,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":135,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":141,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":143,"column":102,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":143,"endColumn":114},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Organization on an `error` typed value.","line":146,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string`.","line":151,"column":25,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":151,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6987,6990],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6987,6990],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":155,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":155,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":155,"column":76,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":155,"column":98,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":107},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":155,"column":117,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":137},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Text on an `error` typed value.","line":161,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":161,"column":40,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":161,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":161,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Number on an `error` typed value.","line":162,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":162,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":162,"column":42,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":162,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":162,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":162,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Boolean on an `error` typed value.","line":163,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":163,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":163,"column":43,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":163,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":163,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":163,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Date on an `error` typed value.","line":164,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":164,"column":40,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":164,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":164,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Dropdown on an `error` typed value.","line":165,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":165,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .MultiSelect on an `error` typed value.","line":166,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":166,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":167,"column":17,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":167,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":167,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":167,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":173,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":173,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [definition.fieldName] resolves to an `error` typed value.","line":173,"column":34,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":173,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [definition.fieldName] resolves to an `error` typed value.","line":180,"column":41,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":180,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":198,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":198,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":198,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":198,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":199,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":202,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":199,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":202,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":199,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":201,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":199,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":200,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":200,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":200,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":201,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":201,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .order on an `error` typed value.","line":202,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":202,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":204,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":204,"endColumn":24},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'Organization' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":209,"column":87,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":209,"endColumn":99},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":211,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":211,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":211,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":211,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":212,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":216,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":212,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":216,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":212,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":215,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":212,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":214,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":212,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":213,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":213,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":214,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":214,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":215,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":215,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .single on an `error` typed value.","line":216,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":216,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .code on an `error` typed value.","line":218,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":219,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":219,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":227,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":227,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":227,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":227,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `SupabaseClient<any, \"public\", any>`.","line":230,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":230,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `CustomFieldValueInput[] | null | undefined`.","line":231,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":231,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .customFields on an `error` typed value.","line":231,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":231,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":234,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11214,11217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11214,11217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":235,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":235,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":235,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":235,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":236,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":236,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `error` typed value.","line":236,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":236,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":237,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":237,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `error` typed value.","line":237,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":237,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":242,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":242,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":245,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":249,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":245,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":249,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":245,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":248,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":245,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":247,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":245,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":246,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":246,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":246,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .insert on an `error` typed value.","line":247,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":247,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":248,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":248,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .single on an `error` typed value.","line":249,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":249,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":251,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":251,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":261,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":261,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":261,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":261,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":264,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":264,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `SupabaseClient<any, \"public\", any>`.","line":270,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":270,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Record<string, any> | null | undefined`.","line":271,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":271,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":271,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12722,12725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12722,12725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":271,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":271,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `CustomFieldValueInput[] | null | undefined`.","line":272,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":272,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .customFields on an `error` typed value.","line":272,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":272,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":275,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":275,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":275,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12860,12863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12860,12863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .customFields on an `any` value.","line":276,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":276,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":279,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":279,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":282,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":287,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":282,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":287,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":282,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":286,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":282,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":285,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":282,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":284,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":282,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":283,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":283,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":283,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .update on an `error` typed value.","line":284,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":284,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":285,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":285,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":286,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":286,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .single on an `error` typed value.","line":287,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":287,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .code on an `error` typed value.","line":289,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":289,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":292,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":292,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":302,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":302,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":302,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":302,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":303,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":306,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":303,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":306,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":303,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":305,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":303,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":304,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":304,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":304,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .delete on an `error` typed value.","line":305,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":305,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":306,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":306,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":308,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":308,"endColumn":24}],"suppressedMessages":[],"errorCount":160,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { /* createClient, SupabaseClient, */ } from '@supabase/supabase-js';\n// import { supabase } from './supabaseClient'; // Removed unused import\n// import type { User } from '@supabase/supabase-js';\nimport { GraphQLError } from 'graphql';\nimport { getAuthenticatedClient, handleSupabaseError } from './serviceUtils'; // Import shared helpers\nimport type { Organization, OrganizationInput, CustomFieldValueInput, CustomFieldDefinition } from './generated/graphql'; // Added CustomFieldValueInput, CustomFieldDefinition\nimport { CustomFieldEntityType, CustomFieldType } from './generated/graphql'; // Import enums\nimport * as customFieldDefinitionService from './customFieldDefinitionService'; // For fetching definitions\nimport { SupabaseClient } from '@supabase/supabase-js'; // Ensure SupabaseClient is imported for type hints\n\n// REMOVED: Redundant env var loading\n// import dotenv from 'dotenv';\n// dotenv.config();\n// const supabaseUrl = process.env.SUPABASE_URL;\n// const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;\n// if (!supabaseUrl) { ... }\n// if (!supabaseAnonKey) { ... }\n\n// REMOVED: Helper Functions (now in serviceUtils.ts)\n// function getAuthenticatedClient(accessToken: string): SupabaseClient { ... }\n// function handleSupabaseError(error: PostgrestError | null, context: string) { ... }\n\n// --- Organization Data Shape ---\n\n// Input for creating/updating organizations\n// interface OrganizationInput { // REMOVED\n//   name: string; // Assuming name is required\n//   address?: string | null;\n//   notes?: string | null;\n//   // Add other fields from schema as needed (e.g., website)\n// }\n\n// Shape returned by the database (includes id, timestamps, user_id)\n// interface OrganizationRecord extends OrganizationInput { // REMOVED\n//   id: string;\n//   created_at: string;\n//   updated_at: string;\n//   user_id: string;\n// }\n\n// --- Organization Service ---\n\n// Helper to process custom fields for creation\nconst processCustomFieldsForOrganizationCreate = async (\n  supabase: SupabaseClient,\n  inputCustomFields: CustomFieldValueInput[] | undefined | null,\n): Promise<Record<string, any> | undefined> => {\n  if (!inputCustomFields || inputCustomFields.length === 0) {\n    return undefined; // No custom fields to process\n  }\n\n  const definitions = await customFieldDefinitionService.getCustomFieldDefinitions(\n    supabase, \n    CustomFieldEntityType.Organization, \n    false // only active\n  );\n\n  if (!definitions || definitions.length === 0) {\n    // If there are no definitions, but custom fields were provided, this is a mismatch.\n    // Depending on strictness, could throw an error or just ignore the input.\n    // For now, let's log and ignore, effectively clearing them if no definitions match.\n    console.warn('[processCustomFieldsForOrganizationCreate] Custom fields provided, but no active definitions found for Organization.');\n    return {}; // Return empty object to signify processing occurred but yielded no values\n  }\n\n  const newCustomFieldValues: Record<string, any> = {};\n  const definitionMap = new Map(definitions.map(def => [def.id, def]));\n\n  for (const cfInput of inputCustomFields) {\n    const definition = definitionMap.get(cfInput.definitionId);\n    if (!definition) {\n      console.warn(`[processCustomFieldsForOrganizationCreate] No definition found for ID: ${cfInput.definitionId}. Skipping.`);\n      continue;\n    }\n    if (definition.entityType !== CustomFieldEntityType.Organization) {\n      console.warn(`[processCustomFieldsForOrganizationCreate] Definition ${definition.fieldName} is not for Organization entity. Skipping.`);\n      continue;\n    }\n    if (!definition.isActive) {\n      console.warn(`[processCustomFieldsForOrganizationCreate] Definition ${definition.fieldName} is not active. Skipping.`);\n      continue;\n    }\n\n    let valueToStore: any = null;\n    switch (definition.fieldType) {\n      case CustomFieldType.Text: valueToStore = cfInput.stringValue; break;\n      case CustomFieldType.Number: valueToStore = cfInput.numberValue; break;\n      case CustomFieldType.Boolean: valueToStore = cfInput.booleanValue; break;\n      case CustomFieldType.Date: valueToStore = cfInput.dateValue; break; // Assuming dateValue is string/Date\n      case CustomFieldType.Dropdown:\n      case CustomFieldType.MultiSelect:\n        valueToStore = cfInput.selectedOptionValues;\n        break;\n      default:\n        console.warn(`[processCustomFieldsForOrganizationCreate] Unknown field type ${definition.fieldType} for ${definition.fieldName}`);\n        continue;\n    }\n    \n    // Only store if a value is actually provided (not undefined)\n    // Null is a valid value to store (e.g., explicitly clearing a field)\n    if (valueToStore !== undefined) {\n         newCustomFieldValues[definition.fieldName] = valueToStore;\n    }\n  }\n  return newCustomFieldValues;\n};\n\n// Helper to process custom fields for update\nconst processCustomFieldsForOrganizationUpdate = async (\n  supabase: SupabaseClient,\n  existingCustomFieldValues: Record<string, any> | undefined | null,\n  inputCustomFields: CustomFieldValueInput[] | undefined | null,\n): Promise<Record<string, any> | undefined> => {\n  if (inputCustomFields === undefined) {\n    return undefined; // No change requested for custom fields\n  }\n  if (inputCustomFields === null || inputCustomFields.length === 0) {\n    return {}; // Request to clear all custom fields or set to empty\n  }\n\n  // If inputCustomFields is provided (and not empty), it implies a full replacement of relevant fields.\n  // We build the new set based on input, similar to create.\n  const definitions = await customFieldDefinitionService.getCustomFieldDefinitions(\n    supabase, \n    CustomFieldEntityType.Organization, \n    false // only active\n  );\n\n  if (!definitions || definitions.length === 0) {\n    console.warn('[processCustomFieldsForOrganizationUpdate] Custom fields provided for update, but no active definitions found for Organization.');\n    return {}; // Effectively clears custom fields if no definitions match input\n  }\n\n  const updatedCustomFieldValues: Record<string, any> = { ...existingCustomFieldValues }; // Start with existing\n  const definitionMap = new Map(definitions.map(def => [def.id, def]));\n\n  // Create a set of fieldNames that are explicitly managed by the inputCustomFields\n  const inputFieldNames = new Set<string>();\n\n  for (const cfInput of inputCustomFields) {\n    const definition = definitionMap.get(cfInput.definitionId);\n    if (!definition) {\n      console.warn(`[processCustomFieldsForOrganizationUpdate] No definition found for ID: ${cfInput.definitionId}. Skipping.`);\n      continue;\n    }\n    if (definition.entityType !== CustomFieldEntityType.Organization || !definition.isActive) {\n      console.warn(`[processCustomFieldsForOrganizationUpdate] Definition ${definition.fieldName} invalid or not for Organization. Skipping.`);\n      continue;\n    }\n\n    inputFieldNames.add(definition.fieldName); // Mark this field as managed by input\n\n    let valueToStore: any = null;\n    // Check which value field is set in the input, similar to Zod refinement\n    const valueFields = [cfInput.stringValue, cfInput.numberValue, cfInput.booleanValue, cfInput.dateValue, cfInput.selectedOptionValues];\n    const providedValueFields = valueFields.filter(v => v !== undefined);\n\n    if (providedValueFields.length > 0) {\n        // If any value is explicitly provided (even if null), use it.\n        switch (definition.fieldType) {\n            case CustomFieldType.Text: valueToStore = cfInput.stringValue; break;\n            case CustomFieldType.Number: valueToStore = cfInput.numberValue; break;\n            case CustomFieldType.Boolean: valueToStore = cfInput.booleanValue; break;\n            case CustomFieldType.Date: valueToStore = cfInput.dateValue; break;\n            case CustomFieldType.Dropdown:\n            case CustomFieldType.MultiSelect:\n                valueToStore = cfInput.selectedOptionValues;\n                break;\n            default:\n                console.warn(`[processCustomFieldsForOrganizationUpdate] Unknown field type ${definition.fieldType} for ${definition.fieldName}`);\n                continue;\n        }\n        updatedCustomFieldValues[definition.fieldName] = valueToStore;\n    } else {\n        // If no value field is provided for this cfInput (e.g. just definitionId), it means we should remove this field if it exists\n        // Or, if cfInput implies setting to null, it might already be null above.\n        // This case handles removing a field if the input for it has no value part.\n        // However, typical GQL input will send null for the value part to clear it.\n        // Let's ensure that if a field was in inputCustomFields but had no value, it gets cleared.\n        delete updatedCustomFieldValues[definition.fieldName];\n    }\n  }\n  \n  // For any fields *not* in inputCustomFields but present in existingCustomFieldValues,\n  // and for which there *is* an active Organization definition, we should retain them.\n  // The current loop already starts with `...existingCustomFieldValues` and only overwrites or deletes fields specified in the input.\n  // However, if a definition was DEACTIVATED, and a value exists, this logic won't remove it unless the client sends an explicit update for it.\n  // This is generally fine; stale data for deactivated fields is a separate cleanup concern.\n\n  return updatedCustomFieldValues;\n};\n\nexport const organizationService = {\n\n  // Get all organizations for the authenticated user (RLS handles filtering)\n  async getOrganizations(userId: string, accessToken: string): Promise<Organization[]> { \n    console.log('[organizationService.getOrganizations] called for user:', userId);\n    const supabase = getAuthenticatedClient(accessToken); \n    const { data, error } = await supabase\n      .from('organizations')\n      .select('*, custom_field_values') // Ensure custom_field_values is selected\n      .order('name', { ascending: true });\n\n    handleSupabaseError(error, 'fetching organizations'); \n    return (data || []) as Organization[]; \n  },\n\n  // Get a single organization by ID (RLS handles filtering)\n  async getOrganizationById(userId: string, id: string, accessToken: string): Promise<Organization | null> { \n    console.log('[organizationService.getOrganizationById] called for user:', userId, 'id:', id);\n    const supabase = getAuthenticatedClient(accessToken); \n    const { data, error } = await supabase\n      .from('organizations')\n      .select('*, custom_field_values') // Ensure custom_field_values is selected\n      .eq('id', id) \n      .single();\n\n    if (error && error.code !== 'PGRST116') {\n      handleSupabaseError(error, 'fetching organization by ID'); \n    }\n    return data; \n  },\n\n  // Create a new organization (RLS requires authenticated client)\n  async createOrganization(userId: string, input: OrganizationInput, accessToken: string): Promise<Organization> { \n    console.log('[organizationService.createOrganization] called for user:', userId, 'input:', input);\n    const supabase = getAuthenticatedClient(accessToken);\n    \n    const customFieldValues = await processCustomFieldsForOrganizationCreate(\n      supabase, \n      input.customFields\n    );\n\n    const orgDataToInsert: any = { \n      name: input.name,\n      address: input.address,\n      notes: input.notes,\n      user_id: userId \n    };\n\n    if (customFieldValues !== undefined) {\n      orgDataToInsert.custom_field_values = customFieldValues;\n    }\n    \n    const { data, error } = await supabase\n      .from('organizations')\n      .insert(orgDataToInsert) \n      .select('*, custom_field_values') // Ensure custom_field_values is selected on return\n      .single();\n\n    handleSupabaseError(error, 'creating organization'); \n    if (!data) {\n      throw new GraphQLError('Failed to create organization, no data returned', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n    }\n    return data as Organization; \n  },\n\n  // Update an existing organization (RLS requires authenticated client)\n  async updateOrganization(userId: string, id: string, input: Partial<OrganizationInput>, accessToken: string): Promise<Organization> { \n    console.log('[organizationService.updateOrganization] called for user:', userId, 'id:', id, 'input:', input);\n    const supabase = getAuthenticatedClient(accessToken); \n\n    // Fetch existing organization to get current custom_field_values if needed\n    const existingOrg = await this.getOrganizationById(userId, id, accessToken);\n    if (!existingOrg) {\n        throw new GraphQLError('Organization not found for update', { extensions: { code: 'NOT_FOUND' } });\n    }\n    \n    const customFieldValues = await processCustomFieldsForOrganizationUpdate(\n      supabase,\n      (existingOrg as any).custom_field_values, // Pass existing values\n      input.customFields // Pass input from mutation\n    );\n\n    const orgDataToUpdate: any = { ...input };\n    delete orgDataToUpdate.customFields; // Remove customFields from top-level update object, it's processed separately\n\n    if (customFieldValues !== undefined) { // only update custom_field_values if processCustomFieldsForOrganizationUpdate didn't return undefined\n        orgDataToUpdate.custom_field_values = customFieldValues;\n    }\n\n    const { data, error } = await supabase\n      .from('organizations')\n      .update(orgDataToUpdate) \n      .eq('id', id) \n      .select('*, custom_field_values') // Ensure custom_field_values is selected on return\n      .single();\n\n    if (error && error.code === 'PGRST116') { \n      throw new GraphQLError('Organization not found', { extensions: { code: 'NOT_FOUND' } });\n    }\n    handleSupabaseError(error, 'updating organization'); \n    if (!data) { \n      throw new GraphQLError('Organization update failed, no data returned', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n    }\n    return data as Organization; \n  },\n\n  // Delete an organization (RLS requires authenticated client)\n  async deleteOrganization(userId: string, id: string, accessToken: string): Promise<boolean> {\n    console.log('[organizationService.deleteOrganization] called for user:', userId, 'id:', id);\n    const supabase = getAuthenticatedClient(accessToken); \n    const { error, count } = await supabase\n      .from('organizations')\n      .delete()\n      .eq('id', id); \n\n    handleSupabaseError(error, 'deleting organization'); \n\n    console.log('[organizationService.deleteOrganization] Deleted count (informational):', count);\n    return !error; \n  },\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/personService.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":53,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":53,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":53,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":53,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPeople on an `error` typed value.","line":53,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":60,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":60,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":61,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":61,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":71,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":71,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPeople on an `error` typed value.","line":71,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":88,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":88,"endColumn":95},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":88,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":88,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPersonById on an `error` typed value.","line":88,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":90,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":90,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":91,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":101,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":101,"endColumn":97},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":101,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":101,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPersonById on an `error` typed value.","line":101,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":108,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":108,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPersonById on an `error` typed value.","line":108,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":125,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":125,"endColumn":102},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":125,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":125,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createPerson on an `error` typed value.","line":125,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":125,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":127,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":127,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":128,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":128,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":138,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":138,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createPerson on an `error` typed value.","line":138,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":150,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":150,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createPerson on an `error` typed value.","line":150,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":150,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":165,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":165,"endColumn":114},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":165,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":165,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updatePerson on an `error` typed value.","line":165,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":165,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":167,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":167,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":168,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":168,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":179,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":179,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updatePerson on an `error` typed value.","line":179,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":179,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":189,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":189,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updatePerson on an `error` typed value.","line":189,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":204,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":204,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":204,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":204,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deletePerson on an `error` typed value.","line":204,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":204,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":207,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":207,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":208,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":208,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":214,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":214,"endColumn":95},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":214,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":214,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deletePerson on an `error` typed value.","line":214,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":214,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":217,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":217,"endColumn":95},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":217,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":217,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deletePerson on an `error` typed value.","line":217,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":217,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":224,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":224,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deletePerson on an `error` typed value.","line":224,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":224,"endColumn":46}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1027,1030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1027,1030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":48,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, MockedFunction } from 'vitest';\nimport { createClient, /* SupabaseClient, */ PostgrestError } from '@supabase/supabase-js'; // Comment out SupabaseClient\nimport { personService } from './personService';\nimport { GraphQLError } from 'graphql';\n\n// --- Mock Setup (Same as dealService.test.ts) ---\nconst mockPostgrestBuilderMethods = {\n    select: vi.fn().mockReturnThis(),\n    insert: vi.fn().mockReturnThis(),\n    update: vi.fn().mockReturnThis(),\n    delete: vi.fn().mockReturnThis(),\n    eq: vi.fn().mockReturnThis(), \n    single: vi.fn(),\n    order: vi.fn().mockReturnThis(),\n};\nvi.mock('@supabase/supabase-js', () => {\n  const mockClient = { from: vi.fn(() => mockPostgrestBuilderMethods), auth: {} };\n  return { createClient: vi.fn(() => mockClient) };\n});\n\n// --- Helper Types --- \ninterface MockUser { id: string; }\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype MockedBuilderMethods = { [K in keyof typeof mockPostgrestBuilderMethods]: MockedFunction<any>; };\n\n// --- Test Suite --- \ndescribe('personService', () => { // Updated describe block\n  let mockedCreateClient: MockedFunction<typeof createClient>;\n  let mockBuilderMethods: MockedBuilderMethods; \n  const mockUser: MockUser = { id: 'user-456' };\n  const mockAccessToken = 'mock-person-access-token';\n\n  beforeEach(async () => {\n    vi.clearAllMocks();\n    const { createClient: actualMockedCreateClient } = await import('@supabase/supabase-js');\n    mockedCreateClient = actualMockedCreateClient as MockedFunction<typeof createClient>;\n    mockBuilderMethods = mockPostgrestBuilderMethods as MockedBuilderMethods;\n    Object.values(mockBuilderMethods).forEach(mockFn => {\n            mockFn.mockClear();\n        if (mockFn !== mockBuilderMethods.single) { mockFn.mockReturnThis(); }\n    });\n  });\n\n  // --- Test Cases --- \n  describe('getPeople', () => { // Updated method name\n    it('should fetch people for a given user', async () => {\n      const mockPeopleData = [\n        { id: 'person-1', first_name: 'John', user_id: mockUser.id },\n        { id: 'person-2', last_name: 'Doe', user_id: mockUser.id },\n      ];\n      mockBuilderMethods.order.mockResolvedValueOnce({ data: mockPeopleData, error: null });\n\n      const people = await personService.getPeople(mockUser.id, mockAccessToken);\n\n      expect(mockedCreateClient).toHaveBeenCalledWith(\n          process.env.SUPABASE_URL, \n          process.env.SUPABASE_ANON_KEY, \n          { global: { headers: { Authorization: `Bearer ${mockAccessToken}` } } }\n      );\n      const clientInstance = mockedCreateClient.mock.results[0]!.value;\n      expect(clientInstance.from).toHaveBeenCalledWith('people'); // Check table name\n      expect(mockBuilderMethods.select).toHaveBeenCalledWith('*');\n      expect(mockBuilderMethods.order).toHaveBeenCalledWith('created_at', { ascending: false });\n      expect(people).toEqual(mockPeopleData);\n    });\n\n    it('should throw GraphQLError if Supabase fails', async () => {\n      const mockDbError: Partial<PostgrestError> = { message: 'Select failed' };\n      mockBuilderMethods.order.mockResolvedValueOnce({ data: null, error: mockDbError as PostgrestError });\n\n      await expect(personService.getPeople(mockUser.id, mockAccessToken))\n        .rejects\n        .toThrow(new GraphQLError('Database error during fetching people. Please try again later.', {\n          extensions: { \n            code: 'INTERNAL_SERVER_ERROR', \n            originalError: { message: mockDbError.message, code: undefined }\n          }\n        }));\n    });\n  });\n\n  describe('getPersonById', () => { // Updated method name\n    const personId = 'person-abc';\n    it('should fetch a single person by ID', async () => {\n      const mockPersonData = { id: personId, first_name: 'Jane', user_id: mockUser.id };\n      mockBuilderMethods.single.mockResolvedValueOnce({ data: mockPersonData, error: null });\n\n      const person = await personService.getPersonById(mockUser.id, personId, mockAccessToken);\n\n        const clientInstance = mockedCreateClient.mock.results[0]!.value;\n      expect(clientInstance.from).toHaveBeenCalledWith('people'); // Check table name\n        expect(mockBuilderMethods.select).toHaveBeenCalledWith('*');\n      expect(mockBuilderMethods.eq).toHaveBeenCalledWith('id', personId);\n        expect(mockBuilderMethods.single).toHaveBeenCalled();\n      expect(person).toEqual(mockPersonData);\n    });\n\n     it('should return null if person not found (PGRST116)', async () => {\n        const notFoundError: Partial<PostgrestError> = { code: 'PGRST116' };\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: notFoundError as PostgrestError });\n        const person = await personService.getPersonById(mockUser.id, personId, mockAccessToken);\n        expect(person).toBeNull();\n    });\n\n    it('should throw GraphQLError for other errors', async () => {\n        const dbError: Partial<PostgrestError> = { message: 'DB error' };\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: dbError as PostgrestError });\n        await expect(personService.getPersonById(mockUser.id, personId, mockAccessToken))\n            .rejects\n            .toThrow(new GraphQLError('Database error during fetching person by ID. Please try again later.', {\n                extensions: { \n                  code: 'INTERNAL_SERVER_ERROR', \n                  originalError: { message: dbError.message, code: undefined }\n                }\n            }));\n    });\n  });\n\n  describe('createPerson', () => { // Updated method name\n    const personInput = { first_name: 'New', last_name: 'Person', email: 'new@test.com', organization_id: 'org-123' }; // Added org id\n    const expectedRecord = { ...personInput, id: 'new-person-xyz', user_id: mockUser.id }; \n\n    it('should create a person and return the record', async () => {\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: expectedRecord, error: null });\n        const newPerson = await personService.createPerson(mockUser.id, personInput, mockAccessToken);\n\n        const clientInstance = mockedCreateClient.mock.results[0]!.value;\n        expect(clientInstance.from).toHaveBeenCalledWith('people'); // Check table name\n        expect(mockBuilderMethods.insert).toHaveBeenCalledWith({ ...personInput, user_id: mockUser.id });\n        expect(mockBuilderMethods.select).toHaveBeenCalled();\n        expect(mockBuilderMethods.single).toHaveBeenCalled();\n        expect(newPerson).toEqual(expectedRecord);\n    });\n\n    it('should throw GraphQLError if insert fails', async () => {\n        const dbError: Partial<PostgrestError> = { message: 'Insert failed' };\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: dbError as PostgrestError });\n        await expect(personService.createPerson(mockUser.id, personInput, mockAccessToken))\n            .rejects\n            .toThrow(new GraphQLError('Database error during creating person. Please try again later.', {\n                 extensions: { \n                   code: 'INTERNAL_SERVER_ERROR', \n                   originalError: { message: dbError.message, code: undefined }\n                 }\n            }));\n    });\n\n    it('should throw GraphQLError if insert returns no data', async () => {\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: null });\n        await expect(personService.createPerson(mockUser.id, personInput, mockAccessToken))\n            .rejects\n            .toThrow(new GraphQLError('Failed to create person, no data returned', {\n                 extensions: { code: 'INTERNAL_SERVER_ERROR' }\n            }));\n    });\n  });\n\n  describe('updatePerson', () => { // Updated method name\n    const personId = 'person-to-update';\n    const updateInput = { last_name: 'UpdatedName', organization_id: 'org-456' }; // Added org id\n    const expectedRecord = { id: personId, user_id: mockUser.id, ...updateInput };\n\n    it('should update a person and return the record', async () => {\n      mockBuilderMethods.single.mockResolvedValueOnce({ data: expectedRecord, error: null });\n      const updatedPerson = await personService.updatePerson(mockUser.id, personId, updateInput, mockAccessToken);\n\n        const clientInstance = mockedCreateClient.mock.results[0]!.value;\n      expect(clientInstance.from).toHaveBeenCalledWith('people'); // Check table name\n        expect(mockBuilderMethods.update).toHaveBeenCalledWith(updateInput);\n      expect(mockBuilderMethods.eq).toHaveBeenCalledWith('id', personId);\n        expect(mockBuilderMethods.select).toHaveBeenCalled();\n        expect(mockBuilderMethods.single).toHaveBeenCalled();\n      expect(updatedPerson).toEqual(expectedRecord);\n    });\n\n    it('should throw GraphQLError if person not found (PGRST116)', async () => {\n        const notFoundError: Partial<PostgrestError> = { code: 'PGRST116' };\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: notFoundError as PostgrestError });\n        await expect(personService.updatePerson(mockUser.id, personId, updateInput, mockAccessToken))\n            .rejects\n            .toThrow(new GraphQLError('Person not found', {\n                 extensions: { code: 'NOT_FOUND' }\n            }));\n    });\n\n     it('should throw GraphQLError for other errors', async () => {\n        const dbError: Partial<PostgrestError> = { message: 'Update failed' };\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: dbError as PostgrestError });\n        await expect(personService.updatePerson(mockUser.id, personId, updateInput, mockAccessToken))\n            .rejects\n            .toThrow(new GraphQLError('Database error during updating person. Please try again later.', {\n                 extensions: { \n                   code: 'INTERNAL_SERVER_ERROR', \n                   originalError: { message: dbError.message, code: undefined }\n                 }\n            }));\n    });\n  });\n\n  describe('deletePerson', () => { // Updated method name\n    const personId = 'person-to-delete';\n    it('should return true on successful deletion', async () => {\n        mockBuilderMethods.eq.mockResolvedValueOnce({ error: null, count: 1 });\n      const result = await personService.deletePerson(mockUser.id, personId, mockAccessToken);\n\n        expect(result).toBe(true);\n        const clientInstance = mockedCreateClient.mock.results[0]!.value;\n      expect(clientInstance.from).toHaveBeenCalledWith('people'); // Check table name\n      expect(mockBuilderMethods.eq).toHaveBeenCalledWith('id', personId);\n    });\n\n     it('should return true even if count is 0 or null', async () => {\n        mockBuilderMethods.eq.mockResolvedValueOnce({ error: null, count: 0 });\n      const result1 = await personService.deletePerson(mockUser.id, personId, mockAccessToken);\n      expect(result1).toBe(true);\n        mockBuilderMethods.eq.mockResolvedValueOnce({ error: null, count: null });\n      const result2 = await personService.deletePerson(mockUser.id, personId, mockAccessToken);\n       expect(result2).toBe(true);\n    });\n\n    it('should throw GraphQLError if delete fails', async () => {\n      const dbError: Partial<PostgrestError> = { message: 'Delete failed' };\n        mockBuilderMethods.eq.mockResolvedValueOnce({ error: dbError as PostgrestError, count: null });\n      await expect(personService.deletePerson(mockUser.id, personId, mockAccessToken))\n        .rejects\n        .toThrow(new GraphQLError('Database error during deleting person. Please try again later.', {\n            extensions: { \n              code: 'INTERNAL_SERVER_ERROR', \n              originalError: { message: dbError.message, code: undefined }\n            }\n        }));\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/personService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[977,980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[977,980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1120,1123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1120,1123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":25,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":25,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":25,"column":32,"nodeType":"Identifier","messageId":"unsafeCall","endLine":25,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":25,"column":85,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":25,"endColumn":97},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .entityType on an `error` typed value.","line":26,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isActive on an `error` typed value.","line":26,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":27,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":27,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldName on an `error` typed value.","line":27,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1476,1479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1476,1479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":30,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":30,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":30,"column":80,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":30,"endColumn":114},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":30,"column":103,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":114},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":31,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":31,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":31,"column":85,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":31,"endColumn":119},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":31,"column":108,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":119},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":32,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":32,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":32,"column":87,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":32,"endColumn":122},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":32,"column":110,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":122},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":33,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":33,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":33,"column":81,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":33,"endColumn":113},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":33,"column":104,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":113},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":34,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":34,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":92},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":34,"column":103,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":34,"endColumn":146},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":34,"column":126,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":146},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":37,"column":14,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":37,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [fieldName] resolves to an `error` typed value.","line":37,"column":34,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":37,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .entityType on an `error` typed value.","line":39,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isActive on an `error` typed value.","line":39,"column":83,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":91},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":40,"column":108,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":120},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldName on an `error` typed value.","line":40,"column":136,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":145},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":43,"column":108,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":120},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2720,2723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2720,2723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":46,"column":122,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":134},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":46,"column":148,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":155},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3122,3125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3122,3125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3285,3288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3285,3288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3347,3350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3347,3350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3574,3577],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3574,3577],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":68,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":68,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":68,"column":32,"nodeType":"Identifier","messageId":"unsafeCall","endLine":68,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":68,"column":85,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":97},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .entityType on an `error` typed value.","line":69,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":69,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isActive on an `error` typed value.","line":69,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":69,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":70,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":70,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldName on an `error` typed value.","line":70,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3931,3934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3931,3934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":73,"column":39,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":73,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":73,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":73,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":74,"column":44,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":74,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":74,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":75,"column":45,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":75,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":75,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":76,"column":42,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":76,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":76,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":77,"column":53,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":77,"endColumn":96},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":77,"column":76,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":96},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":79,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":79,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [fieldName] resolves to an `error` typed value.","line":79,"column":30,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":79,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .entityType on an `error` typed value.","line":80,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isActive on an `error` typed value.","line":80,"column":83,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":91},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":81,"column":108,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":120},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldName on an `error` typed value.","line":81,"column":136,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":145},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":84,"column":108,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":120},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4946,4949],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4946,4949],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definitionId on an `error` typed value.","line":87,"column":122,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":134},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":87,"column":148,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":155},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":102,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":102,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":102,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":102,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":103,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":106,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":103,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":106,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":103,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":105,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":103,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":104,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":104,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":105,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .order on an `error` typed value.","line":106,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":108,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":108,"endColumn":24},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'Person' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":113,"column":81,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":113,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":115,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":115,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":115,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":115,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":116,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":120,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":116,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":120,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":116,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":119,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":116,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":118,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":116,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":117,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":117,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":117,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":118,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":118,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":119,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .single on an `error` typed value.","line":120,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":120,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .code on an `error` typed value.","line":122,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":122,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":123,"column":8,"nodeType":"Identifier","messageId":"unsafeCall","endLine":123,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":131,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":131,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":131,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":131,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":133,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":133,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `CustomFieldValueInput[] | null | undefined`.","line":134,"column":81,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":134,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `SupabaseClient<any, \"public\", any>`.","line":134,"column":95,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":134,"endColumn":103},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":136,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":139,"endColumn":6},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7165,7168],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7165,7168],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":142,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":142,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":145,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":149,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":145,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":149,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":145,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":148,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":145,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":147,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":145,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":146,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":146,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .insert on an `error` typed value.","line":147,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":148,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .single on an `error` typed value.","line":149,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":149,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":151,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":151,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":161,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":161,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":161,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":161,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":164,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":164,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":168,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":168,"endColumn":92},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8566,8569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8566,8569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":168,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":168,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":170,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":170,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Record<string, any> | null`.","line":173,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":173,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `CustomFieldValueInput[] | null | undefined`.","line":174,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":174,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `SupabaseClient<any, \"public\", any>`.","line":175,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":175,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":178,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":178,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":178,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8853,8856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8853,8856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":180,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":180,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":183,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":183,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":186,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":191,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":186,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":191,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":186,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":190,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":186,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":189,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":186,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":188,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":186,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":187,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":187,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":187,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .update on an `error` typed value.","line":188,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":188,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":189,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":190,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .single on an `error` typed value.","line":191,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .code on an `error` typed value.","line":193,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":193,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":196,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":196,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":206,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":206,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":206,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":206,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":207,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":210,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":207,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":210,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":207,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":209,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":207,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":208,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":208,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":208,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .delete on an `error` typed value.","line":209,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":209,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":210,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":210,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":212,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":212,"endColumn":24}],"suppressedMessages":[],"errorCount":151,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { /* createClient, SupabaseClient, */ } from '@supabase/supabase-js'; // Keep PostgrestError if used directly, remove others\n// import { supabase } from './supabaseClient'; // Removed unused import\n// import type { User } from '@supabase/supabase-js';\nimport { GraphQLError } from 'graphql';\nimport { getAuthenticatedClient, handleSupabaseError } from './serviceUtils'; // Import shared helpers\nimport type { Person, PersonInput } from './generated/graphql'; // ADDED: Import generated types\n// Import CustomFieldValueInput for processing\nimport type { CustomFieldValueInput } from './generated/graphql';\nimport { getCustomFieldDefinitionById } from './customFieldDefinitionService';\nimport type { SupabaseClient } from '@supabase/supabase-js';\n\n\n// Helper to process custom fields for creation\nasync function processCustomFieldsForPersonCreate(\n  customFieldsInput: CustomFieldValueInput[] | undefined | null,\n  supabaseClient: SupabaseClient\n): Promise<Record<string, any> | null> {\n  if (!customFieldsInput || customFieldsInput.length === 0) {\n    return null;\n  }\n\n  const dbCustomFieldValues: Record<string, any> = {};\n  for (const cfInput of customFieldsInput) {\n    try {\n      const definition = await getCustomFieldDefinitionById(supabaseClient, cfInput.definitionId);\n      if (definition && definition.entityType === 'PERSON' && definition.isActive) { // Ensure for Person and active\n        const fieldName = definition.fieldName;\n        let valueToStore: any = undefined;\n\n        if (cfInput.stringValue !== undefined && cfInput.stringValue !== null) valueToStore = cfInput.stringValue;\n        else if (cfInput.numberValue !== undefined && cfInput.numberValue !== null) valueToStore = cfInput.numberValue;\n        else if (cfInput.booleanValue !== undefined && cfInput.booleanValue !== null) valueToStore = cfInput.booleanValue;\n        else if (cfInput.dateValue !== undefined && cfInput.dateValue !== null) valueToStore = cfInput.dateValue;\n        else if (cfInput.selectedOptionValues !== undefined && cfInput.selectedOptionValues !== null) valueToStore = cfInput.selectedOptionValues;\n        \n        if (valueToStore !== undefined) {\n             dbCustomFieldValues[fieldName] = valueToStore;\n        }\n      } else if (definition && (definition.entityType !== 'PERSON' || !definition.isActive)) {\n        console.warn(`[personService.processCustomFieldsForPersonCreate] Custom field definition ${cfInput.definitionId} (${definition.fieldName}) is not for PERSON or not active. Skipping.`);\n      }\n       else {\n        console.warn(`[personService.processCustomFieldsForPersonCreate] Custom field definition ${cfInput.definitionId} not found. Skipping.`);\n      }\n    } catch (defError: any) {\n        console.error(`[personService.processCustomFieldsForPersonCreate] Error fetching/processing definition ${cfInput.definitionId}:`, defError.message);\n    }\n  }\n  return Object.keys(dbCustomFieldValues).length > 0 ? dbCustomFieldValues : null;\n}\n\n// Helper to process custom fields for update\nasync function processCustomFieldsForPersonUpdate(\n  currentDbCustomFieldValues: Record<string, any> | null,\n  customFieldsInput: CustomFieldValueInput[] | undefined | null,\n  supabaseClient: SupabaseClient\n): Promise<{ finalCustomFieldValues: Record<string, any> | null }> {\n  let finalCustomFieldValues: Record<string, any> | null = currentDbCustomFieldValues || {};\n\n  if (!customFieldsInput || customFieldsInput.length === 0) {\n    return { finalCustomFieldValues: finalCustomFieldValues }; \n  }\n  \n  const customFieldsToUpdate: Record<string, any> = {};\n\n  for (const cfInput of customFieldsInput) {\n    try {\n      const definition = await getCustomFieldDefinitionById(supabaseClient, cfInput.definitionId);\n      if (definition && definition.entityType === 'PERSON' && definition.isActive) { // Ensure for Person and active\n        const fieldName = definition.fieldName;\n        let valueToStore: any = null; \n\n        if ('stringValue' in cfInput) valueToStore = cfInput.stringValue;\n        else if ('numberValue' in cfInput) valueToStore = cfInput.numberValue;\n        else if ('booleanValue' in cfInput) valueToStore = cfInput.booleanValue;\n        else if ('dateValue' in cfInput) valueToStore = cfInput.dateValue;\n        else if ('selectedOptionValues' in cfInput) valueToStore = cfInput.selectedOptionValues;\n        \n        customFieldsToUpdate[fieldName] = valueToStore;\n      } else if (definition && (definition.entityType !== 'PERSON' || !definition.isActive)) {\n        console.warn(`[personService.processCustomFieldsForPersonUpdate] Custom field definition ${cfInput.definitionId} (${definition.fieldName}) is not for PERSON or not active. Skipping update for this field.`);\n      }\n       else {\n        console.warn(`[personService.processCustomFieldsForPersonUpdate] Custom field definition ${cfInput.definitionId} not found. Skipping update for this field.`);\n      }\n    } catch (defError: any) {\n        console.error(`[personService.processCustomFieldsForPersonUpdate] Error fetching/processing definition ${cfInput.definitionId}:`, defError.message);\n    }\n  }\n  \n  finalCustomFieldValues = { ...(currentDbCustomFieldValues || {}), ...customFieldsToUpdate };\n  \n  return { finalCustomFieldValues };\n}\n\n\n// --- Person Service --- \nexport const personService = {\n  // Get all people - Uses authenticated client as RLS SELECT policy uses auth.uid()\n  async getPeople(userId: string, accessToken: string): Promise<Person[]> { // CHANGED: Return type to Person[]\n    console.log('[personService.getPeople] called for user:', userId);\n    const supabase = getAuthenticatedClient(accessToken); \n    const { data, error } = await supabase\n      .from('people') \n      .select('*') \n      .order('created_at', { ascending: false }); \n\n    handleSupabaseError(error, 'fetching people'); \n    return (data || []) as Person[]; // CHANGED: Cast to Person[]\n  },\n\n  // Get a single person by ID - Uses authenticated client\n  async getPersonById(userId: string, id: string, accessToken: string): Promise<Person | null> { // CHANGED: Return type to Person | null\n    console.log('[personService.getPersonById] called for user:', userId, 'id:', id);\n    const supabase = getAuthenticatedClient(accessToken); \n    const { data, error } = await supabase\n      .from('people') \n      .select('*') // Ensure custom_field_values is selected if present\n      .eq('id', id) \n      .single(); \n\n    if (error && error.code !== 'PGRST116') { \n       handleSupabaseError(error, 'fetching person by ID'); \n    }\n    return data; // CHANGED: Cast to Person | null\n  },\n\n  // Create a new person - Needs authenticated client for INSERT RLS policy\n  async createPerson(userId: string, input: PersonInput, accessToken: string): Promise<Person> { // CHANGED: input type to PersonInput, return type to Person\n    console.log('[personService.createPerson] called for user:', userId, 'input:', input);\n    const supabase = getAuthenticatedClient(accessToken); \n    \n    const { customFields, ...personData } = input;\n    const processedCustomFieldValues = await processCustomFieldsForPersonCreate(customFields, supabase);\n\n    const dbInput: any = { \n      ...personData, \n      user_id: userId \n    };\n\n    if (processedCustomFieldValues) {\n      dbInput.custom_field_values = processedCustomFieldValues;\n    }\n    \n    const { data, error } = await supabase\n      .from('people') \n      .insert(dbInput) \n      .select('*') // Select all fields including custom_field_values\n      .single(); \n\n    handleSupabaseError(error, 'creating person'); \n    if (!data) {\n        throw new GraphQLError('Failed to create person, no data returned', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n    }\n    return data as Person; // CHANGED: Cast to Person\n  },\n\n  // Update an existing person - Needs authenticated client for UPDATE RLS policy\n  async updatePerson(userId: string, id: string, input: Partial<PersonInput>, accessToken: string): Promise<Person> { // CHANGED: input type to Partial<PersonInput>, return type to Person\n    console.log('[personService.updatePerson] called for user:', userId, 'id:', id, 'input:', input);\n    const supabase = getAuthenticatedClient(accessToken); \n\n    // 1. Fetch current person data to get existing custom_field_values\n    const currentPersonData = await this.getPersonById(userId, id, accessToken);\n    if (!currentPersonData) {\n        throw new GraphQLError('Person not found for update', { extensions: { code: 'NOT_FOUND' } });\n    }\n    const currentDbCustomFieldValues = (currentPersonData as any).custom_field_values || {};\n    \n    const { customFields, ...personDataToUpdate } = input;\n    \n    const { finalCustomFieldValues } = await processCustomFieldsForPersonUpdate(\n      currentDbCustomFieldValues,\n      customFields, \n      supabase\n    );\n\n    const dbUpdatePayload: any = { ...personDataToUpdate };\n    if (finalCustomFieldValues !== null) { // Ensure we only set it if it's not null (could be {} )\n        dbUpdatePayload.custom_field_values = finalCustomFieldValues;\n    } else {\n        // If finalCustomFieldValues is null (e.g. all fields cleared and none existed before), set to empty object\n        dbUpdatePayload.custom_field_values = {}; \n    }\n    \n    const { data, error } = await supabase\n      .from('people') \n      .update(dbUpdatePayload) \n      .eq('id', id) \n      .select('*') // Select all fields including custom_field_values\n      .single(); \n\n    if (error && error.code === 'PGRST116') { \n        throw new GraphQLError('Person not found', { extensions: { code: 'NOT_FOUND' } });\n    }\n    handleSupabaseError(error, 'updating person'); \n     if (!data) { \n        throw new GraphQLError('Person update failed, no data returned', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n    }\n    return data as Person; // CHANGED: Cast to Person\n  },\n\n  // Delete a person - Needs authenticated client for DELETE RLS policy\n  async deletePerson(userId: string, id: string, accessToken: string): Promise<boolean> {\n    console.log('[personService.deletePerson] called for user:', userId, 'id:', id);\n    const supabase = getAuthenticatedClient(accessToken); \n    const { error, count } = await supabase\n      .from('people') \n      .delete()\n      .eq('id', id); \n\n    handleSupabaseError(error, 'deleting person'); \n    console.log('[personService.deletePerson] Deleted count (informational):', count);\n    return !error; \n  },\n  \n  // Consider re-adding getPersonListForUser later if needed for dropdowns\n  // It would need to fetch from 'people' table and construct names similarly.\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/pipelineService.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":86,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":86,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":86,"column":31,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":86,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPipelines on an `error` typed value.","line":86,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":89,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":89,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":90,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":98,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":98,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPipelines on an `error` typed value.","line":98,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":98,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":109,"column":62,"nodeType":"Property","messageId":"anyAssignment","endLine":109,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":111,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":111,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":111,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPipelineById on an `error` typed value.","line":111,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":111,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":113,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":113,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":114,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":123,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":123,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":123,"column":32,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":123,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPipelineById on an `error` typed value.","line":123,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":123,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":130,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":130,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPipelineById on an `error` typed value.","line":130,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":130,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":139,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":139,"endColumn":136},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":143,"column":59,"nodeType":"Property","messageId":"anyAssignment","endLine":143,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":145,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":145,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":145,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":145,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createPipeline on an `error` typed value.","line":145,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":145,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":147,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":147,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `any` value.","line":148,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":149,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":149,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":158,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":158,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createPipeline on an `error` typed value.","line":158,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":158,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":166,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":166,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createPipeline on an `error` typed value.","line":166,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":166,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":175,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":175,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createPipeline on an `error` typed value.","line":175,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":175,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":186,"column":57,"nodeType":"Property","messageId":"anyAssignment","endLine":186,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":187,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":187,"endColumn":101},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":187,"column":37,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":187,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updatePipeline on an `error` typed value.","line":187,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":187,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":189,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":189,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":190,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":200,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":200,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updatePipeline on an `error` typed value.","line":200,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":200,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":207,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":207,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updatePipeline on an `error` typed value.","line":207,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":207,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":218,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":218,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":218,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":218,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deletePipeline on an `error` typed value.","line":218,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":221,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":221,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":222,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":222,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":229,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":229,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":229,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":229,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deletePipeline on an `error` typed value.","line":229,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":229,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":232,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":232,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":232,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":232,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deletePipeline on an `error` typed value.","line":232,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":232,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":239,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":239,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deletePipeline on an `error` typed value.","line":239,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":239,"endColumn":42}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1343,1346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1343,1346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":55,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, MockedFunction } from 'vitest';\nimport { createClient, PostgrestError } from '@supabase/supabase-js';\nimport * as pipelineService from './pipelineService'; // Import the service functions\nimport { GraphQLError } from 'graphql';\n// Explicitly ensure ONLY these types are imported from generated/graphql for Pipeline related tests\nimport type { Pipeline, PipelineInput } from './generated/graphql';\n\n// --- Mock Setup ---\n\n// Define mocks globally\nconst mockGetUser = vi.fn();\nconst mockPostgrestBuilderMethods = {\n    select: vi.fn().mockReturnThis(),\n    insert: vi.fn().mockReturnThis(),\n    update: vi.fn().mockReturnThis(),\n    delete: vi.fn().mockReturnThis(),\n    eq: vi.fn().mockReturnThis(),\n    maybeSingle: vi.fn(),\n    single: vi.fn(),\n    order: vi.fn().mockReturnThis(),\n};\n\n// Use vi.doMock which is NOT hoisted\nvi.doMock('@supabase/supabase-js', () => {\n  const mockClient = {\n    from: vi.fn(() => mockPostgrestBuilderMethods),\n    auth: { getUser: mockGetUser },\n  };\n  return { \n      createClient: vi.fn(() => mockClient)\n  };\n});\n\nvi.mock('./supabaseClient');\n\n// --- Helper Types ---\ninterface MockUser { id: string; }\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype MockedBuilderMethods = { [K in keyof typeof mockPostgrestBuilderMethods]: MockedFunction<any>; };\n\n// --- Test Suite ---\ndescribe('pipelineService', () => {\n  let mockedCreateClient: MockedFunction<typeof createClient>;\n  let mockBuilderMethods: MockedBuilderMethods;\n  let mockGetUserRef: MockedFunction<typeof mockGetUser>;\n  let service: typeof pipelineService; // To hold the dynamically imported service\n  const mockUser: MockUser = { id: 'user-pipe-123' };\n  const mockAccessToken = 'mock-pipe-access-token';\n\n  beforeEach(async () => {\n    vi.clearAllMocks(); // Clear previous mocks if any\n    vi.resetModules(); // IMPORTANT: Reset modules to ensure fresh import after mocking\n    \n    // Dynamically import the service *after* mocks are set up\n    service = await import('./pipelineService.js'); \n    \n    // Import the mocked supabase client *after* resetting modules\n    const { createClient: actualMockedCreateClient } = await import('@supabase/supabase-js');\n    mockedCreateClient = actualMockedCreateClient as MockedFunction<typeof createClient>;\n    \n    // Assign references to the top-level mocks\n    mockBuilderMethods = mockPostgrestBuilderMethods as MockedBuilderMethods;\n    mockGetUserRef = mockGetUser; \n    \n    // Clear individual mocks (redundant with clearAllMocks but safe)\n    mockGetUserRef.mockClear();\n    Object.values(mockBuilderMethods).forEach(mockFn => {\n        mockFn.mockClear();\n        if (mockFn !== mockBuilderMethods.single && mockFn !== mockBuilderMethods.maybeSingle) {\n             mockFn.mockReturnThis(); \n        }\n    });\n  });\n\n  // --- Test Cases ---\n  // Use `service.` prefix when calling pipelineService functions\n  \n  describe('getPipelines', () => {\n    it('should fetch pipelines for the user', async () => {\n      const mockPipelinesData: Pipeline[] = [\n        { id: 'pipe-1', name: 'Pipeline Alpha', user_id: mockUser.id, created_at: 'ts', updated_at: 'ts' },\n        { id: 'pipe-2', name: 'Pipeline Beta', user_id: mockUser.id, created_at: 'ts', updated_at: 'ts' },\n      ];\n      mockBuilderMethods.select.mockResolvedValueOnce({ data: mockPipelinesData, error: null }); \n\n      const pipelines = await service.getPipelines(mockAccessToken);\n\n      expect(mockedCreateClient).toHaveBeenCalledWith(expect.any(String), expect.any(String), expect.any(Object));\n      const clientInstance = mockedCreateClient.mock.results[0]!.value;\n      expect(clientInstance.from).toHaveBeenCalledWith('pipelines');\n      expect(mockBuilderMethods.select).toHaveBeenCalledWith('*');\n      expect(pipelines).toEqual(mockPipelinesData);\n    });\n\n    it('should throw GraphQLError if Supabase fails', async () => {\n      const mockDbError: Partial<PostgrestError> = { message: 'DB Select failed' };\n      mockBuilderMethods.select.mockResolvedValueOnce({ data: null, error: mockDbError as PostgrestError });\n      await expect(service.getPipelines(mockAccessToken))\n        .rejects.toThrow(new GraphQLError('Database error during fetching pipelines. Please try again later.', {\n            extensions: { code: 'INTERNAL_SERVER_ERROR', originalError: { message: mockDbError.message, code: undefined } }\n        }));\n    });\n  });\n\n  describe('getPipelineById', () => {\n    const pipelineId = 'pipe-abc';\n    it('should fetch a single pipeline by ID', async () => {\n      const mockPipelineData: Pipeline = { id: pipelineId, name: 'Specific Pipe', user_id: mockUser.id, created_at: 'ts', updated_at: 'ts' };\n      mockBuilderMethods.maybeSingle.mockResolvedValueOnce({ data: mockPipelineData, error: null });\n\n      const pipeline = await service.getPipelineById(mockAccessToken, pipelineId);\n\n      const clientInstance = mockedCreateClient.mock.results[0]!.value;\n      expect(clientInstance.from).toHaveBeenCalledWith('pipelines');\n      expect(mockBuilderMethods.select).toHaveBeenCalledWith('*');\n      expect(mockBuilderMethods.eq).toHaveBeenCalledWith('id', pipelineId);\n      expect(mockBuilderMethods.maybeSingle).toHaveBeenCalled();\n      expect(pipeline).toEqual(mockPipelineData);\n    });\n\n     it('should return null if pipeline not found', async () => {\n        mockBuilderMethods.maybeSingle.mockResolvedValueOnce({ data: null, error: null });\n        const pipeline = await service.getPipelineById(mockAccessToken, pipelineId);\n        expect(pipeline).toBeNull();\n    });\n\n    it('should throw GraphQLError for database errors', async () => {\n        const dbError: Partial<PostgrestError> = { message: 'DB error on maybeSingle' };\n        mockBuilderMethods.maybeSingle.mockResolvedValueOnce({ data: null, error: dbError as PostgrestError });\n        await expect(service.getPipelineById(mockAccessToken, pipelineId))\n            .rejects.toThrow(new GraphQLError(`Database error during fetching pipeline with id ${pipelineId}. Please try again later.`, {\n                extensions: { code: 'INTERNAL_SERVER_ERROR', originalError: { message: dbError.message, code: undefined } }\n            }));\n    });\n  });\n\n  describe('createPipeline', () => {\n    const pipelineInput: PipelineInput = { name: 'New Pipeline' };\n    const expectedRecord: Pipeline = { ...pipelineInput, id: 'new-pipe-xyz', user_id: mockUser.id, created_at: 'ts', updated_at: 'ts' };\n\n    it('should create a pipeline and return the record', async () => {\n        mockGetUserRef.mockResolvedValueOnce({ data: { user: mockUser }, error: null });\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: expectedRecord, error: null });\n        \n        const newPipeline = await service.createPipeline(mockAccessToken, pipelineInput);\n\n        const clientInstance = mockedCreateClient.mock.results[0]!.value;\n        expect(clientInstance.auth.getUser).toHaveBeenCalled();\n        expect(clientInstance.from).toHaveBeenCalledWith('pipelines');\n        expect(mockBuilderMethods.insert).toHaveBeenCalledWith([{ ...pipelineInput, user_id: mockUser.id }]);\n        expect(mockBuilderMethods.select).toHaveBeenCalled();\n        expect(mockBuilderMethods.single).toHaveBeenCalled();\n        expect(newPipeline).toEqual(expectedRecord);\n    });\n\n    it('should throw error if getUser fails', async () => {\n        mockGetUserRef.mockResolvedValueOnce({ data: { user: null }, error: { message: 'Auth error'} });\n         await expect(service.createPipeline(mockAccessToken, pipelineInput))\n            .rejects.toThrow(\"Could not get authenticated user to create pipeline.\");\n    });\n\n    it('should throw GraphQLError if insert fails', async () => {\n        mockGetUserRef.mockResolvedValueOnce({ data: { user: mockUser }, error: null });\n        const dbError: Partial<PostgrestError> = { message: 'Insert failed' };\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: dbError as PostgrestError });\n        await expect(service.createPipeline(mockAccessToken, pipelineInput))\n            .rejects.toThrow(new GraphQLError('Database error during creating pipeline. Please try again later.', {\n                 extensions: { code: 'INTERNAL_SERVER_ERROR', originalError: { message: dbError.message, code: undefined } }\n            }));\n    });\n\n    it('should throw Error if insert returns no data', async () => {\n        mockGetUserRef.mockResolvedValueOnce({ data: { user: mockUser }, error: null });\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: null });\n        await expect(service.createPipeline(mockAccessToken, pipelineInput))\n            .rejects.toThrow(\"Failed to create pipeline, no data returned.\");\n    });\n  });\n\n  describe('updatePipeline', () => {\n    const pipelineId = 'pipe-to-update';\n    const updateInput: PipelineInput = { name: 'Updated Pipe Name' };\n    const expectedRecord: Pipeline = { id: pipelineId, name: 'Updated Pipe Name', user_id: mockUser.id, created_at: 'ts', updated_at: 'ts' };\n\n    it('should update a pipeline and return the record', async () => {\n      mockBuilderMethods.single.mockResolvedValueOnce({ data: expectedRecord, error: null });\n      const updatedPipeline = await service.updatePipeline(mockAccessToken, pipelineId, updateInput);\n\n      const clientInstance = mockedCreateClient.mock.results[0]!.value;\n      expect(clientInstance.from).toHaveBeenCalledWith('pipelines');\n      expect(mockBuilderMethods.update).toHaveBeenCalledWith(updateInput);\n      expect(mockBuilderMethods.eq).toHaveBeenCalledWith('id', pipelineId);\n      expect(mockBuilderMethods.select).toHaveBeenCalled();\n      expect(mockBuilderMethods.single).toHaveBeenCalled();\n      expect(updatedPipeline).toEqual(expectedRecord);\n    });\n\n    it('should throw Error if pipeline not found or update fails (no data returned)', async () => {\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: null });\n        await expect(service.updatePipeline(mockAccessToken, pipelineId, updateInput))\n            .rejects.toThrow(`Pipeline with id ${pipelineId} not found or update failed.`);\n    });\n\n    it('should throw GraphQLError for database errors', async () => {\n        const dbError: Partial<PostgrestError> = { message: 'Update DB error' };\n        mockBuilderMethods.single.mockResolvedValueOnce({ data: null, error: dbError as PostgrestError });\n        await expect(service.updatePipeline(mockAccessToken, pipelineId, updateInput))\n            .rejects.toThrow(new GraphQLError(`Database error during updating pipeline with id ${pipelineId}. Please try again later.`, {\n                extensions: { code: 'INTERNAL_SERVER_ERROR', originalError: { message: dbError.message, code: undefined } }\n            }));\n    });\n  });\n\n  describe('deletePipeline', () => {\n    const pipelineId = 'pipe-to-delete';\n    it('should return true on successful deletion', async () => {\n      mockBuilderMethods.eq.mockResolvedValueOnce({ error: null, count: 1 }); \n      const result = await service.deletePipeline(mockAccessToken, pipelineId);\n\n      expect(result).toBe(true);\n      const clientInstance = mockedCreateClient.mock.results[0]!.value;\n      expect(clientInstance.from).toHaveBeenCalledWith('pipelines');\n      expect(mockBuilderMethods.delete).toHaveBeenCalledWith({ count: 'exact' });\n      expect(mockBuilderMethods.eq).toHaveBeenCalledWith('id', pipelineId);\n    });\n\n    it('should return true even if count is 0 or null (already deleted)', async () => {\n      mockBuilderMethods.eq.mockResolvedValueOnce({ error: null, count: 0 });\n      const result1 = await service.deletePipeline(mockAccessToken, pipelineId);\n      expect(result1).toBe(true);\n      mockBuilderMethods.eq.mockResolvedValueOnce({ error: null, count: null });\n      const result2 = await service.deletePipeline(mockAccessToken, pipelineId);\n       expect(result2).toBe(true);\n    });\n\n    it('should throw GraphQLError if delete fails', async () => {\n      const dbError: Partial<PostgrestError> = { message: 'Delete failed' };\n      mockBuilderMethods.eq.mockResolvedValueOnce({ error: dbError as PostgrestError, count: null });\n      await expect(service.deletePipeline(mockAccessToken, pipelineId))\n        .rejects.toThrow(new GraphQLError(`Database error during deleting pipeline with id ${pipelineId}. Please try again later.`, {\n            extensions: { code: 'INTERNAL_SERVER_ERROR', originalError: { message: dbError.message, code: undefined } }\n        }));\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/pipelineService.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":15,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":15,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":15,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":15,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":16,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":18,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":16,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":18,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":16,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":17,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":17,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":17,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":18,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":18,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":20,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":20,"endColumn":24},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'Pipeline' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":31,"column":81,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":31,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":35,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":35,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":35,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":35,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":36,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":40,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":36,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":40,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":36,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":39,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":36,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":38,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":36,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":37,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":37,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":38,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":39,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .maybeSingle on an `error` typed value.","line":40,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":42,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":42,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":55,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":59,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":59,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":59,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":59,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":61,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":61,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":61,"column":56,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":61,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `error` typed value.","line":61,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":61,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":68,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":68,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":68,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":70,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":79,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":70,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":79,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":70,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":78,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":70,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":72,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":70,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":71,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":71,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .insert on an `error` typed value.","line":72,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":74,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":74,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":74,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":75,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":75,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":78,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .single on an `error` typed value.","line":79,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":81,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":81,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":106,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":106,"column":57,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":106,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":106,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":110,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":110,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":110,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":110,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":111,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":116,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":116,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":115,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":114,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":113,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":112,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":112,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .update on an `error` typed value.","line":113,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":113,"column":19,"nodeType":"Property","messageId":"anyAssignment","endLine":113,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":113,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":114,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":115,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":115,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .single on an `error` typed value.","line":116,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":116,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":118,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":118,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":142,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":142,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":142,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":142,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":143,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":146,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":143,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":146,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":143,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":145,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":143,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":144,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":144,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .delete on an `error` typed value.","line":145,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":145,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":146,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":148,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":148,"endColumn":24}],"suppressedMessages":[],"errorCount":71,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\n// Functions for CRUD operations on pipelines will be implemented here.\n\nimport { getAuthenticatedClient, handleSupabaseError } from './serviceUtils';\nimport type { Pipeline, PipelineInput } from './generated/graphql'; // ADDED: Import generated types\n\n\n/**\n * Fetches all pipelines belonging to the authenticated user.\n * @param accessToken - The user's JWT.\n * @returns A promise that resolves to an array of Pipelines.\n */\nexport async function getPipelines(accessToken: string): Promise<Pipeline[]> { // Return type is already Pipeline[] (compatible)\n    console.log('[pipelineService.getPipelines] AccessToken:', accessToken); // DEBUG LOG\n    const supabase = getAuthenticatedClient(accessToken);\n    const { data, error } = await supabase\n        .from('pipelines')\n        .select('*');\n\n    handleSupabaseError(error, 'fetching pipelines');\n\n    return (data || []) as Pipeline[]; // CHANGED: Cast to Pipeline[] (from generated type)\n}\n\n/**\n * Fetches a single pipeline by its ID, ensuring it belongs to the authenticated user.\n * @param accessToken - The user's JWT.\n * @param id - The UUID of the pipeline to fetch.\n * @returns A promise that resolves to the Pipeline object or null if not found/accessible.\n */\nexport async function getPipelineById(accessToken: string, id: string): Promise<Pipeline | null> { // Return type is already Pipeline | null (compatible)\n     if (!id) {\n        throw new Error(\"Pipeline ID is required.\");\n    }\n    const supabase = getAuthenticatedClient(accessToken);\n    const { data, error } = await supabase\n        .from('pipelines')\n        .select('*')\n        .eq('id', id)\n        .maybeSingle(); \n\n    handleSupabaseError(error, `fetching pipeline with id ${id}`);\n\n    return data; // CHANGED: Cast to Pipeline | null (from generated type)\n}\n\n/**\n * Creates a new pipeline for the authenticated user.\n * user_id is automatically handled by RLS policies based on the authenticated client.\n * @param accessToken - The user's JWT.\n * @param pipelineData - An object containing the 'name' for the new pipeline.\n * @returns A promise that resolves to the newly created Pipeline object.\n */\nexport async function createPipeline(accessToken: string, pipelineData: PipelineInput): Promise<Pipeline> { // CHANGED: pipelineData type to PipelineInput, return type to Pipeline (compatible)\n    if (!pipelineData || !pipelineData.name) {\n        throw new Error(\"Pipeline name is required for creation.\");\n    }\n\n    const supabase = getAuthenticatedClient(accessToken);\n\n    const { data: { user }, error: userError } = await supabase.auth.getUser();\n\n    if (userError || !user) {\n        console.error('Error fetching user for createPipeline:', userError);\n        throw new Error(\"Could not get authenticated user to create pipeline.\");\n    }\n\n    const userId = user.id;\n\n    const { data, error } = await supabase\n        .from('pipelines')\n        .insert([\n            { \n                name: pipelineData.name,\n                user_id: userId \n            },\n        ])\n        .select() \n        .single(); \n\n    handleSupabaseError(error, 'creating pipeline');\n\n    if (!data) {\n         throw new Error(\"Failed to create pipeline, no data returned.\");\n    }\n\n    return data as Pipeline; // CHANGED: Cast to Pipeline (from generated type)\n}\n\n/**\n * Updates an existing pipeline identified by its ID.\n * Only allows updating fields specified in UpdatePipelineInput (currently 'name').\n * Ensures the pipeline belongs to the authenticated user via RLS.\n * @param accessToken - The user's JWT.\n * @param id - The UUID of the pipeline to update.\n * @param updates - An object containing the fields to update (e.g., { name: 'New Name' }).\n * @returns A promise that resolves to the updated Pipeline object.\n */\nexport async function updatePipeline(accessToken: string, id: string, updates: PipelineInput): Promise<Pipeline> { // CHANGED: updates type to PipelineInput, return type to Pipeline (compatible)\n    if (!id) {\n        throw new Error(\"Pipeline ID is required for update.\");\n    }\n    // The generated PipelineInput only has {name: string}, so it cannot be empty if provided.\n    // The old UpdatePipelineInput was Partial<Pick<Pipeline, 'name'>>, so Object.keys(updates).length === 0 was relevant.\n    // Now, if `updates` is provided, `updates.name` must be a string.\n    if (!updates || typeof updates.name !== 'string' || updates.name.trim() === '') { // Updated validation for PipelineInput\n        throw new Error(\"Valid pipeline name is required for update.\");\n    }\n\n    const supabase = getAuthenticatedClient(accessToken);\n    const { data, error } = await supabase\n        .from('pipelines')\n        .update({ name: updates.name }) // Explicitly update only name, as PipelineInput might have more fields in future\n        .eq('id', id) \n        .select() \n        .single(); \n\n    handleSupabaseError(error, `updating pipeline with id ${id}`);\n\n    if (!data) {\n        throw new Error(`Pipeline with id ${id} not found or update failed.`);\n    }\n\n    return data as Pipeline; // CHANGED: Cast to Pipeline (from generated type)\n}\n\n/**\n * Deletes a pipeline identified by its ID.\n * Ensures the pipeline belongs to the authenticated user via RLS.\n * Note: This might require cascading deletes or checks for associated stages/deals\n * depending on foreign key constraints and application logic (not implemented here).\n * @param accessToken - The user's JWT.\n * @param id - The UUID of the pipeline to delete.\n * @returns A promise that resolves to true if deletion was successful (or if the record didn't exist).\n *          Throws an error if deletion fails for other reasons.\n */\nexport async function deletePipeline(accessToken: string, id: string): Promise<boolean> {\n    if (!id) {\n        throw new Error(\"Pipeline ID is required for deletion.\");\n    }\n\n    const supabase = getAuthenticatedClient(accessToken);\n    const { error, count } = await supabase\n        .from('pipelines')\n        .delete({ count: 'exact' }) \n        .eq('id', id); \n\n    handleSupabaseError(error, `deleting pipeline with id ${id}`);\n\n    console.log(`Pipeline delete operation for id ${id}: count=${count}`); \n    return true; \n} ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/priceCalculator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":121,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":124,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1389,1392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1389,1392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/priceCalculator.ts\n\n// Example additional cost type structure - will be refined with GraphQL types\ninterface AdditionalCostItem {\n  amount: number;\n}\n\n// Example invoice schedule entry data structure - will be refined\ninterface InvoiceScheduleEntryData {\n  entry_type: string;\n  due_date: string; // YYYY-MM-DD\n  amount_due: number;\n  description?: string;\n}\n\n// Example functions based on the plan - to be implemented\nexport function calculateTotalDirectCost(mp: number, additionalCosts: AdditionalCostItem[]): number {\n  return mp + additionalCosts.reduce((sum, item) => sum + item.amount, 0);\n}\n\nexport function calculateTargetPrice(mp: number, targetMarkupPercentage: number): number {\n  return mp * (1 + targetMarkupPercentage / 100);\n}\n\nexport function calculateFullTargetPrice(targetPrice: number, additionalCosts: AdditionalCostItem[]): number {\n  return targetPrice + additionalCosts.reduce((sum, item) => sum + item.amount, 0);\n}\n\nexport function calculateDiscountedOfferPrice(fop: number, discountPercentage: number): number {\n  return fop * (1 - discountPercentage / 100);\n}\n\nexport function calculateEffectiveMarkupFopOverMp(fop: number, mp: number): number {\n  if (mp === 0) return 0; // Avoid division by zero\n  return ((fop - mp) / mp) * 100;\n}\n\nexport function determineEscalationStatus(fop: number, mp: number, totalDirectCost: number): { status: string, details: any } {\n  // Placeholder logic - to be defined based on business rules\n  if (fop < totalDirectCost) {\n    return { status: 'requires_ceo_approval', details: { reason: 'Offer price below total direct cost' } };\n  }\n  if (fop < mp * 1.1) { // Example: less than 10% markup over MP\n    return { status: 'requires_committee_approval', details: { reason: 'Markup less than 10% over MP' } };\n  }\n  return { status: 'ok', details: null };\n}\n\nexport function generateBasicInvoiceSchedule(\n  finalOfferPrice: number, \n  upfrontPercent: number | null | undefined, \n  upfrontDueDaysParam: number | null | undefined, \n  numInstallments: number | null | undefined, \n  installmentIntervalDaysParam: number | null | undefined\n): InvoiceScheduleEntryData[] {\n  const schedule: InvoiceScheduleEntryData[] = [];\n  let remainingAmount = finalOfferPrice;\n  const today = new Date();\n  const todayDateString = today.toISOString().split('T')[0];\n\n  if (upfrontPercent && upfrontPercent > 0 && finalOfferPrice > 0) {\n    const upfrontAmount = finalOfferPrice * (upfrontPercent / 100);\n    remainingAmount -= upfrontAmount;\n    const dueDate = new Date(today);\n    const upfrontDueDays = upfrontDueDaysParam || 0;\n    dueDate.setDate(today.getDate() + upfrontDueDays);\n    schedule.push({\n      entry_type: 'upfront',\n      due_date: dueDate.toISOString().split('T')[0],\n      amount_due: upfrontAmount,\n      description: 'Upfront payment'\n    });\n  }\n\n  const installmentIntervalDays = installmentIntervalDaysParam || 0;\n\n  if (numInstallments && numInstallments > 0 && remainingAmount > 0 && installmentIntervalDays > 0) {\n    const installmentAmount = remainingAmount / numInstallments;\n    \n    let lastPushedDueDateString: string;\n    // If upfront payment exists, base first installment calculation on its due date.\n    // Otherwise, base it on today.\n    if (schedule.length > 0 && schedule[0] && typeof schedule[0].due_date === 'string') {\n        lastPushedDueDateString = schedule[0].due_date;\n    } else {\n        lastPushedDueDateString = todayDateString;\n    }\n    let lastPushedDueDate = new Date(lastPushedDueDateString);\n\n    for (let i = 1; i <= numInstallments; i++) {\n      const installmentDueDate = new Date(lastPushedDueDate);\n\n      // The first installment's due date is calculated based on `lastPushedDueDate` (either upfront or today) + interval.\n      // Subsequent installments are based on the *previous installment's* due date + interval.\n      if (i === 1) {\n         installmentDueDate.setDate(lastPushedDueDate.getDate() + installmentIntervalDays);\n      } else {\n        // lastPushedDueDate here refers to the due date of the (i-1)th installment\n        installmentDueDate.setDate(lastPushedDueDate.getDate() + installmentIntervalDays);\n      }\n      \n      schedule.push({\n        entry_type: `installment_${i}`,\n        due_date: installmentDueDate.toISOString().split('T')[0],\n        amount_due: installmentAmount,\n        description: `Installment ${i}`\n      });\n      lastPushedDueDate = installmentDueDate; // Update for the next loop: this is now the previously pushed due date.\n    }\n  }\n  return schedule;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/priceQuoteService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'supabase' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":18},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'calculateAndSnapshotQuoteOutputs' has no 'await' expression.","line":22,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":22,"endColumn":48,"suggestions":[{"messageId":"removeAsync","fix":{"range":[818,996],"text":"function calculateAndSnapshotQuoteOutputs(\n  quoteInputData: PriceQuoteInputData,\n  additionalCostsInput: AdditionalCostInput[] = []\n): PriceQuoteCalculatedOutputs"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":26,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":26,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .base_minimum_price_mp on an `error` typed value.","line":26,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":27,"column":60,"nodeType":"Property","messageId":"anyAssignment","endLine":27,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":27,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":28,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":28,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .final_offer_price_fop on an `error` typed value.","line":28,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":28,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":30,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":30,"endColumn":100},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":30,"column":40,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":30,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculateTotalDirectCost on an `error` typed value.","line":30,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":31,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":31,"endColumn":124},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":31,"column":38,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":31,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculateTargetPrice on an `error` typed value.","line":31,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .target_markup_percentage on an `error` typed value.","line":31,"column":94,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":118},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":32,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":32,"endColumn":128},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":32,"column":44,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":32,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculateFullTargetPrice on an `error` typed value.","line":32,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":36,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":36,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":37,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":37,"endColumn":165},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":37,"column":45,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":37,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculateDiscountedOfferPrice on an `error` typed value.","line":37,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .overall_discount_percentage on an `error` typed value.","line":37,"column":132,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":159},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":38,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":38,"endColumn":109},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":38,"column":51,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":38,"endColumn":100},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculateEffectiveMarkupFopOverMp on an `error` typed value.","line":38,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":100},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":39,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":39,"endColumn":102},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":39,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":39,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .determineEscalationStatus on an `error` typed value.","line":39,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":42,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":42,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":43,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":43,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":44,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":44,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":45,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":45,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":46,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":46,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":47,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":47,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `error` typed value.","line":47,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":48,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":48,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .details on an `error` typed value.","line":48,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":43},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'generateInvoiceScheduleForQuote' has no 'await' expression.","line":54,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":54,"endColumn":47,"suggestions":[{"messageId":"removeAsync","fix":{"range":[2655,2807],"text":"function generateInvoiceScheduleForQuote(\n  quoteData: PriceQuoteInputData, \n  calculatedOfferPrice: number\n): InvoiceScheduleEntryData[]"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":58,"column":3,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":64,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":58,"column":10,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":58,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .generateBasicInvoiceSchedule on an `error` typed value.","line":58,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upfront_payment_percentage on an `error` typed value.","line":60,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upfront_payment_due_days on an `error` typed value.","line":61,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":61,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subsequent_installments_count on an `error` typed value.","line":62,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subsequent_installments_interval_days on an `error` typed value.","line":63,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":63,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":69,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":69,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":69,"column":20,"nodeType":"Identifier","messageId":"unsafeCall","endLine":69,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":71,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":74,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `AdditionalCostInput[]`.","line":73,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":73,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":73,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":73,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":76,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":94,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":76,"column":58,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":94,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":76,"column":58,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":93,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":76,"column":58,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":78,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":76,"column":58,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":77,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":77,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .insert on an `error` typed value.","line":78,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":81,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":81,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":81,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":82,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":82,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .base_minimum_price_mp on an `error` typed value.","line":82,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":83,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":83,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .target_markup_percentage on an `error` typed value.","line":83,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":84,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":84,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .final_offer_price_fop on an `error` typed value.","line":84,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":85,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":85,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .overall_discount_percentage on an `error` typed value.","line":85,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":85,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":86,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":86,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upfront_payment_percentage on an `error` typed value.","line":86,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":87,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":87,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upfront_payment_due_days on an `error` typed value.","line":87,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":88,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":88,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subsequent_installments_count on an `error` typed value.","line":88,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":89,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":89,"endColumn":91},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subsequent_installments_interval_days on an `error` typed value.","line":89,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":91},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":93,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .single on an `error` typed value.","line":94,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":94,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":96,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":96,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":100,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":100,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":101,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":101,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":101,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":101,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":101,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":101,"column":63,"nodeType":"ObjectExpression","messageId":"unsafeReturn","endLine":101,"endColumn":102},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":101,"column":72,"nodeType":"Property","messageId":"anyAssignment","endLine":101,"endColumn":100},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":101,"column":98,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":100},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":102,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":105,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":102,"column":54,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":105,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":102,"column":54,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":104,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":102,"column":54,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":103,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":103,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .insert on an `error` typed value.","line":104,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":105,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":106,"column":20,"nodeType":"Identifier","messageId":"unsafeCall","endLine":106,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":107,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":107,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":112,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":112,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculated_discounted_offer_price on an `error` typed value.","line":112,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":117,"column":71,"nodeType":"ObjectExpression","messageId":"unsafeReturn","endLine":117,"endColumn":113},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":117,"column":83,"nodeType":"Property","messageId":"anyAssignment","endLine":117,"endColumn":111},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":117,"column":109,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":117,"endColumn":111},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":118,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":121,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":118,"column":60,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":121,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":118,"column":60,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":120,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":118,"column":60,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":119,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":119,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .insert on an `error` typed value.","line":120,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":120,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":121,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":121,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":122,"column":23,"nodeType":"Identifier","messageId":"unsafeCall","endLine":122,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":123,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":123,"endColumn":46},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'PriceQuote' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":133,"column":90,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":133,"endColumn":100},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":134,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":134,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":134,"column":20,"nodeType":"Identifier","messageId":"unsafeCall","endLine":134,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":138,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":146,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":138,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":146,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":138,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":145,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":138,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":140,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":138,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":139,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":139,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":140,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":145,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":145,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .single on an `error` typed value.","line":146,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .code on an `error` typed value.","line":148,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":149,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":149,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":156,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":156,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":156,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":157,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":157,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .invoice_schedule_entries on an `error` typed value.","line":157,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":162,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":162,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":162,"column":20,"nodeType":"Identifier","messageId":"unsafeCall","endLine":162,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":166,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":170,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":166,"column":62,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":170,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":166,"column":62,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":169,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":166,"column":62,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":168,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":166,"column":62,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":167,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":167,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":167,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":168,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":168,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":169,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":169,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .single on an `error` typed value.","line":170,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":170,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":172,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":172,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":180,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":180,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .version_number on an `error` typed value.","line":180,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":180,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":181,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":181,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":181,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":181,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":181,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":182,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":182,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `error` typed value.","line":182,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":182,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `error` typed value.","line":182,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":182,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `error` typed value.","line":182,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":182,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":183,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":183,"endColumn":139},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .base_minimum_price_mp on an `error` typed value.","line":183,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":183,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .base_minimum_price_mp on an `error` typed value.","line":183,"column":80,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":183,"endColumn":101},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .base_minimum_price_mp on an `error` typed value.","line":183,"column":118,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":183,"endColumn":139},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":184,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":184,"endColumn":151},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .target_markup_percentage on an `error` typed value.","line":184,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":184,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .target_markup_percentage on an `error` typed value.","line":184,"column":86,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":184,"endColumn":110},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .target_markup_percentage on an `error` typed value.","line":184,"column":127,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":184,"endColumn":151},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":185,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":185,"endColumn":139},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .final_offer_price_fop on an `error` typed value.","line":185,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":185,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .final_offer_price_fop on an `error` typed value.","line":185,"column":80,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":185,"endColumn":101},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .final_offer_price_fop on an `error` typed value.","line":185,"column":118,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":185,"endColumn":139},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":186,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":186,"endColumn":163},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .overall_discount_percentage on an `error` typed value.","line":186,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":186,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .overall_discount_percentage on an `error` typed value.","line":186,"column":92,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":186,"endColumn":119},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .overall_discount_percentage on an `error` typed value.","line":186,"column":136,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":186,"endColumn":163},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":187,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":187,"endColumn":159},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upfront_payment_percentage on an `error` typed value.","line":187,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":187,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upfront_payment_percentage on an `error` typed value.","line":187,"column":90,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":187,"endColumn":116},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upfront_payment_percentage on an `error` typed value.","line":187,"column":133,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":187,"endColumn":159},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":188,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":188,"endColumn":151},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upfront_payment_due_days on an `error` typed value.","line":188,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":188,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upfront_payment_due_days on an `error` typed value.","line":188,"column":86,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":188,"endColumn":110},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upfront_payment_due_days on an `error` typed value.","line":188,"column":127,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":188,"endColumn":151},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":189,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":189,"endColumn":171},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subsequent_installments_count on an `error` typed value.","line":189,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subsequent_installments_count on an `error` typed value.","line":189,"column":96,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":125},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subsequent_installments_count on an `error` typed value.","line":189,"column":142,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":171},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":190,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":190,"endColumn":203},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subsequent_installments_interval_days on an `error` typed value.","line":190,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subsequent_installments_interval_days on an `error` typed value.","line":190,"column":112,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":149},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subsequent_installments_interval_days on an `error` typed value.","line":190,"column":166,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":203},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":192,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":192,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculated_total_direct_cost on an `error` typed value.","line":192,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":192,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":193,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":193,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculated_target_price_tp on an `error` typed value.","line":193,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":193,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":194,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":194,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculated_full_target_price_ftp on an `error` typed value.","line":194,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":194,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":195,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":195,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculated_discounted_offer_price on an `error` typed value.","line":195,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":195,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":196,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":196,"endColumn":101},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculated_effective_markup_fop_over_mp on an `error` typed value.","line":196,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":196,"endColumn":101},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":197,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":197,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .escalation_status on an `error` typed value.","line":197,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":197,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":198,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":198,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .escalation_details on an `error` typed value.","line":198,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":203,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":206,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `AdditionalCostInput[]`.","line":205,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":205,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":205,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":205,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":209,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":228,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":209,"column":66,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":228,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":209,"column":66,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":227,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":209,"column":66,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":225,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":209,"column":66,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":211,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":209,"column":66,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":210,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":210,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":210,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .update on an `error` typed value.","line":211,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":211,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":212,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":212,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":212,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":212,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":213,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":213,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `error` typed value.","line":213,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":214,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":214,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .base_minimum_price_mp on an `error` typed value.","line":214,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":214,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":215,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":215,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .target_markup_percentage on an `error` typed value.","line":215,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":215,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":216,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":216,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .final_offer_price_fop on an `error` typed value.","line":216,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":216,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":217,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":217,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .overall_discount_percentage on an `error` typed value.","line":217,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":217,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":218,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":218,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upfront_payment_percentage on an `error` typed value.","line":218,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":219,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":219,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upfront_payment_due_days on an `error` typed value.","line":219,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":219,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":220,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":220,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subsequent_installments_count on an `error` typed value.","line":220,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":220,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":221,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":221,"endColumn":110},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subsequent_installments_interval_days on an `error` typed value.","line":221,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":221,"endColumn":110},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":225,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":225,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":227,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":227,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .single on an `error` typed value.","line":228,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":228,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":230,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":230,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":234,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":237,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":234,"column":44,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":237,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":234,"column":44,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":236,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":234,"column":44,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":235,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":235,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":235,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .delete on an `error` typed value.","line":236,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":236,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":237,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":237,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":239,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":239,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":242,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":242,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":242,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":242,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":243,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":243,"endColumn":99},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":243,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":243,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":243,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":243,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":243,"column":63,"nodeType":"ObjectExpression","messageId":"unsafeReturn","endLine":243,"endColumn":97},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":244,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":247,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":244,"column":68,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":247,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":244,"column":68,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":246,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":244,"column":68,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":245,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":245,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":245,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .insert on an `error` typed value.","line":246,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":246,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":247,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":247,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":248,"column":26,"nodeType":"Identifier","messageId":"unsafeCall","endLine":248,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":249,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":249,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":255,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":255,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculated_discounted_offer_price on an `error` typed value.","line":255,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":255,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":258,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":261,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":258,"column":44,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":261,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":258,"column":44,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":260,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":258,"column":44,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":259,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":259,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":259,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .delete on an `error` typed value.","line":260,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":260,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":261,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":261,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":263,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":263,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":267,"column":71,"nodeType":"ObjectExpression","messageId":"unsafeReturn","endLine":267,"endColumn":108},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":268,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":271,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":268,"column":68,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":271,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":268,"column":68,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":270,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":268,"column":68,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":269,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":269,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":269,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .insert on an `error` typed value.","line":270,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":270,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":271,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":271,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":272,"column":26,"nodeType":"Identifier","messageId":"unsafeCall","endLine":272,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":273,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":273,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":287,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":287,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":287,"column":20,"nodeType":"Identifier","messageId":"unsafeCall","endLine":287,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":291,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":294,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":291,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":294,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":291,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":293,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":291,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":292,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":292,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":292,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .delete on an `error` typed value.","line":293,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":293,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":294,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":294,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `error` typed value.","line":299,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":299,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":300,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":300,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":312,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":312,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":312,"column":20,"nodeType":"Identifier","messageId":"unsafeCall","endLine":312,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":316,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":324,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":316,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":324,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":316,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":323,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":316,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":318,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":316,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":317,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":317,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":317,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":318,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":318,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":323,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":323,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .order on an `error` typed value.","line":324,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":324,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":326,"column":16,"nodeType":"Identifier","messageId":"unsafeCall","endLine":326,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":332,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":332,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":332,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":332,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":332,"column":31,"nodeType":"ObjectExpression","messageId":"unsafeReturn","endLine":336,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":334,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":334,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `any` value.","line":334,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":334,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":335,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":335,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .invoice_schedule_entries on an `any` value.","line":335,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":335,"endColumn":63}],"suppressedMessages":[],"errorCount":304,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/priceQuoteService.ts\nimport { supabase } from './supabaseClient'; // Assuming usage of a shared Supabase client\nimport { getAuthenticatedClient, handleSupabaseError } from './serviceUtils';\nimport type {\n  PriceQuote,\n  PriceQuoteCreateInput,\n  PriceQuoteUpdateInput,\n  AdditionalCostInput,\n  AdditionalCost,\n  InvoiceScheduleEntry,\n  PriceQuoteInputData,\n  PriceQuoteCalculatedOutputs,\n  InvoiceScheduleEntryData\n} from './pricingTypes';\nimport * as priceCalculator from './priceCalculator';\n// Import generated GraphQL types once available, e.g.:\n// import type { PriceQuote, PriceQuoteCreateInput, PriceQuoteUpdateInput, User } from './generated/graphql';\n// Import other necessary types or services\n\n// Internal helper to calculate and prepare snapshot data\n// TODO: Implement fully - this is a placeholder\nasync function calculateAndSnapshotQuoteOutputs(\n  quoteInputData: PriceQuoteInputData,\n  additionalCostsInput: AdditionalCostInput[] = []\n): Promise<PriceQuoteCalculatedOutputs> {\n  const mp = quoteInputData.base_minimum_price_mp || 0;\n  const acItemsForCalc = additionalCostsInput.map(ac => ({ amount: ac.amount }));\n  const fop = quoteInputData.final_offer_price_fop || 0;\n\n  const calculated_total_direct_cost = priceCalculator.calculateTotalDirectCost(mp, acItemsForCalc);\n  const calculated_target_price_tp = priceCalculator.calculateTargetPrice(mp, quoteInputData.target_markup_percentage || 0);\n  const calculated_full_target_price_ftp = priceCalculator.calculateFullTargetPrice(calculated_target_price_tp, acItemsForCalc);\n  // Assuming final_offer_price_fop is the basis for discounted price if overall_discount_percentage is applied to it.\n  // Or, if FOP is *after* discount, then this calculation might differ based on business logic.\n  // For now, let's assume FOP is pre-discount and discount is applied to it.\n  const discountedOfferPriceBase = fop; \n  const calculated_discounted_offer_price = priceCalculator.calculateDiscountedOfferPrice(discountedOfferPriceBase, quoteInputData.overall_discount_percentage || 0);\n  const calculated_effective_markup_fop_over_mp = priceCalculator.calculateEffectiveMarkupFopOverMp(fop, mp);\n  const escalation = priceCalculator.determineEscalationStatus(fop, mp, calculated_total_direct_cost);\n\n  return {\n    calculated_total_direct_cost,\n    calculated_target_price_tp,\n    calculated_full_target_price_ftp,\n    calculated_discounted_offer_price,\n    calculated_effective_markup_fop_over_mp,\n    escalation_status: escalation.status,\n    escalation_details: escalation.details,\n  };\n}\n\n// Internal helper to generate invoice schedule\n// TODO: Implement fully - this is a placeholder\nasync function generateInvoiceScheduleForQuote(\n  quoteData: PriceQuoteInputData, \n  calculatedOfferPrice: number\n): Promise<InvoiceScheduleEntryData[]> {\n  return priceCalculator.generateBasicInvoiceSchedule(\n    calculatedOfferPrice,\n    quoteData.upfront_payment_percentage,\n    quoteData.upfront_payment_due_days,\n    quoteData.subsequent_installments_count,\n    quoteData.subsequent_installments_interval_days\n  );\n}\n\nexport const priceQuoteService = {\n  async createPriceQuote(userId: string, dealId: string, input: PriceQuoteCreateInput, accessToken: string): Promise<PriceQuote> {\n    const client = getAuthenticatedClient(accessToken);\n\n    const calculatedOutputs = await calculateAndSnapshotQuoteOutputs(\n      input as PriceQuoteInputData, // Cast needed as PriceQuoteCreateInput is subset of PriceQuoteInputData\n      input.additional_costs\n    );\n\n    const { data: quoteData, error: quoteError } = await client\n      .from('price_quotes')\n      .insert({\n        deal_id: dealId,\n        user_id: userId,\n        name: input.name,\n        base_minimum_price_mp: input.base_minimum_price_mp,\n        target_markup_percentage: input.target_markup_percentage,\n        final_offer_price_fop: input.final_offer_price_fop,\n        overall_discount_percentage: input.overall_discount_percentage,\n        upfront_payment_percentage: input.upfront_payment_percentage,\n        upfront_payment_due_days: input.upfront_payment_due_days,\n        subsequent_installments_count: input.subsequent_installments_count,\n        subsequent_installments_interval_days: input.subsequent_installments_interval_days,\n        ...calculatedOutputs,\n        // version_number and status have defaults in DB\n      })\n      .select()\n      .single();\n\n    if (quoteError) handleSupabaseError(quoteError, 'creating price quote');\n    if (!quoteData) throw new Error('Failed to create price quote, no data returned.');\n\n    let createdAdditionalCosts: AdditionalCost[] = [];\n    if (input.additional_costs && input.additional_costs.length > 0) {\n      const costsToInsert = input.additional_costs.map(ac => ({ ...ac, price_quote_id: quoteData.id }));\n      const { data: acData, error: acError } = await client\n        .from('quote_additional_costs')\n        .insert(costsToInsert)\n        .select();\n      if (acError) handleSupabaseError(acError, 'creating additional costs');\n      createdAdditionalCosts = acData || [];\n    }\n\n    const invoiceScheduleToGenerate = await generateInvoiceScheduleForQuote(\n      input as PriceQuoteInputData, // Similar cast\n      calculatedOutputs.calculated_discounted_offer_price // Use the final calculated offer price\n    );\n    \n    let createdInvoiceEntries: InvoiceScheduleEntry[] = [];\n    if (invoiceScheduleToGenerate.length > 0) {\n      const entriesToInsert = invoiceScheduleToGenerate.map(entry => ({ ...entry, price_quote_id: quoteData.id }));\n      const { data: entryData, error: entryError } = await client\n        .from('quote_invoice_schedule_entries')\n        .insert(entriesToInsert)\n        .select();\n      if (entryError) handleSupabaseError(entryError, 'creating invoice schedule entries');\n      createdInvoiceEntries = entryData || [];\n    }\n    \n    return {\n        ...quoteData,\n        additional_costs: createdAdditionalCosts,\n        invoice_schedule_entries: createdInvoiceEntries,\n    } as PriceQuote; // Cast to ensure all relational fields are at least optionally present\n  },\n\n  async getPriceQuoteById(quoteId: string, userId: string, accessToken: string): Promise<PriceQuote | null> {\n    const client = getAuthenticatedClient(accessToken);\n    // userId is implicitly used by RLS through the authenticated client\n    console.log('Fetching quote by id:', quoteId, 'userId for RLS:', userId);\n\n    const { data, error } = await client\n      .from('price_quotes')\n      .select(`\n        *,\n        additional_costs:quote_additional_costs(*),\n        invoice_schedule_entries:quote_invoice_schedule_entries(*)\n      `)\n      .eq('id', quoteId)\n      .single(); // Expect a single record or null\n\n    if (error && error.code !== 'PGRST116') { // PGRST116: \"Searched for a single row, but 0 rows were found\"\n      handleSupabaseError(error, 'getting price quote by ID');\n    }\n    \n    if (!data) return null;\n\n    return {\n      ...data,\n      additional_costs: data.additional_costs || [],\n      invoice_schedule_entries: data.invoice_schedule_entries || [],\n    } as PriceQuote;\n  },\n\n  async updatePriceQuote(quoteId: string, userId: string, input: PriceQuoteUpdateInput, accessToken: string): Promise<PriceQuote> {\n    const client = getAuthenticatedClient(accessToken);\n    console.log('Updating quote:', quoteId, 'by userId:', userId);\n\n    // 1. Fetch the existing quote to get all current fields like version_number\n    const { data: existingQuote, error: fetchError } = await client\n      .from('price_quotes')\n      .select('*')\n      .eq('id', quoteId)\n      .single();\n\n    if (fetchError) handleSupabaseError(fetchError, 'fetching existing quote for update');\n    if (!existingQuote) throw new Error('Quote to update not found.');\n\n    // 2. Construct the full input data for calculation functions\n    // Overlaying input changes onto the existing quote data\n    const quoteDataForCalculations: PriceQuoteInputData = {\n      // Start with existing data, then override with input fields\n      // Ensure all fields required by PriceQuoteInputData are present\n      version_number: existingQuote.version_number, // from existing\n      name: input.name !== undefined ? input.name : existingQuote.name,\n      status: input.status !== undefined ? input.status : existingQuote.status, \n      base_minimum_price_mp: input.base_minimum_price_mp !== undefined ? input.base_minimum_price_mp : existingQuote.base_minimum_price_mp,\n      target_markup_percentage: input.target_markup_percentage !== undefined ? input.target_markup_percentage : existingQuote.target_markup_percentage,\n      final_offer_price_fop: input.final_offer_price_fop !== undefined ? input.final_offer_price_fop : existingQuote.final_offer_price_fop,\n      overall_discount_percentage: input.overall_discount_percentage !== undefined ? input.overall_discount_percentage : existingQuote.overall_discount_percentage,\n      upfront_payment_percentage: input.upfront_payment_percentage !== undefined ? input.upfront_payment_percentage : existingQuote.upfront_payment_percentage,\n      upfront_payment_due_days: input.upfront_payment_due_days !== undefined ? input.upfront_payment_due_days : existingQuote.upfront_payment_due_days,\n      subsequent_installments_count: input.subsequent_installments_count !== undefined ? input.subsequent_installments_count : existingQuote.subsequent_installments_count,\n      subsequent_installments_interval_days: input.subsequent_installments_interval_days !== undefined ? input.subsequent_installments_interval_days : existingQuote.subsequent_installments_interval_days,\n      // calculated fields will be replaced by new calculation\n      calculated_total_direct_cost: existingQuote.calculated_total_direct_cost, // placeholder, will be overwritten\n      calculated_target_price_tp: existingQuote.calculated_target_price_tp, // placeholder\n      calculated_full_target_price_ftp: existingQuote.calculated_full_target_price_ftp, // placeholder\n      calculated_discounted_offer_price: existingQuote.calculated_discounted_offer_price, // placeholder\n      calculated_effective_markup_fop_over_mp: existingQuote.calculated_effective_markup_fop_over_mp, // placeholder\n      escalation_status: existingQuote.escalation_status, // placeholder\n      escalation_details: existingQuote.escalation_details, // placeholder\n      // additional_costs_data for calculation function if needed, or pass full additional_costs from input\n    };\n\n    // 3. Recalculate outputs\n    const calculatedOutputs = await calculateAndSnapshotQuoteOutputs(\n      quoteDataForCalculations, // Use the merged data\n      input.additional_costs // Pass new additional_costs from input for calculation\n    );\n\n    // 4. Update the main price_quote record\n    const { data: updatedQuoteData, error: updateError } = await client\n      .from('price_quotes')\n      .update({\n        name: quoteDataForCalculations.name,\n        status: quoteDataForCalculations.status,\n        base_minimum_price_mp: quoteDataForCalculations.base_minimum_price_mp,\n        target_markup_percentage: quoteDataForCalculations.target_markup_percentage,\n        final_offer_price_fop: quoteDataForCalculations.final_offer_price_fop,\n        overall_discount_percentage: quoteDataForCalculations.overall_discount_percentage,\n        upfront_payment_percentage: quoteDataForCalculations.upfront_payment_percentage,\n        upfront_payment_due_days: quoteDataForCalculations.upfront_payment_due_days,\n        subsequent_installments_count: quoteDataForCalculations.subsequent_installments_count,\n        subsequent_installments_interval_days: quoteDataForCalculations.subsequent_installments_interval_days,\n        ...calculatedOutputs,\n        updated_at: new Date().toISOString(), // Explicitly set updated_at\n      })\n      .eq('id', quoteId)\n      // .eq('user_id', userId) // RLS should handle ownership check for updates\n      .select()\n      .single();\n\n    if (updateError) handleSupabaseError(updateError, 'updating price quote');\n    if (!updatedQuoteData) throw new Error('Failed to update price quote or quote not found.');\n\n    // 5. Handle additional_costs: Delete existing and insert new ones\n    const { error: deleteAcError } = await client\n      .from('quote_additional_costs')\n      .delete()\n      .eq('price_quote_id', quoteId);\n\n    if (deleteAcError) handleSupabaseError(deleteAcError, 'deleting old additional costs');\n\n    let newAdditionalCosts: AdditionalCost[] = [];\n    if (input.additional_costs && input.additional_costs.length > 0) {\n      const costsToInsert = input.additional_costs.map(ac => ({ ...ac, price_quote_id: quoteId }));\n      const { data: insertedAcData, error: insertAcError } = await client\n        .from('quote_additional_costs')\n        .insert(costsToInsert)\n        .select();\n      if (insertAcError) handleSupabaseError(insertAcError, 'inserting new additional costs');\n      newAdditionalCosts = insertedAcData || [];\n    }\n\n    // 6. Handle invoice_schedule_entries: Regenerate, delete existing, and insert new ones\n    const invoiceScheduleToGenerate = await generateInvoiceScheduleForQuote(\n      quoteDataForCalculations, // Use the merged data for context\n      calculatedOutputs.calculated_discounted_offer_price // Use the new final calculated offer price\n    );\n\n    const { error: deleteIsError } = await client\n      .from('quote_invoice_schedule_entries')\n      .delete()\n      .eq('price_quote_id', quoteId);\n\n    if (deleteIsError) handleSupabaseError(deleteIsError, 'deleting old invoice schedule entries');\n\n    let newInvoiceEntries: InvoiceScheduleEntry[] = [];\n    if (invoiceScheduleToGenerate.length > 0) {\n      const entriesToInsert = invoiceScheduleToGenerate.map(entry => ({ ...entry, price_quote_id: quoteId }));\n      const { data: insertedIsData, error: insertIsError } = await client\n        .from('quote_invoice_schedule_entries')\n        .insert(entriesToInsert)\n        .select();\n      if (insertIsError) handleSupabaseError(insertIsError, 'inserting new invoice schedule entries');\n      newInvoiceEntries = insertedIsData || [];\n    }\n\n    // Return the updated quote with its new relations\n    // It might be cleaner to re-fetch using getPriceQuoteById to ensure consistency\n    // For now, construct it from parts, assuming updatedQuoteData has the main fields\n    return {\n      ...updatedQuoteData,\n      additional_costs: newAdditionalCosts,\n      invoice_schedule_entries: newInvoiceEntries,\n    } as PriceQuote;\n  },\n\n  async deletePriceQuote(quoteId: string, userId: string, accessToken: string): Promise<boolean> {\n    const client = getAuthenticatedClient(accessToken);\n    // userId is implicitly used by RLS through the authenticated client for permission checks\n    console.log('Attempting to delete quote:', quoteId, 'by userId for RLS:', userId);\n\n    const { error } = await client\n      .from('price_quotes')\n      .delete()\n      .eq('id', quoteId);\n\n    if (error) {\n      // Log the error but don't necessarily throw if RLS simply prevents deletion (which might not be an error in some flows)\n      // However, for a direct delete attempt, an error usually means something went wrong or access denied.\n      console.error('Error deleting price quote:', error.message);\n      handleSupabaseError(error, 'deleting price quote'); // This will throw if it's a significant DB error\n      return false; // If handleSupabaseError doesn't throw, or if we want to return false on any error\n    }\n    \n    // If no error, the delete command was accepted. \n    // This doesn't guarantee a row was deleted (e.g. if ID didn't exist or RLS prevented without erroring explicitly in a certain way).\n    // For more certainty, one could use .delete({ count: 'exact' }) and check if count === 1, \n    // but that might error if RLS silently prevents deletion of a non-owned existing record.\n    return true; \n  },\n\n  async listPriceQuotesForDeal(dealId: string, userId: string, accessToken: string): Promise<PriceQuote[]> {\n    const client = getAuthenticatedClient(accessToken);\n    // userId is implicitly used by RLS through the authenticated client\n    console.log('Fetching quotes for dealId:', dealId, 'userId for RLS:', userId); \n\n    const { data, error } = await client\n      .from('price_quotes')\n      .select(`\n        *,\n        additional_costs:quote_additional_costs(*),\n        invoice_schedule_entries:quote_invoice_schedule_entries(*)\n      `)\n      .eq('deal_id', dealId)\n      .order('created_at', { ascending: false });\n\n    if (error) handleSupabaseError(error, 'listing price quotes for deal');\n    if (!data) return [];\n\n    // Transform data if necessary to match PriceQuote type, \n    // especially if DB column names differ or if relations need restructuring.\n    // For now, assume direct mapping is mostly fine but ensure relations are correctly named.\n    return data.map(quote => ({\n      ...quote,\n      additional_costs: quote.additional_costs || [],\n      invoice_schedule_entries: quote.invoice_schedule_entries || [],\n    })) as PriceQuote[];\n  },\n\n  // Potentially expose helper functions for managing sub-entities if needed by resolvers directly\n  // e.g., getAdditionalCostsForQuote, getInvoiceScheduleForQuote\n};\n\n// Internal helper functions (example)\n// function calculateAndSnapshotQuoteOutputs(quoteData: any): any {\n//   // ... calculation logic\n//   return {};\n// }\n\n// function generateInvoiceScheduleForQuote(quoteData: any, calculatedOfferPrice: number): any[] {\n//   // ... schedule generation\n//   return [];\n// } ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/pricingTypes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1117,1120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1117,1120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3890,3893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3890,3893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/pricingTypes.ts\n\n// Corresponds to the 'price_quotes' table and GraphQL PriceQuote type\nexport interface PriceQuote {\n  id: string; // UUID\n  deal_id: string; // UUID\n  user_id: string; // UUID\n  version_number: number;\n  name?: string | null;\n  status: string; // e.g., 'draft', 'proposed', 'archived'\n  base_minimum_price_mp?: number | null;\n  target_markup_percentage?: number | null;\n  final_offer_price_fop?: number | null;\n  overall_discount_percentage?: number | null;\n  upfront_payment_percentage?: number | null;\n  upfront_payment_due_days?: number | null;\n  subsequent_installments_count?: number | null;\n  subsequent_installments_interval_days?: number | null;\n  created_at: string; // TIMESTAMPTZ\n  updated_at: string; // TIMESTAMPTZ\n\n  // Calculated Output Fields\n  calculated_total_direct_cost?: number | null;\n  calculated_target_price_tp?: number | null;\n  calculated_full_target_price_ftp?: number | null;\n  calculated_discounted_offer_price?: number | null;\n  calculated_effective_markup_fop_over_mp?: number | null;\n  escalation_status?: string | null;\n  escalation_details?: Record<string, any> | null; // JSONB\n\n  // Relations (will be populated by service/resolver)\n  additional_costs?: AdditionalCost[];\n  invoice_schedule_entries?: InvoiceScheduleEntry[];\n}\n\n// Corresponds to the 'quote_additional_costs' table\nexport interface AdditionalCost {\n  id: string; // UUID\n  price_quote_id: string; // UUID\n  description: string;\n  amount: number;\n  created_at: string; // TIMESTAMPTZ\n  updated_at: string; // TIMESTAMPTZ\n}\n\n// Corresponds to the 'quote_invoice_schedule_entries' table\nexport interface InvoiceScheduleEntry {\n  id: string; // UUID\n  price_quote_id: string; // UUID\n  entry_type: string; // e.g., 'upfront', 'installment_1', 'milestone_fee'\n  due_date: string; // DATE\n  amount_due: number;\n  description?: string | null;\n  created_at: string; // TIMESTAMPTZ\n  updated_at: string; // TIMESTAMPTZ\n}\n\n// --- Input Types for Service Methods ---\n\nexport interface AdditionalCostInput { // For creating/updating additional costs\n  description: string;\n  amount: number;\n}\n\nexport interface PriceQuoteCreateInput {\n  name?: string | null;\n  // status is typically handled by default or specific service logic, not direct input\n  base_minimum_price_mp?: number | null;\n  target_markup_percentage?: number | null;\n  final_offer_price_fop?: number | null;\n  overall_discount_percentage?: number | null;\n  upfront_payment_percentage?: number | null;\n  upfront_payment_due_days?: number | null;\n  subsequent_installments_count?: number | null;\n  subsequent_installments_interval_days?: number | null;\n  additional_costs?: AdditionalCostInput[];\n}\n\n// PriceQuoteUpdateInput can be a partial of PriceQuoteCreateInput, \n// but also might need to handle existing sub-entity IDs for updates/deletes.\n// For Stage 1, we'll keep it similar to Create for simplicity in the service layer.\nexport type PriceQuoteUpdateInput = Partial<PriceQuoteCreateInput> & {\n  id: string; // Required for updates\n  name?: string | null;\n  status?: string | null;\n  // Potentially add logic for updating/removing existing additional_costs or invoice_schedule_entries\n};\n\n// Data structure passed to calculation functions\nexport interface PriceQuoteInputData extends Omit<PriceQuote, 'id' | 'deal_id' | 'user_id' | 'created_at' | 'updated_at' | 'additional_costs' | 'invoice_schedule_entries'> {\n  additional_costs_data?: { amount: number }[]; // Simplified for calculation functions\n}\n\n// Expected output from the main calculation snapshotting function\nexport interface PriceQuoteCalculatedOutputs {\n  calculated_total_direct_cost: number;\n  calculated_target_price_tp: number;\n  calculated_full_target_price_ftp: number;\n  calculated_discounted_offer_price: number;\n  calculated_effective_markup_fop_over_mp: number;\n  escalation_status: string;\n  escalation_details: Record<string, any> | null;\n}\n\nexport interface InvoiceScheduleEntryData { // For generating invoice schedules\n  entry_type: string;\n  due_date: string; // YYYY-MM-DD\n  amount_due: number;\n  description?: string | null;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/serviceUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3622,3625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3622,3625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3639,3642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3639,3642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3986,3989],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3986,3989],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4001,4004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4001,4004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4025,4028],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4025,4028],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4116,4119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4116,4119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient, SupabaseClient, PostgrestError } from '@supabase/supabase-js';\nimport { GraphQLError } from 'graphql';\n\n// --- Helper Functions ---\n\n/**\n * Creates a Supabase client instance authenticated with the provided user access token.\n * This ensures RLS policies relying on auth.uid() are correctly enforced.\n * Reads Supabase URL and Anon Key from environment variables.\n * @param accessToken - The user's JWT.\n * @returns An authenticated SupabaseClient instance.\n * @throws Error if SUPABASE_URL or SUPABASE_ANON_KEY are not set.\n */\nexport function getAuthenticatedClient(accessToken: string): SupabaseClient {\n  console.log('[getAuthenticatedClient] AccessToken:', accessToken); // DEBUG LOG\n  const supabaseUrl = process.env.SUPABASE_URL;\n  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;\n\n  if (!supabaseUrl || !supabaseAnonKey) {\n    // Throw a configuration error if essential env vars are missing\n    throw new Error('Server configuration error: Supabase URL or Anon Key is not set.');\n  }\n  return createClient(supabaseUrl, supabaseAnonKey, {\n    global: { headers: { Authorization: `Bearer ${accessToken}` } },\n    // auth: { persistSession: false } // Ensure no session persistence on server-side clients\n  });\n}\n\n/**\n * Handles potential errors from Supabase operations.\n * Logs the error and throws a formatted GraphQLError.\n * @param error - The error object from a Supabase client call (or null).\n * @param context - A string describing the operation context (e.g., 'fetching people').\n * @throws GraphQLError if error is not null.\n */\nexport function handleSupabaseError(error: PostgrestError | null, context: string): void {\n  if (error) {\n    console.error(`Supabase error in ${context}:`, error.message, error.details, error.hint);\n\n    // Handle unique constraint violation (PostgreSQL error code 23505)\n    if (error.code === '23505') {\n      let userMessage = `A unique value is required for ${context}, but a duplicate was provided. Please check your input.`;\n      // Try to make the message more specific if it's our known stage order or name constraint\n      if (error.message && error.message.includes('stages_pipeline_id_order_key')) {\n        userMessage = `The 'order' number is already in use for this pipeline. Please choose a different order.`;\n      } else if (error.message && error.message.includes('stages_pipeline_id_name_key')) {\n        userMessage = `The stage 'name' is already in use for this pipeline. Please choose a different name.`;\n      } else if (error.message && error.message.includes('pipelines_user_id_name_key')) {\n        userMessage = `The pipeline 'name' is already in use. Please choose a different name.`;\n      }\n      // Add more specific checks for other known unique constraints as needed:\n      // else if (error.message && error.message.includes('some_other_key_constraint_name')) {\n      //   userMessage = `Specific message for some_other_key_constraint_name.`;\n      // }\n\n      throw new GraphQLError(userMessage, {\n        extensions: { \n          code: 'BAD_USER_INPUT', \n          originalError: { message: error.message, code: error.code, details: error.details, hint: error.hint }\n        },\n      });\n    }\n\n    // Fallback for other database errors\n    throw new GraphQLError(`Database error during ${context}. Please try again later or contact support.`, {\n      extensions: { \n        code: 'INTERNAL_SERVER_ERROR', \n        originalError: { message: error.message, code: error.code, details: error.details, hint: error.hint }\n      },\n    });\n  }\n}\n\nexport interface HistoryChangeDetail {\n  field: string;\n  oldValue: any;\n  newValue: any;\n}\n\nexport async function recordEntityHistory(\n  supabase: SupabaseClient, // Authenticated Supabase client\n  entityTable: string, // e.g., \\'deal_history\\'\n  entityIdField: string, // e.g., \\'deal_id\\'\n  entityId: string,\n  userId: string | undefined, // User performing the action\n  eventType: string,\n  changes?: Record<string, { oldValue: any; newValue: any }> | Record<string, any> | null // Flexible changes object\n): Promise<void> {\n  try {\n    const historyRecord: any = {\n      [entityIdField]: entityId,\n      user_id: userId,\n      event_type: eventType,\n      changes: changes || null,\n    };\n\n    const { error } = await supabase.from(entityTable).insert(historyRecord);\n    if (error) {\n      console.error(`[recordEntityHistory] Error recording history for ${entityTable} (${entityIdField}: ${entityId}):`, error);\n      // Decide if this error should be re-thrown or just logged\n      // For now, log and continue to not break main operation\n    }\n  } catch (err) {\n    console.error(`[recordEntityHistory] Exception recording history for ${entityTable}:`, err);\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/stageService.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MockedFunction' is defined but never used.","line":1,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":80,"column":140,"nodeType":"Property","messageId":"anyAssignment","endLine":80,"endColumn":168},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":81,"column":140,"nodeType":"Property","messageId":"anyAssignment","endLine":81,"endColumn":168},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":97,"column":179,"nodeType":"Property","messageId":"anyAssignment","endLine":97,"endColumn":207},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":98,"column":68,"nodeType":"Property","messageId":"anyAssignment","endLine":98,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":99,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":99,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":109,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":109,"endColumn":126},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":113,"column":65,"nodeType":"Property","messageId":"anyAssignment","endLine":113,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":114,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":114,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":123,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":123,"endColumn":108},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":143,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":143,"endColumn":92}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, MockedFunction } from 'vitest';\nimport { PostgrestError } from '@supabase/supabase-js'; // Only PostgrestError needed from here for types\nimport * as stageService from './stageService.js';\nimport { GraphQLError } from 'graphql';\nimport type { Stage as GraphQLStage, CreateStageInput as GraphQLCreateStageInput, UpdateStageInput as GraphQLUpdateStageInput, Pipeline as GraphQLPipeline } from './generated/graphql';\n\n// --- Vitest Mock Setup for serviceUtils ---\n\n// This is the mock for the Supabase client builder methods (select, insert, etc.)\nconst mockSupabaseQueryBuilder = {\n    select: vi.fn().mockReturnThis(),\n    insert: vi.fn().mockReturnThis(),\n    update: vi.fn().mockReturnThis(),\n    delete: vi.fn().mockReturnThis(),\n    eq: vi.fn().mockReturnThis(),\n    order: vi.fn().mockReturnThis(),\n    maybeSingle: vi.fn(),\n    single: vi.fn(),\n};\n\n// This is the mock for supabase.auth.getUser()\nconst mockAuthGetUser = vi.fn();\n\n// This is the mock for the Supabase client instance that serviceUtils.getAuthenticatedClient will return\nconst mockSupabaseClient = {\n    from: vi.fn(() => mockSupabaseQueryBuilder),\n    auth: { getUser: mockAuthGetUser },\n  };\n\nvi.mock('./serviceUtils.js', () => ({\n  getAuthenticatedClient: vi.fn(() => mockSupabaseClient),\n  handleSupabaseError: vi.fn((error: PostgrestError | null, context: string) => { \n    if (error) { \n      console.error(`Mocked Supabase Error in ${context}:`, error);\n      throw new GraphQLError(`Database error during ${context}. Please try again later.`, {\n        extensions: { code: 'INTERNAL_SERVER_ERROR', originalError: { message: error.message, code: error.code } }\n      });\n    }\n  }),\n}));\n\n// --- Test Suite Data ---\nconst mockUser = { id: 'user-stage-456' };\n  const mockAccessToken = 'mock-stage-access-token';\n  const mockPipelineId = 'pipe-stage-789';\n\nconst MOCK_PIPELINE_DATA: GraphQLPipeline = {\n    id: mockPipelineId,\n    name: 'Mock Pipeline for Stage Test',\n    user_id: mockUser.id,\n    created_at: 'mock_created_at_ts',\n    updated_at: 'mock_updated_at_ts',\n};\n\ndescribe('stageService', () => {\n  let service: typeof stageService;\n\n  beforeEach(async () => {\n    vi.clearAllMocks(); \n    // Reset modules to ensure service uses the fresh mocks, especially for serviceUtils\n    vi.resetModules(); \n    service = await import('./stageService.js'); \n    \n    // Clear specific mocks that are frequently re-assigned in tests\n    mockAuthGetUser.mockClear();\n    Object.values(mockSupabaseQueryBuilder).forEach(mockFn => {\n        mockFn.mockClear();\n        // Ensure chaining for all builder methods except those that terminate the chain (single, maybeSingle)\n        if (mockFn !== mockSupabaseQueryBuilder.single && mockFn !== mockSupabaseQueryBuilder.maybeSingle) {\n             mockFn.mockReturnThis(); \n        }\n    });\n    // Ensure from() is also reset if it has specific mockResolvedValueOnce for example\n    mockSupabaseClient.from.mockClear().mockReturnValue(mockSupabaseQueryBuilder);\n  });\n  \n  describe('getStagesByPipelineId', () => {\n    it('should fetch stages for a given pipeline, ordered by order', async () => {\n      const mockStagesData: GraphQLStage[] = [\n        { id: 'stage-1', name: 'Stage A', pipeline_id: mockPipelineId, order: 0, user_id: mockUser.id, created_at: 'ts', updated_at: 'ts', pipeline: MOCK_PIPELINE_DATA, deal_probability: 0.5 },\n        { id: 'stage-2', name: 'Stage B', pipeline_id: mockPipelineId, order: 1, user_id: mockUser.id, created_at: 'ts', updated_at: 'ts', pipeline: MOCK_PIPELINE_DATA, deal_probability: 0.8 },\n      ];\n      // Mock the chain: supabase.from('stages').select('*').eq('pipeline_id', ...).order(...)\n      mockSupabaseQueryBuilder.order.mockResolvedValueOnce({ data: mockStagesData, error: null }); \n      const stages = await service.getStagesByPipelineId(mockAccessToken, mockPipelineId);\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('stages');\n      expect(mockSupabaseQueryBuilder.select).toHaveBeenCalledWith('*');\n      expect(mockSupabaseQueryBuilder.eq).toHaveBeenCalledWith('pipeline_id', mockPipelineId);\n      expect(mockSupabaseQueryBuilder.order).toHaveBeenCalledWith('order', { ascending: true });\n      expect(stages).toEqual(mockStagesData);\n    });\n  });\n\n  describe('getStageById', () => {\n    const stageId = 'stage-xyz';\n    it('should fetch a single stage by ID', async () => {\n      const mockStageData: GraphQLStage = { id: stageId, name: 'Specific Stage', pipeline_id: mockPipelineId, order: 0, user_id: mockUser.id, created_at: 'ts', updated_at: 'ts', pipeline: MOCK_PIPELINE_DATA, deal_probability: 0.2 };\n      mockSupabaseQueryBuilder.maybeSingle.mockResolvedValueOnce({ data: mockStageData, error: null });\n      const stage = await service.getStageById(mockAccessToken, stageId);\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('stages');\n      expect(mockSupabaseQueryBuilder.select).toHaveBeenCalledWith('*');\n      expect(mockSupabaseQueryBuilder.eq).toHaveBeenCalledWith('id', stageId);\n      expect(stage).toEqual(mockStageData);\n    });\n  });\n\n  describe('createStage', () => {\n    const stageInput: GraphQLCreateStageInput = { name: 'New Stage', order: 0, pipeline_id: mockPipelineId, deal_probability: 0.1 };\n    const expectedDbRecord = { ...stageInput, id: 'new-stage-abc', user_id: mockUser.id, created_at: 'ts', updated_at: 'ts' }; \n\n    it('should create a stage and return the record', async () => {\n        mockAuthGetUser.mockResolvedValueOnce({ data: { user: mockUser }, error: null });\n        mockSupabaseQueryBuilder.single.mockResolvedValueOnce({ data: expectedDbRecord, error: null });\n        const newStage = await service.createStage(mockAccessToken, stageInput);\n        expect(mockAuthGetUser).toHaveBeenCalled();\n        expect(mockSupabaseClient.from).toHaveBeenCalledWith('stages');\n        expect(mockSupabaseQueryBuilder.insert).toHaveBeenCalledWith([expect.objectContaining({ ...stageInput, user_id: mockUser.id })]);\n        expect(newStage).toEqual(expectedDbRecord);\n    });\n\n    it('should throw error if input validation fails (missing order)', async () => {\n        // No mock for getUser needed as it shouldn't be called\n        const invalidInput = { name: 'Test Stage', pipeline_id: mockPipelineId } as GraphQLCreateStageInput;\n        await expect(service.createStage(mockAccessToken, invalidInput))\n            .rejects.toThrow(\"Pipeline ID, stage name, and order are required for creation.\");\n    });\n    \n    it('should throw error if getUser fails for createStage', async () => {\n        mockAuthGetUser.mockResolvedValueOnce({ data: { user: null }, error: { message: 'Auth Error'} as PostgrestError });\n         await expect(service.createStage(mockAccessToken, stageInput))\n            .rejects.toThrow(\"Could not get authenticated user to create stage.\");\n    });\n  });\n\n  describe('updateStage', () => {\n    const stageId = 'stage-to-update';\n    const updateInput: GraphQLUpdateStageInput = { name: 'Updated Stage Name', order: 1, deal_probability: 0.9 };\n    const expectedDbRecord = { id: stageId, pipeline_id: mockPipelineId, user_id: mockUser.id, name: 'Updated Stage Name', order: 1, deal_probability: 0.9, created_at: 'ts', updated_at: 'ts' };\n\n    it('should update a stage and return the record', async () => {\n      mockAuthGetUser.mockResolvedValueOnce({ data: { user: mockUser }, error: null }); // For the getUser call in updateStage\n      mockSupabaseQueryBuilder.single.mockResolvedValueOnce({ data: expectedDbRecord, error: null });\n      const updatedStage = await service.updateStage(mockAccessToken, stageId, updateInput);\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('stages');\n      expect(mockSupabaseQueryBuilder.update).toHaveBeenCalledWith(updateInput);\n      expect(mockSupabaseQueryBuilder.eq).toHaveBeenCalledWith('id', stageId);\n      expect(updatedStage).toEqual(expectedDbRecord);\n    });\n  });\n\n  describe('deleteStage', () => {\n    const stageId = 'stage-to-delete';\n    it('should delete a stage and return true', async () => {\n      // Mock the chain: supabase.from('stages').delete({ count: 'exact' }).eq('id', ...)\n      mockSupabaseQueryBuilder.eq.mockResolvedValueOnce({ error: null, count: 1 }); \n      const result = await service.deleteStage(mockAccessToken, stageId);\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('stages');\n      expect(mockSupabaseQueryBuilder.delete).toHaveBeenCalledWith({ count: 'exact' });\n      expect(mockSupabaseQueryBuilder.eq).toHaveBeenCalledWith('id', stageId);\n      expect(result).toBe(true);\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/stageService.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":17,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":17,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":17,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":17,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":18,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":22,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":18,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":22,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":18,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":21,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":18,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":20,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":18,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":19,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":19,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":20,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":20,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":21,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":21,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .order on an `error` typed value.","line":22,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":22,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":24,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":24,"endColumn":24},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'Stage' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":35,"column":78,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":35,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":39,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":39,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":39,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":39,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":40,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":44,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":40,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":44,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":40,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":43,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":40,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":42,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":40,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":41,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":41,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":42,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":43,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .maybeSingle on an `error` typed value.","line":44,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":46,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":46,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipeline_id on an `error` typed value.","line":60,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":60,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .order on an `error` typed value.","line":60,"column":78,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .order on an `error` typed value.","line":60,"column":111,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":116},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":65,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":65,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":65,"column":103,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":119},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":65,"column":137,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":153},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":69,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":69,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":69,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":69,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":70,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":70,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":70,"column":56,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":70,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `error` typed value.","line":70,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":76,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":76,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":76,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":87,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":87,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipeline_id on an `error` typed value.","line":87,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":88,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":88,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":88,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":89,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":89,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .order on an `error` typed value.","line":89,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":90,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":90,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":90,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":91,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":91,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_type on an `error` typed value.","line":91,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":92,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":92,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_type on an `error` typed value.","line":96,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_type on an `error` typed value.","line":97,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_type on an `error` typed value.","line":99,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":106,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":110,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":106,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":110,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":106,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":109,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":106,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":108,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":106,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":107,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":107,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":107,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .insert on an `error` typed value.","line":108,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":109,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":109,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .single on an `error` typed value.","line":110,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":110,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":112,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":112,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `{}`.","line":134,"column":33,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":134,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":139,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":139,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":139,"column":97,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":113},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":139,"column":129,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":145},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":142,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":142,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":142,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":142,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":142,"column":76,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":142,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":142,"column":84,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":142,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .order on an `error` typed value.","line":145,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":145,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .order on an `error` typed value.","line":145,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":145,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .order on an `error` typed value.","line":145,"column":93,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":145,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":149,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":149,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":149,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":149,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":152,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":152,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_type on an `error` typed value.","line":155,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_type on an `error` typed value.","line":156,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":157,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_type on an `error` typed value.","line":158,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":158,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":159,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":172,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":177,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":172,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":177,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":172,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":176,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":172,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":175,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":172,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":174,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":172,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":173,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":173,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":173,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .update on an `error` typed value.","line":174,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":174,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":175,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":175,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":176,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":176,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .single on an `error` typed value.","line":177,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":179,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":179,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":201,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":201,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":201,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":201,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":202,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":205,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":202,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":205,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":202,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":204,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":202,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":203,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":203,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .delete on an `error` typed value.","line":204,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":204,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":205,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":205,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":207,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":207,"endColumn":24}],"suppressedMessages":[],"errorCount":106,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getAuthenticatedClient, handleSupabaseError } from './serviceUtils';\n// import { Stage } from './types'; // REMOVED: Import of local Stage type\nimport type { Stage, CreateStageInput, UpdateStageInput } from './generated/graphql'; // ADDED: Import generated types\n\n\n/**\n * Fetches all stages belonging to a specific pipeline for the authenticated user.\n * Assumes RLS on stages table enforces user ownership via the pipeline.\n * @param accessToken - The user's JWT.\n * @param pipelineId - The UUID of the pipeline whose stages are to be fetched.\n * @returns A promise that resolves to an array of Stages, ordered by their 'order' field.\n */\nexport async function getStagesByPipelineId(accessToken: string, pipelineId: string): Promise<Stage[]> {\n    if (!pipelineId) {\n        throw new Error(\"Pipeline ID is required to fetch stages.\");\n    }\n    const supabase = getAuthenticatedClient(accessToken);\n    const { data, error } = await supabase\n        .from('stages')\n        .select('*')\n        .eq('pipeline_id', pipelineId)\n        .order('order', { ascending: true }); \n\n    handleSupabaseError(error, `fetching stages for pipeline ${pipelineId}`);\n\n    return (data || []) as Stage[]; // CHANGED: Cast to generated Stage[]\n}\n\n/**\n * Fetches a single stage by its ID, ensuring it belongs to the authenticated user (via RLS).\n * @param accessToken - The user's JWT.\n * @param id - The UUID of the stage to fetch.\n * @returns A promise that resolves to the Stage object or null if not found/accessible.\n */\nexport async function getStageById(accessToken: string, id: string): Promise<Stage | null> {\n     if (!id) {\n        throw new Error(\"Stage ID is required.\");\n    }\n    const supabase = getAuthenticatedClient(accessToken);\n    const { data, error } = await supabase\n        .from('stages')\n        .select('*')\n        .eq('id', id)\n        .maybeSingle(); \n\n    handleSupabaseError(error, `fetching stage with id ${id}`);\n\n    return data; // CHANGED: Cast to generated Stage | null\n}\n\n/**\n * Creates a new stage for the authenticated user within a specific pipeline.\n * user_id is automatically derived. pipeline_id, name, and order are required from input.\n * @param accessToken - The user's JWT.\n * @param stageData - An object containing the details for the new stage.\n * @returns A promise that resolves to the newly created Stage object.\n */\nexport async function createStage(accessToken: string, stageData: CreateStageInput): Promise<Stage> {\n    // Runtime validation for required fields from CreateStageInput\n    if (!stageData || !stageData.pipeline_id || !stageData.name || stageData.order === undefined || stageData.order === null) {\n        throw new Error(\"Pipeline ID, stage name, and order are required for creation.\");\n    }\n    // Optional deal_probability validation:\n    // This initial validation can remain, but the actual value might be overridden by stage_type\n    if (stageData.deal_probability !== undefined && stageData.deal_probability !== null && (stageData.deal_probability < 0 || stageData.deal_probability > 1)) {\n        throw new Error(\"Deal probability must be between 0 and 1.\");\n    }\n\n    const supabase = getAuthenticatedClient(accessToken);\n    const { data: { user }, error: userError } = await supabase.auth.getUser();\n\n    if (userError || !user) {\n        console.error('Error fetching user for createStage:', userError);\n        throw new Error(\"Could not get authenticated user to create stage.\");\n    }\n    const userId = user.id;\n\n    // Prepare the insert payload\n    const insertPayload: {\n        pipeline_id: string;\n        name: string;\n        order: number;\n        deal_probability?: number | null;\n        stage_type?: string | null; // Assuming StageType is string enum like 'OPEN', 'WON', 'LOST'\n        user_id: string;\n    } = {\n        pipeline_id: stageData.pipeline_id,\n        name: stageData.name,\n        order: stageData.order,\n        deal_probability: stageData.deal_probability, // Default to provided, may be overridden\n        stage_type: stageData.stage_type,\n        user_id: userId,\n    };\n\n    // Adjust deal_probability based on stage_type\n    if (stageData.stage_type) {\n        if (stageData.stage_type === 'WON') { // Assuming 'WON' is the string representation from StageType enum\n            insertPayload.deal_probability = 1.0;\n        } else if (stageData.stage_type === 'LOST') { // Assuming 'LOST'\n            insertPayload.deal_probability = 0.0;\n        }\n        // If 'OPEN' or any other type, use the deal_probability already set from stageData.deal_probability\n    }\n\n\n    const { data, error } = await supabase\n        .from('stages')\n        .insert([insertPayload]) // Use the prepared payload\n        .select() \n        .single(); \n\n    handleSupabaseError(error, 'creating stage');\n\n    if (!data) {\n         throw new Error(\"Failed to create stage, no data returned.\");\n    }\n    return data as Stage; // CHANGED: Cast to generated Stage\n}\n\n/**\n * Updates an existing stage identified by its ID.\n * Allows updating fields specified in UpdateStageInput (name, order, deal_probability).\n * Ensures the stage belongs to the authenticated user via RLS.\n * @param accessToken - The user's JWT.\n * @param id - The UUID of the stage to update.\n * @param updates - An object containing the fields to update.\n * @returns A promise that resolves to the updated Stage object.\n */\nexport async function updateStage(accessToken: string, id: string, updates: UpdateStageInput): Promise<Stage> { // CHANGED: updates type to generated UpdateStageInput\n    if (!id) {\n        throw new Error(\"Stage ID is required for update.\");\n    }\n    // The generated UpdateStageInput has all optional fields. Check if it's empty.\n    if (!updates || Object.keys(updates).length === 0) {\n        throw new Error(\"No update data provided for stage.\");\n    }\n    // Validation for optional fields in generated UpdateStageInput\n    // This initial validation can remain, but the actual value might be overridden by stage_type\n    if (updates.deal_probability !== undefined && updates.deal_probability !== null && (updates.deal_probability < 0 || updates.deal_probability > 1)) {\n        throw new Error(\"Deal probability must be between 0 and 1.\");\n    }\n    if (updates.name !== undefined && (typeof updates.name !== 'string' || updates.name.trim() === '')) { // Added trim check for name\n        throw new Error(\"Invalid type or empty string for stage name update.\");\n    }\n    if (updates.order !== undefined && (updates.order === null || !Number.isInteger(updates.order))) { // Added null check for order\n         throw new Error(\"Invalid type for stage order update, must be an integer.\");\n    }\n\n    const supabase = getAuthenticatedClient(accessToken);\n\n    // Prepare the actual data to be sent for update\n    const updateData: Partial<UpdateStageInput> = { ...updates };\n\n    // Adjust deal_probability based on stage_type, if stage_type is being updated\n    if (updates.stage_type) {\n        if (updates.stage_type === 'WON') { // Assuming 'WON' is the string representation\n            updateData.deal_probability = 1.0;\n        } else if (updates.stage_type === 'LOST') { // Assuming 'LOST'\n            updateData.deal_probability = 0.0;\n        }\n        // If stage_type is 'OPEN':\n        // - If updates.deal_probability was provided, it's already in updateData and will be used.\n        // - If updates.deal_probability was NOT provided, updateData.deal_probability is undefined,\n        //   so the existing DB value for deal_probability won't be changed by this logic.\n        // This behavior is correct.\n    }\n    // If updates.stage_type is not provided, but updates.deal_probability is,\n    // it will be used as is from updateData. This is generally fine, but front-end\n    // should prevent setting arbitrary probabilities on WON/LOST stages.\n\n\n    const { data, error } = await supabase\n        .from('stages')\n        .update(updateData) // Pass the prepared updateData\n        .eq('id', id) \n        .select() \n        .single(); \n\n    handleSupabaseError(error, `updating stage with id ${id}`);\n\n    if (!data) {\n        throw new Error(`Stage with id ${id} not found or update failed.`);\n    }\n    return data as Stage; // CHANGED: Cast to generated Stage\n}\n\n/**\n * Deletes a stage identified by its ID.\n * Ensures the stage belongs to the authenticated user via RLS.\n * Deals associated with this stage will have their stage_id set to NULL due to `ON DELETE SET NULL`.\n * @param accessToken - The user's JWT.\n * @param id - The UUID of the stage to delete.\n * @returns A promise that resolves to true if deletion was successful.\n * @throws Error if deletion fails.\n */\nexport async function deleteStage(accessToken: string, id: string): Promise<boolean> {\n    if (!id) {\n        throw new Error(\"Stage ID is required for deletion.\");\n    }\n\n    const supabase = getAuthenticatedClient(accessToken);\n    const { error, count } = await supabase\n        .from('stages')\n        .delete({ count: 'exact' }) \n        .eq('id', id); \n\n    handleSupabaseError(error, `deleting stage with id ${id}`);\n\n    console.log(`Stage delete operation for id ${id}: count=${count}`);\n    return true; \n} ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/supabaseClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/lib/userProfileService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SupabaseClient' is defined but never used.","line":4,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":41,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":45,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":41,"column":54,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":45,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":41,"column":54,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":44,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":41,"column":54,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":43,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":41,"column":54,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":42,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":42,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":43,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":44,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .single on an `error` typed value.","line":45,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `error` typed value.","line":48,"column":137,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":144},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":54,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":60,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":60,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":60,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":63,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":67,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":63,"column":60,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":67,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":63,"column":60,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":66,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":63,"column":60,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":65,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":63,"column":60,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":64,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":64,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":65,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":66,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .maybeSingle on an `error` typed value.","line":67,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `error` typed value.","line":70,"column":145,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":152},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":81,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":81,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .display_name on an `error` typed value.","line":81,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":82,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":82,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar_url on an `error` typed value.","line":82,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":83,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":83,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":102,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":102,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":102,"column":33,"nodeType":"Identifier","messageId":"unsafeCall","endLine":102,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":104,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":108,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":104,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":108,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":104,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":107,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":104,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":106,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":104,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":105,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":105,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":106,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":107,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":107,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .maybeSingle on an `error` typed value.","line":108,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `error` typed value.","line":111,"column":78,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":111,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `error` typed value.","line":112,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .display_name on an `error` typed value.","line":143,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":143,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":144,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":144,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .display_name on an `error` typed value.","line":144,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar_url on an `error` typed value.","line":146,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":147,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":147,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar_url on an `error` typed value.","line":147,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .display_name on an `error` typed value.","line":155,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar_url on an `error` typed value.","line":156,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":170,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":170,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":170,"column":33,"nodeType":"Identifier","messageId":"unsafeCall","endLine":170,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":174,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":178,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":174,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":178,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":174,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":177,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":174,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":176,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":174,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":175,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":175,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":175,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upsert on an `error` typed value.","line":176,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":176,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":177,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .single on an `error` typed value.","line":178,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":178,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `error` typed value.","line":181,"column":78,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `error` typed value.","line":182,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":182,"endColumn":68}],"suppressedMessages":[],"errorCount":63,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from './supabaseClient';\nimport type { UpdateUserProfileInput } from './generated/graphql'; // Adjust path as necessary based on final codegen output location\nimport { getAuthenticatedClient } from './serviceUtils'; // ADDED: Import for authenticated client\nimport type { SupabaseClient } from '@supabase/supabase-js'; // ADDED: For type safety\n\n// Interface representing the structure in the user_profiles table\nexport interface DbUserProfile {\n  user_id: string;\n  display_name: string | null;\n  avatar_url: string | null;\n  email?: string | null; // Added optional email\n  created_at: string; // Assuming TIMESTAMPTZ is stringified\n  updated_at: string;\n}\n\n// New interface for the combined data\nexport interface ServiceLevelUserProfile {\n    user_id: string;\n    display_name: string | null;\n    avatar_url: string | null;\n    email: string; // Email is expected to be non-null from auth.users\n}\n\n/**\n * Fetches a user's profile (display_name, avatar_url) from user_profiles table\n * AND their email from auth.users table.\n * This function is intended for service-level backend use, using the default/service Supabase client.\n * @param userId The UUID of the user.\n * @returns Combined profile and email data, or null if user or profile not found. Email is non-null if user found.\n */\nexport const getServiceLevelUserProfileData = async (userId: string): Promise<ServiceLevelUserProfile | null> => {\n  if (!userId) {\n    console.warn('[userProfileService] getServiceLevelUserProfileData: User ID is required.');\n    return null;\n  }\n\n  console.log(`[userProfileService] getServiceLevelUserProfileData: Fetching data for user_id: ${userId}`);\n\n  // Fetch email from auth.users table\n  // Assuming 'supabase' client has appropriate (e.g. service_role) permissions\n  const { data: authUser, error: authError } = await supabase\n    .from('users') // Correct table name in auth schema is 'users'\n    .select('email')\n    .eq('id', userId)\n    .single();\n\n  if (authError) {\n    console.error(`[userProfileService] getServiceLevelUserProfileData: Error fetching email from auth.users for ${userId}:`, authError.message);\n    // Don't throw, allow profile fetching to proceed if desired, or return null\n    // For now, if email can't be fetched, we can't satisfy GraphQL User.email!\n    return null;\n  }\n\n  if (!authUser || !authUser.email) {\n    console.warn(`[userProfileService] getServiceLevelUserProfileData: User not found in auth.users or email is null for ${userId}.`);\n    // This is critical if GraphQL User.email is non-nullable.\n    return null; \n  }\n\n  const email = authUser.email;\n\n  // Fetch display_name and avatar_url from user_profiles table\n  const { data: profileData, error: profileError } = await supabase\n    .from('user_profiles')\n    .select('display_name, avatar_url')\n    .eq('user_id', userId)\n    .maybeSingle();\n\n  if (profileError) {\n    console.error(`[userProfileService] getServiceLevelUserProfileData: Error fetching profile from user_profiles for ${userId}:`, profileError.message);\n    // If profile fetch fails but email was found, decide on behavior.\n    // For now, consider it a failure to construct the full object.\n    return null;\n  }\n\n  // profileData can be null if the user has an auth.users entry but no user_profiles entry yet.\n  // This is acceptable; display_name and avatar_url will be null in that case.\n\n  return {\n    user_id: userId,\n    display_name: profileData?.display_name || null,\n    avatar_url: profileData?.avatar_url || null,\n    email: email, // Email is guaranteed non-null if we reached here\n  };\n};\n\n/**\n * Fetches a user's profile from the user_profiles table.\n * @param userId The UUID of the user.\n * @param accessToken The access token for authenticated operations.\n * @returns The user profile data or null if not found.\n */\nexport const getUserProfile = async (userId: string, accessToken: string): Promise<DbUserProfile | null> => {\n  if (!userId) {\n    throw new Error('User ID is required to fetch a profile.');\n  }\n  if (!accessToken) {\n    throw new Error('Access token is required to fetch a profile.');\n  }\n\n  console.log(`[userProfileService] Fetching profile for user_id: ${userId} using token.`);\n  const authenticatedSupabase = getAuthenticatedClient(accessToken);\n\n  const { data, error } = await authenticatedSupabase\n    .from('user_profiles')\n    .select('*')\n    .eq('user_id', userId)\n    .maybeSingle(); // Use maybeSingle() if you expect at most one row\n\n  if (error) {\n    console.error('[userProfileService] Error fetching user profile:', error.message);\n    throw new Error(`Failed to fetch user profile: ${error.message}`);\n  }\n\n  console.log(`[userProfileService] Fetched profile data for ${userId}:`, data);\n  return data as DbUserProfile | null;\n};\n\n/**\n * Creates or updates a user's profile in the user_profiles table.\n * If a profile for the user_id already exists, it will be updated.\n * If not, a new profile will be inserted.\n * Only non-null fields from the input will be used for the update.\n * @param userId The UUID of the user.\n * @param input The profile data to update.\n * @param accessToken The access token for authenticated operations.\n * @returns The updated or created user profile data.\n */\nexport const updateUserProfile = async (\n  userId: string,\n  input: UpdateUserProfileInput,\n  accessToken: string // ADDED: accessToken parameter\n): Promise<DbUserProfile> => {\n  if (!userId) {\n    throw new Error('User ID is required to update a profile.');\n  }\n  if (!accessToken) { // ADDED: Check for accessToken\n    throw new Error('Access token is required to update a profile.');\n  }\n\n  // Construct the object with fields to update. Allow explicit nulls to clear fields.\n  const updateData: Partial<Pick<DbUserProfile, 'display_name' | 'avatar_url'>> = {};\n  if (input.display_name !== undefined) { // If display_name is provided in input (even if null)\n    updateData.display_name = input.display_name;\n  }\n  if (input.avatar_url !== undefined) { // If avatar_url is provided in input (even if null)\n    updateData.avatar_url = input.avatar_url;\n  }\n\n  // If there's nothing to update (e.g. input object was empty, not just fields being nullified).\n  // This check might need refinement based on how `UpdateUserProfileInput` is structured\n  // and whether an empty input implies no-op or clearing all optional fields.\n  // For now, if `input` had properties (even if they were null), `updateData` won't be empty.\n  if (Object.keys(updateData).length === 0 && \n      input.display_name === undefined && \n      input.avatar_url === undefined) {\n    console.log(`[userProfileService] No recognized fields in input for user_id: ${userId}. Fetching current profile.`);\n    const currentProfile = await getUserProfile(userId, accessToken);\n    if (currentProfile) {\n      return currentProfile;\n    }\n    // If no current profile and nothing to update, this case might need specific handling.\n    // For now, we'll proceed to upsert, which will insert with user_id and defaults if it's an empty updateData.\n    // However, our RLS for INSERT requires user_id to match auth.uid().\n    // Supabase upsert with { onConflict: 'user_id' } will attempt an INSERT if no row matches user_id.\n  }\n\n  console.log(`[userProfileService] Updating profile for user_id: ${userId} with data:`, updateData);\n\n  const authenticatedSupabase = getAuthenticatedClient(accessToken); // ADDED: Get authenticated client\n\n  // Upsert operation: update if exists, insert if not.\n  // RLS policies will ensure the user can only affect their own row.\n  const { data, error } = await authenticatedSupabase // CHANGED: use authenticatedSupabase\n    .from('user_profiles')\n    .upsert({ user_id: userId, ...updateData })\n    .select()\n    .single(); // Expect a single row to be returned after upsert\n\n  if (error) {\n    console.error('[userProfileService] Error updating user profile:', error.message);\n    throw new Error(`Failed to update user profile: ${error.message}`);\n  }\n\n  if (!data) {\n    console.error('[userProfileService] No data returned after upsert for user_id:', userId);\n    throw new Error('Failed to update user profile: no data returned.');\n  }\n\n  console.log(`[userProfileService] Successfully updated profile for ${userId}:`, data);\n  return data as DbUserProfile;\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'allSchemaFiles' is assigned a value but never used.","line":39,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":110,"column":3,"nodeType":"Property","messageId":"anyAssignment","endLine":115,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":116,"column":3,"nodeType":"Property","messageId":"anyAssignment","endLine":120,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":121,"column":3,"nodeType":"Property","messageId":"anyAssignment","endLine":121,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":122,"column":3,"nodeType":"Property","messageId":"anyAssignment","endLine":122,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":123,"column":3,"nodeType":"Property","messageId":"anyAssignment","endLine":123,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":124,"column":3,"nodeType":"Property","messageId":"anyAssignment","endLine":124,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":125,"column":3,"nodeType":"Property","messageId":"anyAssignment","endLine":125,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":126,"column":3,"nodeType":"Property","messageId":"anyAssignment","endLine":126,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":127,"column":3,"nodeType":"Property","messageId":"anyAssignment","endLine":127,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":140,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":140,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":140,"column":24,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":140,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .request on an `error` typed value.","line":140,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":141,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":141,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .startsWith on an `error` typed value.","line":141,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":142,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":142,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":142,"column":15,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":142,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .substring on an `error` typed value.","line":142,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":142,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":147,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":147,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":147,"column":60,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":147,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `error` typed value.","line":147,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `error` typed value.","line":150,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":150,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":152,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":152,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":158,"column":25,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":158,"endColumn":40}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createYoga, createSchema } from 'graphql-yoga';\nimport type { Handler, HandlerContext } from '@netlify/functions';\nimport type { User } from '@supabase/supabase-js';\nimport { supabase } from '../../lib/supabaseClient';\nimport fs from 'fs';\nimport path from 'path';\nimport { createClient } from '@supabase/supabase-js';\n\nimport {\n  GraphQLContext, \n} from './graphql/helpers'; \n\nimport { \n} from './graphql/validators';\n\nimport { Query as BaseQuery } from './graphql/resolvers/query';\nimport { Mutation as BaseMutation } from './graphql/resolvers/mutation';\nimport { Person } from './graphql/resolvers/person';\nimport { Deal } from './graphql/resolvers/deal';\nimport { Organization } from './graphql/resolvers/organization';\nimport { Stage } from './graphql/resolvers/stage';\nimport {\n  Activity,\n  Query as ActivityQuery,\n  Mutation as ActivityMutation\n} from './graphql/resolvers/activity';\nimport { DealHistoryEntry } from './graphql/resolvers/history';\nimport {\n  queryResolvers as CustomFieldQueryResolvers,\n  mutationResolvers as CustomFieldMutationResolvers,\n} from './graphql/resolvers/customFields';\nimport { Query as PricingQuery, PriceQuoteResolver } from './graphql/resolvers/pricing';\n\nconst loadTypeDefs = (): string => {\n  const schemaDir = path.join(process.cwd(), 'netlify/functions/graphql/schema');\n\n  // List of all your .graphql schema files in the schema directory\n  // Ensure this list is accurate and complete.\n  const allSchemaFiles = [\n    'activity.graphql', \n    'base.graphql', \n    'customFields.graphql', \n    'deal.graphql', \n    'enums.graphql', \n    'history.graphql', \n    'organization.graphql', \n    'person.graphql', \n    'pipeline.graphql', \n    'pricing.graphql', \n    'scalars.graphql', \n    'schema.graphql', \n    'stage.graphql', \n    'user.graphql', \n    'user_profile.graphql'\n  ];\n\n  // !!! --- DEBUGGING: SELECT FILES TO LOAD --- !!!\n  // To debug, comment out files from this list to try and isolate the problematic one.\n  // Start by commenting out half, then a quarter, etc. (binary search).\n  // Example: load only a few critical files to see if the base schema works.\n  const filesToLoad = [\n    'activity.graphql', \n    'base.graphql', \n    'customFields.graphql', \n    'deal.graphql', \n    'enums.graphql', \n    'history.graphql', \n    'organization.graphql', \n    'person.graphql', \n    'pipeline.graphql', \n    'pricing.graphql', \n    'scalars.graphql', \n    'schema.graphql', \n    'stage.graphql', \n    'user.graphql', \n    'user_profile.graphql'\n    // To test with a minimal set, you might try just:\n    // 'scalars.graphql',\n    // 'base.graphql', // Defines Query, Mutation\n    // 'user.graphql', // Defines User type for base.graphql\n    // 'activity.graphql', // Extends Query/Mutation\n  ];\n\n  try {\n    // const files = fs.readdirSync(schemaDir); // Original way\n    let typeDefs = '';\n    // files.forEach(file => { // Original way\n    filesToLoad.forEach(file => { // Modified to use the selective list\n      // if (file.endsWith('.graphql')) { // No longer needed as filesToLoad is explicit\n        typeDefs += fs.readFileSync(path.join(schemaDir, file), 'utf-8') + '\\n';\n      // }\n    });\n    console.log('Concatenated GraphQL Schema (potentially partial if filesToLoad is modified):\\n', typeDefs);\n    return typeDefs;\n  } catch (error: unknown) {\n      console.error(\"Failed to load GraphQL schema files:\", error);\n      let message = \"Unknown error loading schema\";\n      if (error instanceof Error) {\n        message = error.message;\n      }\n      throw new Error(`Failed to load GraphQL schema files: ${message}`);\n  }\n};\n\nconst loadedTypeDefs = loadTypeDefs();\n\nexport type { GraphQLContext };\n\nexport const resolvers = {\n  Query: {\n    ...BaseQuery,\n    ...ActivityQuery,\n    ...CustomFieldQueryResolvers,\n    ...PricingQuery,\n  },\n  Mutation: {\n    ...BaseMutation,\n    ...ActivityMutation,\n    ...CustomFieldMutationResolvers,\n  },\n  Person,\n  Deal,\n  Organization,\n  Stage,\n  Activity,\n  DealHistoryEntry,\n  PriceQuote: PriceQuoteResolver,\n}; \n\nconst yoga = createYoga<GraphQLContext>({\n  schema: createSchema({\n    typeDefs: loadedTypeDefs,\n    resolvers,\n  }),\n  context: async (initialContext): Promise<GraphQLContext> => {\n    let currentUser: User | null = null;\n    let token: string | null = null;\n    let userPermissions: string[] | null = null;\n    \n    const authHeader = initialContext.request.headers.get('authorization');\n    if (authHeader?.startsWith('Bearer ')) {\n      token = authHeader.substring(7);\n    }\n\n    if (token) {\n      try {\n        const { data: { user }, error: userError } = await supabase.auth.getUser(token);\n        \n        if (userError) {\n          console.warn('Error fetching user from token:', userError.message);\n        } else if (user) {\n          currentUser = user;\n          \n          const authenticatedSupabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_ANON_KEY!, {\n              global: { headers: { Authorization: `Bearer ${token}` } },\n          });\n          \n          const { data: permissionsData, error: permissionsError } = await authenticatedSupabase.rpc('get_my_permissions');\n\n          if (permissionsError) {\n            console.error('Error fetching user permissions:', permissionsError.message);\n            userPermissions = null; \n          } else {\n            userPermissions = Array.isArray(permissionsData) && permissionsData.every(p => typeof p === 'string') \n              ? permissionsData \n              : [];\n          }\n        }\n      } catch (err) {\n        console.error('Unexpected error during user/permission fetching:', err);\n        currentUser = null;\n        userPermissions = null;\n      }\n    }\n\n    return {\n      ...initialContext, \n      currentUser,\n      token,\n      userPermissions,\n    };\n  },\n  graphqlEndpoint: '/.netlify/functions/graphql',\n  healthCheckEndpoint: '/.netlify/functions/graphql/health',\n  landingPage: process.env.NODE_ENV !== 'production',\n});\n\nexport const handler: Handler = async (event, _: HandlerContext) => {\n  try {\n    const url = new URL(event.path, `http://${event.headers.host || 'localhost'}`);\n\n  const response = await yoga.fetch(\n      url,\n    {\n      method: event.httpMethod,\n      headers: event.headers as HeadersInit,\n      body: event.body ? Buffer.from(event.body, event.isBase64Encoded ? 'base64' : 'utf8') : undefined,\n      }\n  );\n\n  const responseHeaders: { [key: string]: string } = {};\n  response.headers.forEach((value, key) => {\n    responseHeaders[key] = value;\n  });\n\n  return {\n    statusCode: response.status,\n    headers: responseHeaders,\n    body: await response.text(),\n      isBase64Encoded: false,\n    };\n  } catch (error: unknown) {\n    console.error(\"Error in GraphQL handler:\", error);\n    let message = \"Internal Server Error\";\n    if (error instanceof Error) {\n      message = error.message;\n    } else if (typeof error === 'string') {\n      message = error;\n    } else if (typeof error === 'object' && error !== null && 'message' in error && typeof (error as {message: unknown}).message === 'string') {\n      message = (error as {message: string}).message;\n    }\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ message }),\n      headers: { \"Content-Type\": \"application/json\" },\n    };\n  }\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/activity.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_id on an `any` value.","line":48,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_id on an `any` value.","line":49,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":49,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":51,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":51,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":51,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":51,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":53,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":53,"endColumn":102},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":53,"column":34,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":53,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getDealById on an `error` typed value.","line":53,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `any` value.","line":53,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_id on an `any` value.","line":53,"column":81,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":55,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":64,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":56,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":56,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":56,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":56,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":57,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":57,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":57,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":57,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":58,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":58,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":58,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":59,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":59,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":59,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":60,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":60,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .person_id on an `error` typed value.","line":60,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":61,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":61,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":61,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":61,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":62,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":62,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":62,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":63,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":63,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":63,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .person_id on an `any` value.","line":71,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .person_id on an `any` value.","line":72,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":72,"column":81,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":74,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":74,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":74,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":74,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":76,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":76,"endColumn":110},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":76,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":76,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPersonById on an `error` typed value.","line":76,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `any` value.","line":76,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .person_id on an `any` value.","line":76,"column":87,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":96},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":78,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":89,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":79,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":79,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":79,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":80,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":80,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .first_name on an `error` typed value.","line":80,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":81,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":81,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .last_name on an `error` typed value.","line":81,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":82,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":82,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":82,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":83,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":83,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .phone on an `error` typed value.","line":83,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":84,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":84,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `error` typed value.","line":84,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":85,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":85,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .organization_id on an `error` typed value.","line":85,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":85,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":86,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":86,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":86,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":87,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":87,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":87,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":88,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":88,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":88,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .organization_id on an `any` value.","line":96,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .organization_id on an `any` value.","line":97,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":97,"column":93,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":95},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":99,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":99,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":99,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":99,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":101,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":101,"endColumn":125},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":101,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":101,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getOrganizationById on an `error` typed value.","line":101,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `any` value.","line":101,"column":80,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .organization_id on an `any` value.","line":101,"column":96,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":111},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":103,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":111,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":104,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":104,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":104,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":105,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":105,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":105,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":106,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":106,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `error` typed value.","line":106,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":107,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":107,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `error` typed value.","line":107,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":107,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":108,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":108,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":108,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":109,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":109,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":109,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":109,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":110,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":110,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":110,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":110,"endColumn":45},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'GraphQLUser' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":117,"column":110,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":117,"endColumn":121},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":125,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":125,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":125,"column":39,"nodeType":"Identifier","messageId":"unsafeCall","endLine":125,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":137,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":137,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":137,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":137,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":138,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":138,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .display_name on an `error` typed value.","line":138,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":139,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":139,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar_url on an `error` typed value.","line":139,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":140,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":140,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":140,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":143,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5975,5978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5975,5978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":144,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":155,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":155,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":156,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":156,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":156,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":156,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":157,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":157,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":157,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":157,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":159,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":159,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":159,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":159,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .parse on an `error` typed value.","line":159,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `any` value.","line":159,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":160,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":160,"endColumn":102},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":160,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":160,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":162,"column":15,"nodeType":"Identifier","messageId":"unsafeCall","endLine":162,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":166,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":166,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":168,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":168,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":169,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":169,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":169,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":169,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":170,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":170,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":170,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":170,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":170,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":170,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":171,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":171,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":171,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":171,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":171,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":171,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":173,"column":15,"nodeType":"Identifier","messageId":"unsafeCall","endLine":173,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":182,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":182,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":183,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":183,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":183,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":183,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":184,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":184,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":184,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":184,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":184,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":184,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":186,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":186,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":186,"column":39,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":186,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .parse on an `error` typed value.","line":186,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":186,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":186,"column":76,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":186,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":188,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":191,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":190,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":190,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":190,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":192,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":192,"endColumn":91},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":192,"column":35,"nodeType":"Identifier","messageId":"unsafeCall","endLine":192,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":194,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":198,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":194,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":194,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .send on an `error` typed value.","line":194,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":194,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":196,"column":19,"nodeType":"Property","messageId":"anyAssignment","endLine":196,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":196,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8256,8259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8256,8259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":197,"column":19,"nodeType":"Property","messageId":"anyAssignment","endLine":197,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":197,"column":31,"nodeType":"Property","messageId":"anyAssignment","endLine":197,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":197,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":197,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":197,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":197,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .catch on an `error` typed value.","line":198,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":200,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":200,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":202,"column":15,"nodeType":"Identifier","messageId":"unsafeCall","endLine":202,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":206,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":206,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":208,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":208,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":209,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":209,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":209,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":209,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":210,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":210,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":210,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":210,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":210,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":210,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":212,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":212,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":212,"column":39,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":212,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .parse on an `error` typed value.","line":212,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":212,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":212,"column":76,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":212,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":214,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":218,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":217,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":217,"endColumn":109},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":217,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":217,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":217,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":217,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":219,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":219,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":219,"column":39,"nodeType":"Identifier","messageId":"unsafeCall","endLine":219,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":219,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":219,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":221,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":225,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":221,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":221,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .send on an `error` typed value.","line":221,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":221,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":223,"column":19,"nodeType":"Property","messageId":"anyAssignment","endLine":223,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":223,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9566,9569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9566,9569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":224,"column":19,"nodeType":"Property","messageId":"anyAssignment","endLine":224,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":224,"column":31,"nodeType":"Property","messageId":"anyAssignment","endLine":224,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":224,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":224,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":224,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":224,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .catch on an `error` typed value.","line":225,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":225,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":227,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":227,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":229,"column":15,"nodeType":"Identifier","messageId":"unsafeCall","endLine":229,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":233,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":233,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":235,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":235,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":236,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":236,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":236,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":236,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":237,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":237,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":237,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":237,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":237,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":237,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":239,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":239,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":239,"column":30,"nodeType":"Identifier","messageId":"unsafeCall","endLine":239,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":239,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":239,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":241,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":245,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":241,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":241,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .send on an `error` typed value.","line":241,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":241,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":243,"column":19,"nodeType":"Property","messageId":"anyAssignment","endLine":243,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":243,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":243,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":244,"column":19,"nodeType":"Property","messageId":"anyAssignment","endLine":244,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":244,"column":31,"nodeType":"Property","messageId":"anyAssignment","endLine":244,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":244,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":244,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":244,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":244,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .catch on an `error` typed value.","line":245,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":245,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":247,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":247,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":247,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":247,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":249,"column":15,"nodeType":"Identifier","messageId":"unsafeCall","endLine":249,"endColumn":30}],"suppressedMessages":[],"errorCount":200,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GraphQLContext, getAccessToken, requireAuthentication, processZodError } from '../helpers';\nimport {\n  CreateActivityInputSchema,\n  UpdateActivityInputSchema,\n  ActivityFilterInputSchema\n} from '../validators';\nimport { \n    createActivity as createActivityService,\n    getActivities as getActivitiesService,\n    getActivityById as getActivityByIdService,\n    updateActivity as updateActivityService,\n    deleteActivity as deleteActivityService \n} from '../../../../lib/activityService';\nimport { inngest } from '../../../../lib/inngestClient';\n\n// Import service objects for resolving linked entities\nimport { dealService } from '../../../../lib/dealService';\nimport { personService } from '../../../../lib/personService';\nimport { organizationService } from '../../../../lib/organizationService';\nimport { getServiceLevelUserProfileData } from '../../../../lib/userProfileService';\n\n// Correctly import types from our backend generated types\nimport type { \n    ActivityResolvers,\n    QueryResolvers,\n    MutationResolvers,\n    Activity as GraphQLActivity,\n    Deal as GraphQLDeal,\n    Person as GraphQLPerson,\n    Organization as GraphQLOrganization,\n    User as GraphQLUser,\n    CreateActivityInput as GraphQLCreateActivityInput,\n    UpdateActivityInput as GraphQLUpdateActivityInput,\n    ActivityType as GraphQLActivityType\n} from '../../../../lib/generated/graphql';\n\n// REMOVE: Manual Parent Type, will be inferred\n// interface ActivityParent {\n//   id: string; \n//   user_id: string; \n//   deal_id?: string | null;\n//   person_id?: string | null;\n//   organization_id?: string | null;\n// }\n\nexport const Activity: ActivityResolvers<GraphQLContext> = {\n    deal: async (parent, _args, context) => {\n      if (!parent.deal_id) return null;\n      const action = `fetching deal ${parent.deal_id} for activity ${parent.id}`;\n      try {\n        const accessToken = getAccessToken(context);\n        if (!accessToken) return null;\n        const dealRecord = await dealService.getDealById(parent.user_id, parent.deal_id, accessToken);\n        if (!dealRecord) return null;\n        return { /* Map DealRecord to GraphQLDeal */ \n            id: dealRecord.id,\n            name: dealRecord.name,\n            amount: dealRecord.amount,\n            stage_id: dealRecord.stage_id,\n            person_id: dealRecord.person_id,\n            user_id: dealRecord.user_id,\n            created_at: dealRecord.created_at,\n            updated_at: dealRecord.updated_at,\n        } as GraphQLDeal;\n      } catch (e) {\n        console.error(`Error ${action}:`, e);\n        return null; \n      }\n    },\n    person: async (parent, _args, context) => {\n      if (!parent.person_id) return null;\n      const action = `fetching person ${parent.person_id} for activity ${parent.id}`;\n      try {\n        const accessToken = getAccessToken(context);\n        if (!accessToken) return null;\n        const personRecord = await personService.getPersonById(parent.user_id, parent.person_id, accessToken);\n        if (!personRecord) return null;\n        return { /* Map PersonRecord to GraphQLPerson */ \n            id: personRecord.id,\n            first_name: personRecord.first_name,\n            last_name: personRecord.last_name,\n            email: personRecord.email,\n            phone: personRecord.phone,\n            notes: personRecord.notes,\n            organization_id: personRecord.organization_id,\n            user_id: personRecord.user_id,\n            created_at: personRecord.created_at,\n            updated_at: personRecord.updated_at,\n        } as GraphQLPerson;\n      } catch (e) {\n        console.error(`Error ${action}:`, e);\n        return null;\n      }\n    },\n    organization: async (parent, _args, context) => {\n      if (!parent.organization_id) return null;\n      const action = `fetching organization ${parent.organization_id} for activity ${parent.id}`;\n      try {\n        const accessToken = getAccessToken(context);\n        if (!accessToken) return null;\n        const orgRecord = await organizationService.getOrganizationById(parent.user_id, parent.organization_id, accessToken);\n        if (!orgRecord) return null;\n        return { /* Map OrganizationRecord to GraphQLOrganization */ \n            id: orgRecord.id,\n            name: orgRecord.name,\n            address: orgRecord.address,\n            notes: orgRecord.notes,\n            user_id: orgRecord.user_id,\n            created_at: orgRecord.created_at,\n            updated_at: orgRecord.updated_at,\n        } as GraphQLOrganization;\n      } catch (e) {\n        console.error(`Error ${action}:`, e);\n        return null;\n      }\n    },\n    user: async (parent: { id: string, user_id: string }, _args: unknown, _context: GraphQLContext): Promise<GraphQLUser | null> => {\n      if (!parent.user_id) {\n        console.warn(`[ActivityResolver] Activity ${parent.id} has no user_id`);\n        return null;\n      }\n      const action = `[ActivityResolver] Fetching user ${parent.user_id} for activity ${parent.id}`;\n      try {\n        // Call the new service function which uses a service-level client\n        const userProfileData = await getServiceLevelUserProfileData(parent.user_id);\n\n        if (!userProfileData) {\n          console.warn(`${action}: User profile data not found for user_id ${parent.user_id}.`);\n          // HIST-001: Consider how to represent deleted/missing users.\n          // For now, returning null. Frontend can display 'Unknown User' or handle as needed.\n          return null; \n        }\n        \n        // userProfileData contains: user_id, display_name, avatar_url, email (non-null)\n        // Map to GraphQLUser type\n        return {\n            id: userProfileData.user_id, \n            display_name: userProfileData.display_name,\n            avatar_url: userProfileData.avatar_url,\n            email: userProfileData.email, // This should now be correctly populated and non-null\n        } as GraphQLUser; // Cast might not be needed if types align perfectly\n\n      } catch (e: any) {\n        console.error(`Error ${action}:`, e.message);\n        // It's important not to throw here typically, as it might break entire list queries if one user fails.\n        return null; \n      }\n    },\n};\n\nexport const Query: QueryResolvers<GraphQLContext> = {\n    activities: async (_parent, args, context) => {\n      const action = 'fetching activities';\n      try {\n        requireAuthentication(context); \n        const accessToken = getAccessToken(context)!; \n        const userId = context.currentUser!.id;\n        // Assuming args.filter is now correctly typed as Maybe<ActivityFilterInput>\n        const validatedFilter = ActivityFilterInputSchema.parse(args.filter || {});\n        return await getActivitiesService(userId, accessToken, validatedFilter) as GraphQLActivity[]; // Cast service result\n      } catch (error) {\n        throw processZodError(error, action);\n      }\n    },\n    activity: async (_parent, args, context) => { // args type will be { id: string }\n      const action = `fetching activity by ID ${args.id}`;\n      try {\n        requireAuthentication(context);\n        const accessToken = getAccessToken(context)!;\n        const userId = context.currentUser!.id;\n        return await getActivityByIdService(userId, args.id, accessToken); // Cast service result\n      } catch (error) {\n        throw processZodError(error, action);\n      }\n    },\n};\n\nexport const Mutation: MutationResolvers<GraphQLContext> = {\n    createActivity: async (_parent, args, context) => { \n      const action = 'creating activity';\n      try {\n        requireAuthentication(context);\n        const accessToken = getAccessToken(context)!;\n        const userId = context.currentUser!.id;\n\n        const validatedInputFromZod = CreateActivityInputSchema.parse(args.input);\n        // Cast the Zod output to the shape expected by the service, especially for the enum\n        const serviceInput: GraphQLCreateActivityInput = {\n            ...validatedInputFromZod,\n            type: validatedInputFromZod.type as GraphQLActivityType, // Cast string to enum type\n        };\n        const newActivity = await createActivityService(userId, serviceInput, accessToken);\n\n        inngest.send({\n          name: 'crm/activity.created',\n          data: { activity: newActivity as any }, // Inngest might not know GraphQLActivity type\n          user: { id: userId, email: context.currentUser!.email! }\n        }).catch((err: unknown) => console.error('Failed to send activity.created event to Inngest:', err));\n\n        return newActivity as GraphQLActivity; // Cast service result\n      } catch (error) {\n        throw processZodError(error, action);\n      }\n    },\n    updateActivity: async (_parent, args, context) => { \n      const action = `updating activity ${args.id}`;\n      try {\n        requireAuthentication(context);\n        const accessToken = getAccessToken(context)!;\n        const userId = context.currentUser!.id;\n\n        const validatedInputFromZod = UpdateActivityInputSchema.parse(args.input);\n        // Cast the Zod output to the shape expected by the service\n        const serviceInput: GraphQLUpdateActivityInput = {\n            ...validatedInputFromZod,\n            // Type is optional in UpdateActivityInput, handle if present\n            type: validatedInputFromZod.type ? validatedInputFromZod.type as GraphQLActivityType : undefined,\n        };\n        const updatedActivity = await updateActivityService(userId, args.id, serviceInput, accessToken);\n\n        inngest.send({\n          name: 'crm/activity.updated',\n          data: { activity: updatedActivity as any }, // Inngest might not know GraphQLActivity type\n          user: { id: userId, email: context.currentUser!.email! }\n        }).catch((err: unknown) => console.error('Failed to send activity.updated event to Inngest:', err));\n\n        return updatedActivity as GraphQLActivity; // Cast service result\n      } catch (error) {\n        throw processZodError(error, action);\n      }\n    },\n    deleteActivity: async (_parent, args, context) => { // args type will be { id: string }\n      const action = `deleting activity ${args.id}`;\n      try {\n        requireAuthentication(context);\n        const accessToken = getAccessToken(context)!;\n        const userId = context.currentUser!.id;\n\n        const result = await deleteActivityService(userId, args.id, accessToken);\n\n        inngest.send({\n          name: 'crm/activity.deleted',\n          data: { activityId: args.id }, // Ensure id is passed correctly\n          user: { id: userId, email: context.currentUser!.email! }\n        }).catch((err: unknown) => console.error('Failed to send activity.deleted event to Inngest:', err));\n\n        return result.id; // This matches the schema (returns ID!)\n      } catch (error) {\n        throw processZodError(error, action);\n      }\n    },\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/customFields.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":23,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":23,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an error typed value.","line":24,"column":15,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":24,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":25,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":25,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":25,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":25,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":25,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":25,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getCustomFieldDefinitions on an `error` typed value.","line":28,"column":80,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":28,"endColumn":105},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":35,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":39,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":35,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":35,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getCustomFieldDefinitions on an `error` typed value.","line":35,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":50,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":50,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2996,2999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2996,2999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":53,"column":97,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stack on an `any` value.","line":53,"column":112,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":117},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extensions on an `any` value.","line":53,"column":125,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":135},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":59,"column":81,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extensions on an `any` value.","line":61,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":61,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":62,"column":28,"nodeType":"Property","messageId":"anyAssignment","endLine":62,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":62,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":62,"column":52,"nodeType":"Property","messageId":"anyAssignment","endLine":62,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stack on an `any` value.","line":62,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":70},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'customFieldDefinition' has no 'await' expression.","line":67,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":67,"endColumn":32,"suggestions":[{"messageId":"removeAsync","fix":{"range":[3722,3855],"text":"(\n    _parent: unknown,\n    args: { id: string },\n    context: GraphQLContext\n  ): GraphQLCustomFieldDefinition | null"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'GraphQLCustomFieldDefinition' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":71,"column":14,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":71,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":72,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":72,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":74,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":74,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":74,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":74,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":74,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":77,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":77,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getCustomFieldDefinitionById on an `error` typed value.","line":77,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":69},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'createCustomFieldDefinition' has no 'await' expression.","line":88,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":88,"endColumn":38,"suggestions":[{"messageId":"removeAsync","fix":{"range":[4392,4548],"text":"(\n    _parent: unknown,\n    args: { input: GraphQLCustomFieldDefinitionInput },\n    context: GraphQLContext\n  ): GraphQLCustomFieldDefinition"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":93,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":93,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an error typed value.","line":95,"column":13,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":95,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":96,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":96,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":96,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":96,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":96,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":97,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":97,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentUser' is assigned a value but never used.","line":97,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":97,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":101,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":101,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createCustomFieldDefinition on an `error` typed value.","line":101,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":68},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'updateCustomFieldDefinition' has no 'await' expression.","line":103,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":103,"endColumn":38,"suggestions":[{"messageId":"removeAsync","fix":{"range":[5119,5287],"text":"(\n    _parent: unknown,\n    args: { id: string; input: GraphQLCustomFieldDefinitionInput },\n    context: GraphQLContext\n  ): GraphQLCustomFieldDefinition"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":108,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":108,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an error typed value.","line":110,"column":17,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":110,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":111,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":111,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":111,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":111,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":111,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":112,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":112,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentUser' is assigned a value but never used.","line":112,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":112,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":112,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":115,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":115,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updateCustomFieldDefinition on an `error` typed value.","line":115,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":115,"endColumn":68},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'deactivateCustomFieldDefinition' has no 'await' expression.","line":117,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":117,"endColumn":42,"suggestions":[{"messageId":"removeAsync","fix":{"range":[5744,5870],"text":"(\n    _parent: unknown,\n    args: { id: string },\n    context: GraphQLContext\n  ): GraphQLCustomFieldDefinition"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":122,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":122,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":125,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":125,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":125,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":125,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":125,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":125,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":126,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":126,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentUser' is assigned a value but never used.","line":126,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":126,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":129,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":129,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .setCustomFieldDefinitionActiveStatus on an `error` typed value.","line":129,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":129,"endColumn":77},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'reactivateCustomFieldDefinition' has no 'await' expression.","line":131,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":131,"endColumn":42,"suggestions":[{"messageId":"removeAsync","fix":{"range":[6318,6444],"text":"(\n    _parent: unknown,\n    args: { id: string },\n    context: GraphQLContext\n  ): GraphQLCustomFieldDefinition"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":136,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":136,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":139,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":139,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":139,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":139,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":139,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":140,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":140,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentUser' is assigned a value but never used.","line":140,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":140,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":140,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":143,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":143,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .setCustomFieldDefinitionActiveStatus on an `error` typed value.","line":143,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":143,"endColumn":77}],"suppressedMessages":[],"errorCount":70,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GraphQLError } from 'graphql';\nimport type {\n  // CustomFieldDefinitionResolvers, // For field-level resolvers on CustomFieldDefinition type\n  MutationResolvers,\n  QueryResolvers,\n  CustomFieldDefinition as GraphQLCustomFieldDefinition,\n  CustomFieldDefinitionInput as GraphQLCustomFieldDefinitionInput,\n  CustomFieldEntityType as GraphQLCustomFieldEntityType,\n  // CustomFieldValue as GraphQLCustomFieldValue, // Not directly used as return type here yet\n} from '../../../../lib/generated/graphql'; // Reverted to original path\nimport { requireAuthentication, GraphQLContext } from '../helpers'; // Common helpers\nimport { getAuthenticatedClient } from '../../../../lib/serviceUtils'; // Reverted to original path\nimport * as customFieldDefinitionService from '../../../../lib/customFieldDefinitionService'; // To be created, path matches others\n\nexport const queryResolvers: Pick<QueryResolvers, 'customFieldDefinitions' | 'customFieldDefinition'> = {\n  customFieldDefinitions: async (\n    _parent: unknown,\n    args: { entityType: GraphQLCustomFieldEntityType; includeInactive?: boolean | null },\n    context: GraphQLContext\n  ): Promise<GraphQLCustomFieldDefinition[]> => {\n    console.log('[Resolver Entry] Query.customFieldDefinitions invoked with args:', args);\n    try {\n      requireAuthentication(context);\n      const { entityType, includeInactive = false } = args;\n      const supabase = getAuthenticatedClient(context.token);\n\n      // Verify that the service and function exist before calling\n      if (!customFieldDefinitionService || typeof customFieldDefinitionService.getCustomFieldDefinitions !== 'function') {\n        console.error(\"[Resolver CRITICAL] customFieldDefinitionService.getCustomFieldDefinitions is not available or not a function!\", customFieldDefinitionService);\n        throw new GraphQLError(\"Critical server configuration error: Custom field definition service is unavailable.\", {\n          extensions: { code: \"SERVICE_UNAVAILABLE\" }\n        });\n      }\n\n      const definitions = await customFieldDefinitionService.getCustomFieldDefinitions(\n        supabase, \n        entityType, \n        includeInactive === null ? undefined : includeInactive\n      );\n\n      // The service is designed to return [] if no data, or throw an error.\n      // It should not return null/undefined if its promise resolves successfully.\n      // If for some reason definitions became null/undefined here, it would cause the non-nullable error.\n      // However, the service function getCustomFieldDefinitions itself is typed to return Promise<GraphQLCustomFieldDefinition[]>.\n      if (definitions == null) { // Defensive check for null or undefined\n        console.error('[Resolver WARNING] customFieldDefinitionService.getCustomFieldDefinitions unexpectedly resolved to null/undefined. Returning empty array. Args:', args);\n        return []; // Return empty array to satisfy non-nullable list schema type\n      }\n      \n      return definitions;\n\n    } catch (error: any) {\n      console.error('[Resolver Error] Query.customFieldDefinitions failed unexpectedly:', error.message, error.stack, error.extensions);\n      // Ensure any caught error is re-thrown as a GraphQLError for consistent error handling\n      if (error instanceof GraphQLError) {\n        throw error; // Re-throw if already a GraphQLError\n      }\n      // Wrap other errors\n      throw new GraphQLError(`Failed to fetch custom field definitions. ${error.message || 'An unexpected error occurred.'}`, {\n        extensions: { \n          code: error.extensions?.code || 'RESOLVER_EXECUTION_ERROR', \n          originalError: { message: error.message, stack: error.stack }\n        },\n      });\n    }\n  },\n  customFieldDefinition: async (\n    _parent: unknown,\n    args: { id: string },\n    context: GraphQLContext\n  ): Promise<GraphQLCustomFieldDefinition | null> => {\n    requireAuthentication(context);\n    const { id } = args;\n    const supabase = getAuthenticatedClient(context.token);\n\n    // console.log(`[Query.customFieldDefinition] Fetching for id: ${id}`);\n    return customFieldDefinitionService.getCustomFieldDefinitionById(supabase, id);\n  },\n};\n\nexport const mutationResolvers: Pick<\n  MutationResolvers,\n  | 'createCustomFieldDefinition'\n  | 'updateCustomFieldDefinition'\n  | 'deactivateCustomFieldDefinition'\n  | 'reactivateCustomFieldDefinition'\n> = {\n  createCustomFieldDefinition: async (\n    _parent: unknown,\n    args: { input: GraphQLCustomFieldDefinitionInput },\n    context: GraphQLContext\n  ): Promise<GraphQLCustomFieldDefinition> => {\n    requireAuthentication(context);\n    // TODO: Add permission check for 'custom_fields:manage_definitions'\n    const { input } = args;\n    const supabase = getAuthenticatedClient(context.token);\n    const currentUser = context.currentUser!;\n\n    // console.log(`[Mutation.createCustomFieldDefinition] User: ${currentUser.id}, Input:`, input);\n    // Permission check for 'custom_fields.manage_definitions' will be handled by RLS or a helper\n    return customFieldDefinitionService.createCustomFieldDefinition(supabase, input);\n  },\n  updateCustomFieldDefinition: async (\n    _parent: unknown,\n    args: { id: string; input: GraphQLCustomFieldDefinitionInput },\n    context: GraphQLContext\n  ): Promise<GraphQLCustomFieldDefinition> => {\n    requireAuthentication(context);\n    // TODO: Add permission check\n    const { id, input } = args;\n    const supabase = getAuthenticatedClient(context.token);\n    const currentUser = context.currentUser!;\n\n    // console.log(`[Mutation.updateCustomFieldDefinition] User: ${currentUser.id}, ID: ${id}, Input:`, input);\n    return customFieldDefinitionService.updateCustomFieldDefinition(supabase, id, input);\n  },\n  deactivateCustomFieldDefinition: async (\n    _parent: unknown,\n    args: { id: string },\n    context: GraphQLContext\n  ): Promise<GraphQLCustomFieldDefinition> => {\n    requireAuthentication(context);\n    // TODO: Add permission check\n    const { id } = args;\n    const supabase = getAuthenticatedClient(context.token);\n    const currentUser = context.currentUser!;\n\n    // console.log(`[Mutation.deactivateCustomFieldDefinition] User: ${currentUser.id}, ID: ${id}`);\n    return customFieldDefinitionService.setCustomFieldDefinitionActiveStatus(supabase, id, false);\n  },\n  reactivateCustomFieldDefinition: async (\n    _parent: unknown,\n    args: { id: string },\n    context: GraphQLContext\n  ): Promise<GraphQLCustomFieldDefinition> => {\n    requireAuthentication(context);\n    // TODO: Add permission check\n    const { id } = args;\n    const supabase = getAuthenticatedClient(context.token);\n    const currentUser = context.currentUser!;\n\n    // console.log(`[Mutation.reactivateCustomFieldDefinition] User: ${currentUser.id}, ID: ${id}`);\n    return customFieldDefinitionService.setCustomFieldDefinitionActiveStatus(supabase, id, true);\n  },\n};\n\n// Example for field-level resolvers on CustomFieldDefinition if needed later:\n// import { CustomFieldDefinitionResolvers } from '../../../../lib/generated/graphql'; // Path matches others\n// export const customFieldDefinitionTypeResolvers: CustomFieldDefinitionResolvers = {\n//   // Example: if dropdownOptions needed transformation:\n//   // dropdownOptions: (parent) => { /* custom logic */ return parent.dropdownOptions; }\n// }; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/deal.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .person_id on an `any` value.","line":19,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":20,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":20,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":21,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":21,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":21,"column":27,"nodeType":"Identifier","messageId":"unsafeCall","endLine":21,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":23,"column":16,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":23,"endColumn":120},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":23,"column":37,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":23,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPersonById on an `error` typed value.","line":23,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":23,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":23,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":23,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":23,"column":86,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":23,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .person_id on an `any` value.","line":23,"column":97,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":23,"endColumn":106},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":25,"column":10,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":36,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":26,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":26,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":26,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":27,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":27,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":27,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":28,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":28,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":28,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":28,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":29,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":29,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":29,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":30,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":30,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .first_name on an `error` typed value.","line":30,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":31,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":31,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .last_name on an `error` typed value.","line":31,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":32,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":32,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":32,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":33,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":33,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .phone on an `error` typed value.","line":33,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":34,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":34,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `error` typed value.","line":34,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":35,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":35,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .organization_id on an `error` typed value.","line":35,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .person_id on an `any` value.","line":38,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":38,"column":86,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `any` value.","line":44,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":45,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":48,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":48,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":49,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":49,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":49,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":49,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":52,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":52,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":52,"column":39,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":52,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getStageById on an `error` typed value.","line":52,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `any` value.","line":52,"column":85,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `any` value.","line":54,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":54,"column":85,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":57,"column":13,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":66,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":58,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":58,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":58,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":59,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":59,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":59,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":60,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":60,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipeline_id on an `error` typed value.","line":60,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":61,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":61,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":61,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":61,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":62,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":62,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .order on an `error` typed value.","line":62,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":63,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":63,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":63,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":64,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":64,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":64,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":65,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":65,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":65,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `any` value.","line":68,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":68,"column":86,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":72,"column":20,"nodeType":"Identifier","messageId":"unsafeCall","endLine":72,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `any` value.","line":72,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":72},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4065,4068],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4065,4068],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":77,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":81,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":81,"endColumn":91},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_specific_probability on an `error` typed value.","line":81,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":91},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage on an `error` typed value.","line":87,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage on an `error` typed value.","line":87,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":88,"column":17,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":88,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage on an `error` typed value.","line":88,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":89,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":91,"column":17,"nodeType":"Identifier","messageId":"unsafeCall","endLine":91,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":92,"column":23,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":92,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":92,"column":37,"nodeType":"Identifier","messageId":"unsafeCall","endLine":92,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":99,"column":27,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":99,"endColumn":102},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":99,"column":47,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":99,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getStageById on an `error` typed value.","line":99,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":99,"column":93,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":101},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":100,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":101,"column":25,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":101,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":101,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":104,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":104,"column":94,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":96},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":113,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6411,6414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6411,6414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6423,6426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6423,6426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":120,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":120,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":121,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":121,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":121,"column":27,"nodeType":"Identifier","messageId":"unsafeCall","endLine":121,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":122,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":122,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":122,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":122,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .db_custom_field_values on an `any` value.","line":125,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":125,"endColumn":63},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6811,6814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6811,6814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":136,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":140,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":136,"column":67,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":136,"endColumn":121},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getCustomFieldDefinitions on an `error` typed value.","line":136,"column":96,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":136,"endColumn":121},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Deal on an `error` typed value.","line":138,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":151,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":151,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [definition.fieldName] resolves to an `error` typed value.","line":151,"column":49,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":151,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldName on an `error` typed value.","line":151,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":151,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":155,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":155,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":166,"column":15,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":166,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldType on an `error` typed value.","line":169,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":169,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Text on an `error` typed value.","line":170,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":170,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":171,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":171,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Number on an `error` typed value.","line":173,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":173,"endColumn":42},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":175,"column":17,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":175,"endColumn":50,"suggestions":[{"messageId":"addBrackets","fix":{"range":[9028,9185],"text":"{ const num = parseFloat(rawValue);\n                if (!isNaN(num)) {\n                  fieldValue.numberValue = num;\n                }\n                break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":175,"column":40,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":175,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":177,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Boolean on an `error` typed value.","line":180,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":180,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":181,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Date on an `error` typed value.","line":183,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":183,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":186,"column":17,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":186,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":186,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":186,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":188,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":188,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Dropdown on an `error` typed value.","line":190,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":192,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":192,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":193,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":193,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":195,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":195,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":196,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":196,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .MultiSelect on an `error` typed value.","line":199,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":201,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":201,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldType on an `error` typed value.","line":205,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":205,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldName on an `error` typed value.","line":205,"column":107,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":205,"endColumn":116},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":207,"column":13,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":207,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":213,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":213,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":213,"column":82,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":213,"column":110,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":119},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":213,"column":136,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":156},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":213,"column":163,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":183},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":218,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":79},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11660,11663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11660,11663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'info' is defined but never used. Allowed unused args must match /^_/u.","line":226,"column":84,"nodeType":null,"messageId":"unusedVar","endLine":226,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":227,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":227,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":228,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":228,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":228,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":228,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":233,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":233,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":233,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":233,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":237,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":237,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .limit on an `any` value.","line":237,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":237,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":238,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":238,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .offset on an `any` value.","line":238,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":238,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":240,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":246,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":240,"column":37,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":246,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":240,"column":37,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":245,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":240,"column":37,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":244,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":240,"column":37,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":243,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":240,"column":37,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":242,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":240,"column":37,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":241,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":241,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":241,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `error` typed value.","line":242,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":242,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eq on an `error` typed value.","line":243,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":243,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":243,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":243,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .order on an `error` typed value.","line":244,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":244,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .limit on an `error` typed value.","line":245,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":245,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .range on an `error` typed value.","line":246,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":246,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":249,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":249,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":253,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":253,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":254,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":254,"endColumn":25}],"suppressedMessages":[],"errorCount":163,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Resolvers for Deal type fields\nimport { GraphQLError, GraphQLResolveInfo } from 'graphql';\nimport { GraphQLContext, requireAuthentication, getAccessToken, processZodError } from '../helpers';\nimport { personService } from '../../../../lib/personService';\nimport * as stageService from '../../../../lib/stageService';\nimport type { DealResolvers, Person, Stage as GraphQLStage, Deal as GraphQLDealParent, CustomFieldValue as GraphQLCustomFieldValue, CustomFieldDefinition as GraphQLCustomFieldDefinition } from '../../../../lib/generated/graphql'; // Import generated types\nimport { CustomFieldEntityType, CustomFieldType } from '../../../../lib/generated/graphql'; // Ensure enums are imported as values\nimport { getAuthenticatedClient } from '../../../../lib/serviceUtils'; // Added import for getAuthenticatedClient\nimport * as customFieldDefinitionService from '../../../../lib/customFieldDefinitionService';\n\n// Define the parent type for Deal field resolvers to ensure all fields are available\n// type ParentDeal = Pick<GraphQLDealParent, 'id' | 'person_id' | 'stage_id' | 'amount' | 'deal_specific_probability'> & {\n//   stage?: Pick<GraphQLStage, 'deal_probability'> | null; // Ensure stage with deal_probability can be part of parent\n// };\n\nexport const Deal: DealResolvers<GraphQLContext> = {\n    // Resolver for the 'person' field on Deal\n    person: async (parent, _args, context) => { \n      if (!parent.person_id) return null;\n      requireAuthentication(context);\n      const accessToken = getAccessToken(context)!;\n      try {\n         const personRecord = await personService.getPersonById(context.currentUser!.id, parent.person_id, accessToken);\n         if (!personRecord) return null;\n         return {\n            id: personRecord.id,\n            created_at: personRecord.created_at,\n            updated_at: personRecord.updated_at,\n            user_id: personRecord.user_id,\n            first_name: personRecord.first_name,\n            last_name: personRecord.last_name,\n            email: personRecord.email,\n            phone: personRecord.phone,\n            notes: personRecord.notes,\n            organization_id: personRecord.organization_id,\n         } as Person;\n      } catch (e) {\n          console.error(`Error fetching person ${parent.person_id} for deal ${parent.id}:`, e);\n          return null; \n      }\n    },\n    // Resolver for the 'stage' field on Deal\n    stage: async (parent, _args, context) => { \n        if (!parent.stage_id) {\n            console.error(`Deal ${parent.id} is missing stage_id.`);\n            throw new GraphQLError('Internal Error: Deal is missing stage information.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n        }\n        requireAuthentication(context); \n        const accessToken = getAccessToken(context)!; \n        \n        try {\n            const stageRecord = await stageService.getStageById(accessToken, parent.stage_id);\n            if (!stageRecord) {\n                console.error(`Stage ${parent.stage_id} not found for deal ${parent.id}.`);\n                 throw new GraphQLError('Stage associated with this deal not found.', { extensions: { code: 'NOT_FOUND' } });\n            }\n            return {\n                id: stageRecord.id,\n                user_id: stageRecord.user_id,\n                pipeline_id: stageRecord.pipeline_id,\n                name: stageRecord.name,\n                order: stageRecord.order,\n                deal_probability: stageRecord.deal_probability,\n                created_at: stageRecord.created_at,\n                updated_at: stageRecord.updated_at,\n            } as GraphQLStage;\n        } catch (e) {\n            console.error(`Error fetching stage ${parent.stage_id} for deal ${parent.id}:`, e);\n             if (e instanceof GraphQLError && e.extensions?.code === 'NOT_FOUND') {\n                 throw e; \n             }\n             throw processZodError(e, `fetching stage ${parent.stage_id}`);\n        }\n    },\n    // Resolver for the 'weighted_amount' field on Deal\n    weighted_amount: async (parent: GraphQLDealParent, _args: any, context: GraphQLContext) => {\n        if (parent.amount == null) {\n            return null;\n        }\n\n        let probabilityToUse: number | null | undefined = parent.deal_specific_probability;\n\n        if (probabilityToUse == null) {\n            let stageDealProbability: number | null | undefined = null;\n\n            // Check if stage is already resolved on the parent and has deal_probability\n            if (parent.stage && typeof parent.stage.deal_probability === 'number') { \n                stageDealProbability = parent.stage.deal_probability;\n            } else if (parent.stage_id) {\n                // If stage is not resolved, or doesn't have probability, and we have stage_id, fetch the stage\n                requireAuthentication(context); // Ensure context is authenticated for service call\n                const accessToken = getAccessToken(context);\n                if (!accessToken) {\n                    // This case should ideally be caught by requireAuthentication, but as a safeguard:\n                    console.error('Authentication token not found in weighted_amount resolver.');\n                    throw new GraphQLError('User not authenticated', { extensions: { code: 'UNAUTHENTICATED' } });\n                }\n                try {\n                    const stageRecord = await stageService.getStageById(accessToken, parent.stage_id);\n                    if (stageRecord && typeof stageRecord.deal_probability === 'number') {\n                        stageDealProbability = stageRecord.deal_probability;\n                    }\n                } catch (e) {\n                    console.error(`Error fetching stage ${parent.stage_id} for deal ${parent.id} within weighted_amount resolver:`, e);\n                    // If stage fetch fails, proceed without stage probability (probabilityToUse remains null)\n                }\n            }\n            probabilityToUse = stageDealProbability;\n        }\n\n        if (probabilityToUse != null) {\n            // Ensure parent.amount is still valid if any async operations occurred, though it shouldn't change.\n            return parent.amount * probabilityToUse;\n        }\n        return null; // If no probability can be determined\n    },\n    // TODO: Add resolver for Deal.activities if not already present or handled by default\n\n    customFieldValues: async (parent: any, _args: any, context: GraphQLContext): Promise<GraphQLCustomFieldValue[]> => {\n      requireAuthentication(context);\n      const accessToken = getAccessToken(context)!;\n      const supabase = getAuthenticatedClient(accessToken);\n\n      // Read from the db_custom_field_values property passed by the parent resolver\n      const dealSpecificValues = parent.db_custom_field_values as Record<string, any> || {};\n\n      if (Object.keys(dealSpecificValues).length === 0) {\n        // If we want to show all applicable CFs for a Deal, even if not set,\n        // we would fetch all definitions here and map them, setting values to null.\n        // For now, if the deal has no custom_field_values, we return empty.\n        return [];\n      }\n\n      try {\n        // Fetch active definitions for DEAL entity type\n        const definitions: GraphQLCustomFieldDefinition[] = await customFieldDefinitionService.getCustomFieldDefinitions(\n          supabase, // Pass the Supabase client\n          CustomFieldEntityType.Deal, // Use the imported enum value\n          false // includeInactive = false (default, but explicit)\n        );\n\n        if (!definitions || definitions.length === 0) {\n          // This means there are no active field definitions for Deals, \n          // so even if parent.custom_field_values has data (e.g. for old/inactive fields), \n          // we can't resolve them to a known active definition.\n          return [];\n        }\n\n        const resolvedValues: GraphQLCustomFieldValue[] = definitions\n          .map((definition: GraphQLCustomFieldDefinition) => {\n            const rawValue = dealSpecificValues[definition.fieldName];\n\n            // Construct the CustomFieldValue, which now expects a 'definition' object\n            const fieldValue: GraphQLCustomFieldValue = {\n              definition: definition, // The full definition object\n              stringValue: null,\n              numberValue: null,\n              booleanValue: null,\n              dateValue: null,\n              selectedOptionValues: null,\n            };\n\n            if (rawValue === undefined || rawValue === null) {\n              // No value for this specific custom field on this deal\n              // Return the fieldValue with nulls, but with the definition included\n              return fieldValue; \n            }\n\n            switch (definition.fieldType) {\n              case CustomFieldType.Text:\n                fieldValue.stringValue = String(rawValue);\n                break;\n              case CustomFieldType.Number:\n                // Ensure rawValue is a number or can be parsed to one.\n                const num = parseFloat(rawValue);\n                if (!isNaN(num)) {\n                  fieldValue.numberValue = num;\n                }\n                break;\n              case CustomFieldType.Boolean:\n                fieldValue.booleanValue = Boolean(rawValue);\n                break;\n              case CustomFieldType.Date:\n                // rawValue should be an ISO string from the DB.\n                // The GraphQL DateTime scalar will handle parsing/validation on output.\n                fieldValue.dateValue = rawValue; \n                // Optionally, also provide stringValue for Date for easier direct display if needed\n                fieldValue.stringValue = String(rawValue); \n                break;\n              case CustomFieldType.Dropdown:\n                if (Array.isArray(rawValue) && rawValue.length > 0) {\n                  fieldValue.selectedOptionValues = [String(rawValue[0])];\n                  fieldValue.stringValue = String(rawValue[0]);\n                } else if (typeof rawValue === 'string') { \n                  fieldValue.selectedOptionValues = [rawValue];\n                  fieldValue.stringValue = rawValue;\n                }\n                break;\n              case CustomFieldType.MultiSelect:\n                if (Array.isArray(rawValue)) {\n                  fieldValue.selectedOptionValues = rawValue.map(String);\n                }\n                break;\n              default:\n                console.warn(`Unhandled custom field type: ${definition.fieldType} for field ${definition.fieldName}`);\n            }\n            return fieldValue;\n          })\n          // Filter out definitions for which the deal doesn't have a value stored in custom_field_values.\n          // This means we only return custom fields that are *set* on the deal.\n          // If we wanted to return all active definitions for the deal, with null values for those not set,\n          // we would remove this filter and the initial check for Object.keys(dealSpecificValues).length === 0.\n          .filter(fv => fv.stringValue !== null || fv.numberValue !== null || fv.booleanValue !== null || fv.dateValue !== null || (fv.selectedOptionValues && fv.selectedOptionValues.length > 0));\n\n        return resolvedValues;\n\n      } catch (error) {\n        console.error('Error resolving customFieldValues for deal:', parent.id, error);\n        if (error instanceof GraphQLError) throw error;\n        throw new GraphQLError('Could not resolve custom field values for the deal.', {\n          extensions: { code: 'INTERNAL_SERVER_ERROR' },\n        });\n      }\n    },\n\n    history: async (parent: GraphQLDealParent, args: any, context: GraphQLContext, info: GraphQLResolveInfo) => {\n      requireAuthentication(context);\n      const token = getAccessToken(context);\n      if (!token) {\n        // This should be caught by requireAuthentication, but as a safeguard\n        throw new GraphQLError('Authentication token not found.', { extensions: { code: 'UNAUTHENTICATED' } });\n      }\n      const supabase = getAuthenticatedClient(token);\n\n      // No need to check if supabase is null here as getAuthenticatedClient would throw if config is missing.\n\n      const limit = args.limit || 20;\n      const offset = args.offset || 0;\n\n      const { data, error } = await supabase\n        .from('deal_history')\n        .select('*')\n        .eq('deal_id', parent.id)\n        .order('created_at', { ascending: false })\n        .limit(limit)\n        .range(offset, offset + limit - 1);\n\n      if (error) {\n        console.error('Error fetching deal history for deal:', parent.id, error);\n        throw new GraphQLError('Could not fetch deal history.');\n      }\n      // Log the raw data from the database\n      console.log('[Deal.history resolver] Raw data for deal_id', parent.id, ':', JSON.stringify(data, null, 2));\n      return data || [];\n    },\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/history.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'requireAuthentication' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAuthenticatedClient' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GraphQLError' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[757,760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[757,760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":17,"column":14,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":103,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":25,"column":42,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":25,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1482,1485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1482,1485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1519,1522],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1519,1522],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'GraphQLUser' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":30,"column":100,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":30,"endColumn":111},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":36,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":36,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":36,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":37,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":37,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":37,"column":25,"nodeType":"Identifier","messageId":"unsafeCall","endLine":37,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":39,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":42,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":43,"column":100,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":102},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":47,"column":120,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":122},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":52,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":52,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":52,"column":31,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":52,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getUserProfile on an `error` typed value.","line":52,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":52,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":55,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":55,"endColumn":105},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_metadata on an `error` typed value.","line":55,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_metadata on an `error` typed value.","line":55,"column":81,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":56,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":56,"endColumn":160},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .display_name on an `error` typed value.","line":56,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":56,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":56,"column":84,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":56,"endColumn":108},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":56,"column":96,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":56,"endColumn":101},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":56,"column":114,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":56,"endColumn":115},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":56,"column":128,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":56,"endColumn":152},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":56,"column":140,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":56,"endColumn":142},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":59,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":59,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":59,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":60,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":60,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":60,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":61,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":61,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":62,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":62,"endColumn":91},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar_url on an `error` typed value.","line":62,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_metadata on an `error` typed value.","line":62,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":65,"column":103,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":105},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":67,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":67,"endColumn":188},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_metadata on an `error` typed value.","line":67,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_metadata on an `error` typed value.","line":67,"column":84,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":97},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":67,"column":112,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":67,"endColumn":136},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":67,"column":124,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":129},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":67,"column":142,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":67,"endColumn":143},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":67,"column":156,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":67,"endColumn":180},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":67,"column":168,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":170},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":69,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":69,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":69,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":69,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":70,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":70,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":70,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":71,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":71,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":72,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":72,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_metadata on an `error` typed value.","line":72,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":85,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":85,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":85,"column":31,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":85,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getUserProfile on an `error` typed value.","line":85,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":85,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .display_name on an `error` typed value.","line":86,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":90,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":90,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .display_name on an `error` typed value.","line":90,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":91,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":91,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar_url on an `error` typed value.","line":91,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5672,5675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5672,5675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":64,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { DealHistoryEntryResolvers, User as GraphQLUser } from '../../../../lib/generated/graphql'; // DealHistoryEntryType removed as parent will be DB row type\nimport { requireAuthentication, GraphQLContext, getAccessToken } from '../helpers'; // Assuming getAccessToken is in helpers\nimport { getAuthenticatedClient } from '../../../../lib/serviceUtils'; // For fetching user details\nimport { GraphQLError } from 'graphql';\nimport * as userProfileService from '../../../../lib/userProfileService'; // ADDED import\n\n// Define an interface for the expected shape of the parent object (DB row from deal_history)\ninterface DealHistoryDbRow {\n  id: string;\n  deal_id: string;\n  user_id?: string | null; // user_id can be null\n  event_type: string;\n  changes: any; // JSONB, so 'any' is appropriate here\n  created_at: string; // TIMESTAMPTZ will be a string\n}\n\nexport const DealHistoryEntry = {\n  // Explicitly resolve 'id' from the parent DB row's 'id' field\n  id: (parent: DealHistoryDbRow) => parent.id,\n\n  // Explicitly resolve 'eventType' from the parent DB row's 'event_type' field\n  eventType: (parent: DealHistoryDbRow) => parent.event_type,\n\n  // Explicitly resolve 'changes' from the parent DB row's 'changes' field\n  changes: (parent: DealHistoryDbRow) => parent.changes,\n\n  // Explicitly resolve 'createdAt' from the parent DB row's 'created_at' field\n  createdAt: (parent: DealHistoryDbRow) => new Date(parent.created_at),\n\n  user: async (parent: DealHistoryDbRow, _args: any, context: GraphQLContext, _info: any): Promise<GraphQLUser | null> => {\n    if (!parent.user_id) {\n      console.log('[DealHistoryEntry.user resolver] No user_id in parent history entry, returning null.');\n        return null; \n    }\n\n    const currentUser = context.currentUser;\n    const accessToken = getAccessToken(context); // Get accessToken\n\n    if (currentUser && currentUser.id === parent.user_id) {\n      console.log(`[DealHistoryEntry.user resolver] History user ${parent.user_id} is the current authenticated user. Fetching profile...`);\n      \n      if (!currentUser.email) { // Should not happen if requireAuthentication passed and email is primary id\n        console.error(`[DealHistoryEntry.user resolver] Critical: Authenticated user ${currentUser.id} has no email for history entry.`);\n        return null; // Or a more specific error/fallback if strictly needed\n      }\n      if (!accessToken) { // Should not happen if requireAuthentication passed\n        console.error(`[DealHistoryEntry.user resolver] Critical: No access token for authenticated user ${currentUser.id}.`);\n        return null;\n      }\n\n      try {\n        const profile = await userProfileService.getUserProfile(currentUser.id, accessToken);\n        \n        // Fallback logic for display name if not in profile, similar to before but prioritizing profile\n        const nameFromMetadata = currentUser.user_metadata?.name || currentUser.user_metadata?.full_name;\n        const calculatedDisplayName = profile?.display_name || nameFromMetadata || currentUser.email?.split('@')[0] || `User ${currentUser.id.substring(0, 8)}`;\n\n        return {\n          id: currentUser.id,\n          email: currentUser.email, // email is String! and guaranteed by above check\n          display_name: calculatedDisplayName,\n          avatar_url: profile?.avatar_url || currentUser.user_metadata?.avatar_url || null,\n        } as GraphQLUser;\n      } catch (error) {\n        console.error(`[DealHistoryEntry.user resolver] Error fetching profile for user ${currentUser.id}:`, error);\n        // Fallback to basic info from currentUser if profile fetch fails\n        const fallbackDisplayName = currentUser.user_metadata?.name || currentUser.user_metadata?.full_name || currentUser.email?.split('@')[0] || `User ${currentUser.id.substring(0, 8)}`;\n        return {\n          id: currentUser.id,\n          email: currentUser.email,\n          display_name: fallbackDisplayName,\n          avatar_url: currentUser.user_metadata?.avatar_url || null,\n        } as GraphQLUser;\n      }\n    } else {\n      // The user who made the history entry is NOT the current user.\n      // Try to fetch their profile using the current authenticated user's accessToken.\n      console.log(`[DealHistoryEntry.user resolver] History user ${parent.user_id} is not current user. Fetching their profile...`);\n      if (!accessToken) { // Current viewing user must have an access token\n        console.warn(`[DealHistoryEntry.user resolver] No access token for current viewing user to fetch other user's profile. Returning null.`);\n        return null;\n      }\n\n      try {\n        const profile = await userProfileService.getUserProfile(parent.user_id, accessToken);\n        if (profile && profile.display_name) { // Ensure profile and display_name exist\n          return {\n            id: parent.user_id, // The ID of the user who made the change\n            email: `${parent.user_id.substring(0,8)}@system.local`, // Placeholder email, as we don't fetch/store other users' emails here\n            display_name: profile.display_name,\n            avatar_url: profile.avatar_url || null,\n          } as GraphQLUser;\n        } else {\n          console.warn(`[DealHistoryEntry.user resolver] Profile not found or no display_name for user ${parent.user_id}. Returning null.`);\n          return null; // Fallback to System Action if profile or display_name is missing\n        }\n      } catch (error) {\n        console.error(`[DealHistoryEntry.user resolver] Error fetching profile for other user ${parent.user_id}:`, error);\n        return null; // Fallback to System Action on error\n      }\n    }\n  },\n} as DealHistoryEntryResolvers<GraphQLContext, any>; // Specify 'any' for ParentType to bypass complex type constraint ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/mutation.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":15,"column":14,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":23,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { MutationResolvers } from '../../../lib/generated/graphql'; // Adjusted path\nimport type { GraphQLContext } from '../helpers';\n\n// Import specific mutation resolver groups from ./mutations/ directory\nimport { dealMutations } from './mutations/dealMutations';\nimport { organizationMutations } from './mutations/organizationMutations';\nimport { personMutations } from './mutations/personMutations';\nimport { pipelineMutations } from './mutations/pipelineMutations';\nimport { stageMutations } from './mutations/stageMutations';\nimport { userProfileMutations } from './mutations/userProfileMutations';\nimport { pricingMutationResolvers } from './mutations/pricingMutations'; // Added pricing mutations\n\n// This file primarily aggregates mutations from the ./mutations subdirectory.\n// Other mutations (like Activity or CustomFields) seem to be aggregated directly in graphql.ts\nexport const Mutation: MutationResolvers<GraphQLContext> = {\n  ...dealMutations,\n  ...organizationMutations,\n    ...personMutations,\n    ...pipelineMutations,\n    ...stageMutations,\n  ...userProfileMutations,\n  ...pricingMutationResolvers,\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/mutations/dealMutations.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GraphQLDealUpdateInput' is defined but never used.","line":6,"column":105,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":127},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":12,"column":11,"nodeType":"Identifier","messageId":"unsafeCall","endLine":12,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":13,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":13,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":13,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":13,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":13,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":13,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":14,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":14,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":14,"column":31,"nodeType":"Identifier","messageId":"unsafeCall","endLine":14,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":16,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":16,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":16,"column":34,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":16,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .parse on an `error` typed value.","line":16,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":16,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":16,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":16,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":17,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":17,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":17,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":17,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":22,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":24,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .customFields on an `error` typed value.","line":22,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":22,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .customFields on an `error` typed value.","line":23,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":23,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":26,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":30,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":28,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":28,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":28,"column":34,"nodeType":"Identifier","messageId":"unsafeCall","endLine":28,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expected_close_date on an `error` typed value.","line":28,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":28,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":29,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":29,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":32,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":32,"endColumn":116},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":32,"column":39,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":32,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createDeal on an `error` typed value.","line":32,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":34,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":38,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":34,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":34,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .send on an `error` typed value.","line":34,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":36,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":36,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1929,1932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1929,1932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":37,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":37,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":37,"column":33,"nodeType":"Property","messageId":"anyAssignment","endLine":37,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":37,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":37,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .catch on an `error` typed value.","line":38,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":40,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":54,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":41,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":41,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":41,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":42,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":42,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":42,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":43,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":43,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":43,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":44,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":44,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":44,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":45,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":45,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":45,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":46,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":46,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":46,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":47,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":49,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expected_close_date on an `error` typed value.","line":47,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":48,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":48,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expected_close_date on an `error` typed value.","line":48,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expected_close_date on an `error` typed value.","line":49,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":50,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":50,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":50,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":50,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":51,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":51,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .person_id on an `error` typed value.","line":51,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":52,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":52,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .organization_id on an `error` typed value.","line":52,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":53,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":53,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_specific_probability on an `error` typed value.","line":53,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":56,"column":17,"nodeType":"Identifier","messageId":"unsafeCall","endLine":56,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":62,"column":11,"nodeType":"Identifier","messageId":"unsafeCall","endLine":62,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":63,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":63,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":63,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":63,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":63,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":63,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":64,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":64,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":64,"column":31,"nodeType":"Identifier","messageId":"unsafeCall","endLine":64,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":66,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":66,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":66,"column":34,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":66,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .parse on an `error` typed value.","line":66,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":66,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":67,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":67,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":67,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `{}`.","line":70,"column":27,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":70,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":74,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":74,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'pipeline_id' is assigned a value but never used.","line":74,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":77,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":79,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .customFields on an `error` typed value.","line":77,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .customFields on an `error` typed value.","line":78,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":81,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":85,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":83,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":83,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":83,"column":34,"nodeType":"Identifier","messageId":"unsafeCall","endLine":83,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expected_close_date on an `error` typed value.","line":83,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":84,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":84,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":87,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":87,"endColumn":138},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":87,"column":43,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":87,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updateDeal on an `error` typed value.","line":87,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":87,"column":79,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":89,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":103,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":90,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":90,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":90,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":91,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":91,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":91,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":92,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":92,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":92,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":93,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":93,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":93,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":94,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":94,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":94,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":94,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":95,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":95,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":95,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":96,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":98,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expected_close_date on an `error` typed value.","line":96,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":97,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":97,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expected_close_date on an `error` typed value.","line":97,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expected_close_date on an `error` typed value.","line":98,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":98,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":99,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":99,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":99,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":100,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":100,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .person_id on an `error` typed value.","line":100,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":101,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":101,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .organization_id on an `error` typed value.","line":101,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":102,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":102,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_specific_probability on an `error` typed value.","line":102,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":105,"column":17,"nodeType":"Identifier","messageId":"unsafeCall","endLine":105,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":109,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":109,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":11,"nodeType":"Identifier","messageId":"unsafeCall","endLine":111,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":112,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":112,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":112,"column":31,"nodeType":"Identifier","messageId":"unsafeCall","endLine":112,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":113,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":113,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":113,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":113,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":114,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":114,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":114,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":117,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":117,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":117,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":117,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deleteDeal on an `error` typed value.","line":117,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":117,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":117,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":117,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":120,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":124,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":120,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":120,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .send on an `error` typed value.","line":120,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":120,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":122,"column":23,"nodeType":"Property","messageId":"anyAssignment","endLine":122,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":122,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":122,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":123,"column":23,"nodeType":"Property","messageId":"anyAssignment","endLine":123,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":123,"column":35,"nodeType":"Property","messageId":"anyAssignment","endLine":123,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":123,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":123,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":123,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":123,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .catch on an `error` typed value.","line":124,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":124,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":126,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":126,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":128,"column":17,"nodeType":"Identifier","messageId":"unsafeCall","endLine":128,"endColumn":32}],"suppressedMessages":[],"errorCount":140,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GraphQLError } from 'graphql';\nimport { GraphQLContext, requireAuthentication, getAccessToken, processZodError, convertToDateOrNull } from '../../helpers'; // convertToDateOrNull imported here\nimport { DealCreateSchema, DealUpdateSchema } from '../../validators';\nimport { inngest } from '../../../../../lib/inngestClient';\nimport { dealService } from '../../../../../lib/dealService';\nimport type { MutationResolvers, Deal as GraphQLDeal, DealInput as GraphQLDealInput, DealUpdateInput as GraphQLDealUpdateInput } from '../../../../../lib/generated/graphql';\n\nexport const dealMutations: Pick<MutationResolvers<GraphQLContext>, 'createDeal' | 'updateDeal' | 'deleteDeal'> = {\n    createDeal: async (_parent, args, context) => {\n      const action = 'creating deal';\n      try {\n          requireAuthentication(context);\n          const userId = context.currentUser!.id;\n          const accessToken = getAccessToken(context)!;\n\n          const validatedInput = DealCreateSchema.parse(args.input);\n          if (!context.userPermissions?.includes('deal:create')) {\n               throw new GraphQLError('Forbidden', { extensions: { code: 'FORBIDDEN' } });\n          }\n\n          // Ensure customFields is an array or undefined before passing to service\n          const customFieldsForService = Array.isArray(validatedInput.customFields) \n            ? validatedInput.customFields \n            : undefined;\n\n          const serviceInput = {\n            ...validatedInput,\n            expected_close_date: convertToDateOrNull(validatedInput.expected_close_date),\n            customFields: customFieldsForService, // Use the processed customFields\n          };\n\n          const newDealRecord = await dealService.createDeal(userId, serviceInput as GraphQLDealInput, accessToken); // Cast to GraphQLDealInput\n          \n          inngest.send({\n            name: 'crm/deal.created',\n            data: { deal: newDealRecord as any }, \n            user: { id: userId, email: context.currentUser!.email! }\n          }).catch((err: unknown) => console.error('Failed to send deal.created event to Inngest:', err));\n\n          return {\n            id: newDealRecord.id,\n            user_id: newDealRecord.user_id!,\n            created_at: newDealRecord.created_at,\n            updated_at: newDealRecord.updated_at,\n            name: newDealRecord.name!,\n            amount: newDealRecord.amount,\n            expected_close_date: newDealRecord.expected_close_date instanceof Date \n              ? newDealRecord.expected_close_date.toISOString() \n              : newDealRecord.expected_close_date,\n            stage_id: newDealRecord.stage_id!,\n            person_id: newDealRecord.person_id,\n            organization_id: newDealRecord.organization_id,\n            deal_specific_probability: newDealRecord.deal_specific_probability,\n          } as GraphQLDeal;\n      } catch (error) {\n          throw processZodError(error, action);\n      }\n    },\n    updateDeal: async (_parent, args, context) => {\n      const action = 'updating deal';\n      try {\n          requireAuthentication(context);\n          const userId = context.currentUser!.id;\n          const accessToken = getAccessToken(context)!;\n\n          const validatedInput = DealUpdateSchema.parse(args.input);\n          if (!context.userPermissions?.includes('deal:update_any')) {\n               throw new GraphQLError('Forbidden', { extensions: { code: 'FORBIDDEN' } });\n          }\n          if (Object.keys(validatedInput).length === 0) {\n            throw new GraphQLError('Update input cannot be empty.', { extensions: { code: 'BAD_USER_INPUT' } });\n          }\n\n          const { pipeline_id, ...dealDataFromZod } = validatedInput;\n          \n          // Ensure customFields is an array or undefined\n          const customFieldsForService = Array.isArray(dealDataFromZod.customFields) \n            ? dealDataFromZod.customFields \n            : undefined;\n\n          const serviceInput = {\n            ...dealDataFromZod,\n            expected_close_date: convertToDateOrNull(dealDataFromZod.expected_close_date),\n            customFields: customFieldsForService, // Use the processed customFields\n          };\n\n          const updatedDealRecord = await dealService.updateDeal(userId, args.id, serviceInput as Partial<GraphQLDealInput>, accessToken); // Changed cast\n          \n          return {\n            id: updatedDealRecord.id,\n            user_id: updatedDealRecord.user_id!,\n            created_at: updatedDealRecord.created_at,\n            updated_at: updatedDealRecord.updated_at,\n            name: updatedDealRecord.name!,\n            amount: updatedDealRecord.amount,\n            expected_close_date: updatedDealRecord.expected_close_date instanceof Date \n              ? updatedDealRecord.expected_close_date.toISOString() \n              : updatedDealRecord.expected_close_date,\n            stage_id: updatedDealRecord.stage_id!,\n            person_id: updatedDealRecord.person_id,\n            organization_id: updatedDealRecord.organization_id,\n            deal_specific_probability: updatedDealRecord.deal_specific_probability,\n          } as GraphQLDeal;\n      } catch (error) {\n          throw processZodError(error, action);\n      }\n    },\n    deleteDeal: async (_parent, args, context) => {\n      const action = `deleting deal ${args.id}`;\n      try {\n          requireAuthentication(context);\n          const accessToken = getAccessToken(context)!;\n          const userId = context.currentUser!.id;\n          if (!context.userPermissions?.includes('deal:delete_any')) {\n              throw new GraphQLError('Forbidden', { extensions: { code: 'FORBIDDEN' } });\n          }\n          const success = await dealService.deleteDeal(userId, args.id, accessToken);\n\n          if (success) {\n            inngest.send({\n              name: 'crm/deal.deleted',\n              data: { dealId: args.id },\n              user: { id: userId, email: context.currentUser!.email! }\n            }).catch((err: unknown) => console.error('Failed to send deal.deleted event to Inngest:', err));\n          }\n          return success;\n      } catch (error) {\n          throw processZodError(error, action);\n      }\n    },\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/mutations/organizationMutations.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GraphQLOrganization' is defined but never used.","line":6,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":10,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":10,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":13,"column":11,"nodeType":"Identifier","messageId":"unsafeCall","endLine":13,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":14,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":14,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":14,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":14,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":14,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":14,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":15,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":15,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":15,"column":31,"nodeType":"Identifier","messageId":"unsafeCall","endLine":15,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":17,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":17,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":17,"column":34,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":17,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .parse on an `error` typed value.","line":17,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":17,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":17,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":17,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":20,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":20,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":20,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":20,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":24,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":24,"endColumn":113},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":24,"column":38,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":24,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createOrganization on an `error` typed value.","line":24,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":24,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":25,"column":91,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":25,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":27,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":31,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":27,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":27,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .send on an `error` typed value.","line":27,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":29,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":29,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1631,1634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1631,1634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":30,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":33,"nodeType":"Property","messageId":"anyAssignment","endLine":30,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":30,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":30,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .catch on an `error` typed value.","line":31,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":33,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":42,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":34,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":34,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":34,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":35,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":35,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":35,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":36,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":36,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":36,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":37,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":37,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":37,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":38,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":38,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":38,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":39,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":39,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `error` typed value.","line":39,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":40,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":40,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `error` typed value.","line":40,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":41,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":41,"endColumn":78},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2198,2201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2198,2201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":41,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":78},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2239,2242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2239,2242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":44,"column":17,"nodeType":"Identifier","messageId":"unsafeCall","endLine":44,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":48,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":48,"column":89,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":51,"column":11,"nodeType":"Identifier","messageId":"unsafeCall","endLine":51,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":52,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":52,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":52,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":52,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":53,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":53,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":53,"column":31,"nodeType":"Identifier","messageId":"unsafeCall","endLine":53,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":55,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":55,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":55,"column":34,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":55,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":55,"column":34,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":55,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .partial on an `error` typed value.","line":55,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .parse on an `error` typed value.","line":55,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":55,"column":79,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":58,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":58,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":58,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":62,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":62,"endColumn":126},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":62,"column":42,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":62,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updateOrganization on an `error` typed value.","line":62,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":62,"column":94,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":96},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":63,"column":95,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":63,"endColumn":97},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":65,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":69,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":65,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":65,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .send on an `error` typed value.","line":65,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":67,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":67,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3436,3439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3436,3439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":68,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":68,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":68,"column":33,"nodeType":"Property","messageId":"anyAssignment","endLine":68,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":68,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":68,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .catch on an `error` typed value.","line":69,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":69,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":71,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":80,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":72,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":72,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":72,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":73,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":73,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":73,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":73,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":74,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":74,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":74,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":75,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":75,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":75,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":76,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":76,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":76,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":77,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":77,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `error` typed value.","line":77,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":78,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":78,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `error` typed value.","line":78,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":79,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":79,"endColumn":82},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4035,4038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4035,4038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":79,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":82},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4076,4079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4076,4079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":82,"column":17,"nodeType":"Identifier","messageId":"unsafeCall","endLine":82,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":86,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":89,"column":11,"nodeType":"Identifier","messageId":"unsafeCall","endLine":89,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":90,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":90,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":90,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":90,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":91,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":91,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":91,"column":31,"nodeType":"Identifier","messageId":"unsafeCall","endLine":91,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":93,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":93,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":93,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":97,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":97,"endColumn":101},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":97,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":97,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deleteOrganization on an `error` typed value.","line":97,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":97,"column":85,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":101,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":105,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":101,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":101,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .send on an `error` typed value.","line":101,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":103,"column":23,"nodeType":"Property","messageId":"anyAssignment","endLine":103,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":103,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":104,"column":23,"nodeType":"Property","messageId":"anyAssignment","endLine":104,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":104,"column":35,"nodeType":"Property","messageId":"anyAssignment","endLine":104,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":104,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":104,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .catch on an `error` typed value.","line":105,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":108,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":108,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":110,"column":17,"nodeType":"Identifier","messageId":"unsafeCall","endLine":110,"endColumn":32}],"suppressedMessages":[],"errorCount":124,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GraphQLError } from 'graphql';\nimport { GraphQLContext, requireAuthentication, getAccessToken, processZodError } from '../../helpers';\nimport { OrganizationInputSchema } from '../../validators';\nimport { inngest } from '../../../../../lib/inngestClient';\nimport { organizationService } from '../../../../../lib/organizationService';\nimport type { MutationResolvers, Organization as GraphQLOrganization } from '../../../../../lib/generated/graphql';\n\nexport const organizationMutations: Pick<MutationResolvers<GraphQLContext>, 'createOrganization' | 'updateOrganization' | 'deleteOrganization'> = {\n    createOrganization: async (_parent, args, context) => {\n      console.log('[Mutation.createOrganization] received input:', args.input);\n      const action = 'creating organization';\n      try {\n          requireAuthentication(context);\n          const userId = context.currentUser!.id;\n          const accessToken = getAccessToken(context)!;\n\n          const validatedInput = OrganizationInputSchema.parse(args.input);\n          console.log('[Mutation.createOrganization] validated input:', validatedInput);\n\n          if (!context.userPermissions?.includes('organization:create')) {\n               throw new GraphQLError('Forbidden', { extensions: { code: 'FORBIDDEN' } });\n          }\n\n          const newOrgRecord = await organizationService.createOrganization(userId, validatedInput, accessToken);\n          console.log('[Mutation.createOrganization] successfully created:', newOrgRecord.id);\n\n          inngest.send({ \n            name: 'crm/organization.created',\n            data: { organization: newOrgRecord as any },\n            user: { id: userId, email: context.currentUser!.email! }\n          }).catch((err: unknown) => console.error('Failed to send organization.created event to Inngest:', err));\n          \n          return {\n            id: newOrgRecord.id,\n            created_at: newOrgRecord.created_at,\n            updated_at: newOrgRecord.updated_at,\n            user_id: newOrgRecord.user_id,\n            name: newOrgRecord.name,\n            address: newOrgRecord.address,\n            notes: newOrgRecord.notes,\n            db_custom_field_values: (newOrgRecord as any).custom_field_values,\n          } as any;\n      } catch (error) {\n          throw processZodError(error, action);\n      }\n    },\n    updateOrganization: async (_parent, args, context) => {\n      console.log('[Mutation.updateOrganization] received id:', args.id, 'input:', args.input);\n      const action = 'updating organization';\n      try {\n          requireAuthentication(context);\n          const userId = context.currentUser!.id;\n          const accessToken = getAccessToken(context)!;\n          \n          const validatedInput = OrganizationInputSchema.partial().parse(args.input);\n          console.log('[Mutation.updateOrganization] validated input:', validatedInput);\n          \n          if (!context.userPermissions?.includes('organization:update_any')) {\n               throw new GraphQLError('Forbidden', { extensions: { code: 'FORBIDDEN' } });\n          }\n          \n          const updatedOrgRecord = await organizationService.updateOrganization(userId, args.id, validatedInput, accessToken);\n          console.log('[Mutation.updateOrganization] successfully updated:', updatedOrgRecord.id);\n\n          inngest.send({ \n            name: 'crm/organization.updated',\n            data: { organization: updatedOrgRecord as any },\n            user: { id: userId, email: context.currentUser!.email! }\n          }).catch((err: unknown) => console.error('Failed to send organization.updated event to Inngest:', err));\n          \n          return {\n            id: updatedOrgRecord.id,\n            created_at: updatedOrgRecord.created_at,\n            updated_at: updatedOrgRecord.updated_at,\n            user_id: updatedOrgRecord.user_id,\n            name: updatedOrgRecord.name,\n            address: updatedOrgRecord.address,\n            notes: updatedOrgRecord.notes,\n            db_custom_field_values: (updatedOrgRecord as any).custom_field_values,\n          } as any;\n      } catch (error) {\n          throw processZodError(error, action);\n      }\n    },\n    deleteOrganization: async (_parent, args, context) => {\n      console.log('[Mutation.deleteOrganization] received id:', args.id);\n      const action = 'deleting organization';\n      try {\n          requireAuthentication(context);\n          const userId = context.currentUser!.id;\n          const accessToken = getAccessToken(context)!;\n          \n          if (!context.userPermissions?.includes('organization:delete_any')) {\n               throw new GraphQLError('Forbidden', { extensions: { code: 'FORBIDDEN' } });\n          }\n          \n          const success = await organizationService.deleteOrganization(userId, args.id, accessToken);\n          console.log('[Mutation.deleteOrganization] success status:', success);\n\n          if (success) {\n            inngest.send({ \n              name: 'crm/organization.deleted',\n              data: { organizationId: args.id },\n              user: { id: userId, email: context.currentUser!.email! }\n            }).catch((err: unknown) => console.error('Failed to send organization.deleted event to Inngest:', err));\n          }\n\n          return success;\n      } catch (error) {\n          throw processZodError(error, action);\n      }\n    },\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/mutations/personMutations.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GraphQLPerson' is defined but never used.","line":6,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":10,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":10,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":13,"column":11,"nodeType":"Identifier","messageId":"unsafeCall","endLine":13,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":14,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":14,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":14,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":14,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":14,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":14,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":15,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":15,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":15,"column":31,"nodeType":"Identifier","messageId":"unsafeCall","endLine":15,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":17,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":17,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":17,"column":34,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":17,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .parse on an `error` typed value.","line":17,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":17,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":17,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":17,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":20,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":20,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":20,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":20,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":24,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":24,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":24,"column":41,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":24,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createPerson on an `error` typed value.","line":24,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":24,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":25,"column":88,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":25,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":27,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":31,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":27,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":27,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .send on an `error` typed value.","line":27,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":29,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":29,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1625,1628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1625,1628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":30,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":33,"nodeType":"Property","messageId":"anyAssignment","endLine":30,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":30,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":30,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .catch on an `error` typed value.","line":31,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":33,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":45,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":34,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":34,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":34,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":35,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":35,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":35,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":36,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":36,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":36,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":37,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":37,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":37,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":38,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":38,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .first_name on an `error` typed value.","line":38,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":39,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":39,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .last_name on an `error` typed value.","line":39,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":40,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":40,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":40,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":41,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":41,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .phone on an `error` typed value.","line":41,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":42,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":42,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `error` typed value.","line":42,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":43,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":43,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .organization_id on an `error` typed value.","line":43,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":44,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":44,"endColumn":81},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2372,2375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2372,2375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":44,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":81},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2413,2416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2413,2416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":47,"column":17,"nodeType":"Identifier","messageId":"unsafeCall","endLine":47,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":51,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":51,"column":83,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":54,"column":11,"nodeType":"Identifier","messageId":"unsafeCall","endLine":54,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":55,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":55,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":55,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":55,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":56,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":56,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":56,"column":31,"nodeType":"Identifier","messageId":"unsafeCall","endLine":56,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":58,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":58,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":58,"column":34,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":58,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .parse on an `error` typed value.","line":58,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":58,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":61,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":61,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":61,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":61,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `{}`.","line":65,"column":27,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":65,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":69,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":69,"endColumn":117},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":69,"column":45,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":69,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updatePerson on an `error` typed value.","line":69,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":69,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":69,"column":85,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":69,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":70,"column":92,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":72,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":76,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":72,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":72,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .send on an `error` typed value.","line":72,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":74,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":74,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3719,3722],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3719,3722],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":75,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":75,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":75,"column":33,"nodeType":"Property","messageId":"anyAssignment","endLine":75,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":75,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":75,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .catch on an `error` typed value.","line":76,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":78,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":90,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":79,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":79,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":79,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":80,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":80,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":80,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":81,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":81,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":81,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":82,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":82,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":82,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":83,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":83,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .first_name on an `error` typed value.","line":83,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":84,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":84,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .last_name on an `error` typed value.","line":84,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":85,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":85,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":85,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":85,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":86,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":86,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .phone on an `error` typed value.","line":86,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":87,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":87,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `error` typed value.","line":87,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":88,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":88,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .organization_id on an `error` typed value.","line":88,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":89,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":89,"endColumn":85},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4510,4513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4510,4513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":89,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":85},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4551,4554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4551,4554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":92,"column":17,"nodeType":"Identifier","messageId":"unsafeCall","endLine":92,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":96,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":99,"column":11,"nodeType":"Identifier","messageId":"unsafeCall","endLine":99,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":100,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":100,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":100,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":100,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":101,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":101,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":101,"column":31,"nodeType":"Identifier","messageId":"unsafeCall","endLine":101,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":103,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":103,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":103,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":107,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":107,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":107,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":107,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deletePerson on an `error` typed value.","line":107,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":107,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":107,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":107,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":115,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":111,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .send on an `error` typed value.","line":111,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":111,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":113,"column":23,"nodeType":"Property","messageId":"anyAssignment","endLine":113,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":113,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":114,"column":23,"nodeType":"Property","messageId":"anyAssignment","endLine":114,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":114,"column":35,"nodeType":"Property","messageId":"anyAssignment","endLine":114,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":114,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":114,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .catch on an `error` typed value.","line":115,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":115,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":118,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":118,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":120,"column":17,"nodeType":"Identifier","messageId":"unsafeCall","endLine":120,"endColumn":32}],"suppressedMessages":[],"errorCount":135,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GraphQLError } from 'graphql';\nimport { GraphQLContext, requireAuthentication, getAccessToken, processZodError } from '../../helpers'; // Adjusted path\nimport { PersonCreateSchema, PersonUpdateSchema } from '../../validators'; // Adjusted path\nimport { inngest } from '../../../../../lib/inngestClient'; // Adjusted path\nimport { personService } from '../../../../../lib/personService'; // Adjusted path\nimport type { MutationResolvers, Person as GraphQLPerson } from '../../../../../lib/generated/graphql'; // Adjusted path\n\nexport const personMutations: Pick<MutationResolvers<GraphQLContext>, 'createPerson' | 'updatePerson' | 'deletePerson'> = {\n    createPerson: async (_parent, args, context) => {\n      console.log('[Mutation.createPerson] received input:', args.input);\n      const action = 'creating person';\n      try {\n          requireAuthentication(context);\n          const userId = context.currentUser!.id;\n          const accessToken = getAccessToken(context)!;\n\n          const validatedInput = PersonCreateSchema.parse(args.input);\n          console.log('[Mutation.createPerson] validated input:', validatedInput);\n\n          if (!context.userPermissions?.includes('person:create')) {\n              throw new GraphQLError('Forbidden', { extensions: { code: 'FORBIDDEN' } });\n          }\n\n          const newPersonRecord = await personService.createPerson(userId, validatedInput, accessToken);\n          console.log('[Mutation.createPerson] successfully created:', newPersonRecord.id);\n\n          inngest.send({\n            name: 'crm/person.created',\n            data: { person: newPersonRecord as any },\n            user: { id: userId, email: context.currentUser!.email! }\n          }).catch((err: unknown) => console.error('Failed to send person.created event to Inngest:', err));\n          \n          return {\n            id: newPersonRecord.id,\n            created_at: newPersonRecord.created_at,\n            updated_at: newPersonRecord.updated_at,\n            user_id: newPersonRecord.user_id,\n            first_name: newPersonRecord.first_name,\n            last_name: newPersonRecord.last_name,\n            email: newPersonRecord.email,\n            phone: newPersonRecord.phone,\n            notes: newPersonRecord.notes,\n            organization_id: newPersonRecord.organization_id,\n            db_custom_field_values: (newPersonRecord as any).custom_field_values,\n          } as any;\n      } catch (error) {\n          throw processZodError(error, action);\n      }\n    },\n    updatePerson: async (_parent, args, context) => {\n      console.log('[Mutation.updatePerson] received id:', args.id, 'input:', args.input);\n      const action = 'updating person';\n      try {\n          requireAuthentication(context);\n          const userId = context.currentUser!.id;\n          const accessToken = getAccessToken(context)!;\n\n          const validatedInput = PersonUpdateSchema.parse(args.input);\n          console.log('[Mutation.updatePerson] validated input:', validatedInput);\n          \n          if (!context.userPermissions?.includes('person:update_any')) {\n               throw new GraphQLError('Forbidden', { extensions: { code: 'FORBIDDEN' } });\n          }\n          \n          if (Object.keys(validatedInput).length === 0) {\n             throw new GraphQLError('Update input cannot be empty.', { extensions: { code: 'BAD_USER_INPUT' } });\n          }\n\n          const updatedPersonRecord = await personService.updatePerson(userId, args.id, validatedInput, accessToken);\n          console.log('[Mutation.updatePerson] successfully updated:', updatedPersonRecord.id);\n\n          inngest.send({ \n            name: 'crm/person.updated',\n            data: { person: updatedPersonRecord as any },\n            user: { id: userId, email: context.currentUser!.email! }\n          }).catch((err: unknown) => console.error('Failed to send person.updated event to Inngest:', err));\n          \n          return {\n            id: updatedPersonRecord.id,\n            created_at: updatedPersonRecord.created_at,\n            updated_at: updatedPersonRecord.updated_at,\n            user_id: updatedPersonRecord.user_id,\n            first_name: updatedPersonRecord.first_name,\n            last_name: updatedPersonRecord.last_name,\n            email: updatedPersonRecord.email,\n            phone: updatedPersonRecord.phone,\n            notes: updatedPersonRecord.notes,\n            organization_id: updatedPersonRecord.organization_id,\n            db_custom_field_values: (updatedPersonRecord as any).custom_field_values,\n          } as any;\n      } catch (error) {\n          throw processZodError(error, action);\n      }\n    },\n    deletePerson: async (_parent, args, context) => {\n      console.log('[Mutation.deletePerson] received id:', args.id);\n      const action = 'deleting person';\n      try {\n          requireAuthentication(context);\n          const userId = context.currentUser!.id;\n          const accessToken = getAccessToken(context)!;\n          \n          if (!context.userPermissions?.includes('person:delete_any')) {\n              throw new GraphQLError('Forbidden', { extensions: { code: 'FORBIDDEN' } });\n          }\n          \n          const success = await personService.deletePerson(userId, args.id, accessToken);\n          console.log('[Mutation.deletePerson] success status:', success);\n          \n          if (success) {\n            inngest.send({ \n              name: 'crm/person.deleted',\n              data: { personId: args.id },\n              user: { id: userId, email: context.currentUser!.email! }\n            }).catch((err: unknown) => console.error('Failed to send person.deleted event to Inngest:', err));\n          }\n          \n          return success;\n      } catch (error) {\n          throw processZodError(error, action);\n      }\n    },\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/mutations/pipelineMutations.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":11,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":11,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":12,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":12,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":12,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":12,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":13,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":13,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":13,"column":32,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":13,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .parse on an `error` typed value.","line":13,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":13,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":13,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":13,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":14,"column":14,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":14,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":14,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":14,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":17,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":17,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":17,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":17,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createPipeline on an `error` typed value.","line":17,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":17,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":18,"column":13,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":24,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":19,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":19,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":19,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":20,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":20,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":20,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":20,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":21,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":21,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":21,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":21,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":22,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":22,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":22,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":22,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":23,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":23,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":23,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":23,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":26,"column":15,"nodeType":"Identifier","messageId":"unsafeCall","endLine":26,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":30,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":32,"column":89,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":91},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":33,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":34,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":35,"column":89,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":37,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":37,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":38,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":38,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":38,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":38,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":39,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":39,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":39,"column":32,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":39,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .parse on an `error` typed value.","line":39,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":39,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":41,"column":15,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":41,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":41,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":42,"column":78,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":46,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":47,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":47,"endColumn":107},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":47,"column":39,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":47,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updatePipeline on an `error` typed value.","line":47,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":47,"column":88,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":49,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":52,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":50,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":50,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":50,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":50,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":51,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":51,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":51,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":54,"column":88,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":58,"column":15,"nodeType":"Identifier","messageId":"unsafeCall","endLine":58,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":62,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":64,"column":89,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":91},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":65,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":66,"column":89,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":68,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":68,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":69,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":69,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":69,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":69,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":71,"column":14,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":71,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":71,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":72,"column":78,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":76,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":77,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":77,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":77,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":77,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deletePipeline on an `error` typed value.","line":77,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":77,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":79,"column":88,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":83,"column":15,"nodeType":"Identifier","messageId":"unsafeCall","endLine":83,"endColumn":30}],"suppressedMessages":[],"errorCount":68,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GraphQLError } from 'graphql';\nimport { GraphQLContext, requireAuthentication, getAccessToken, processZodError } from '../../helpers';\nimport { PipelineInputSchema } from '../../validators';\nimport * as pipelineService from '../../../../../lib/pipelineService';\nimport type { MutationResolvers, Pipeline as GraphQLPipeline } from '../../../../../lib/generated/graphql';\n\nexport const pipelineMutations: Pick<MutationResolvers<GraphQLContext>, 'createPipeline' | 'updatePipeline' | 'deletePipeline'> = {\n    createPipeline: async (_parent, args, context) => {\n      const action = 'creating pipeline';\n      try {\n        requireAuthentication(context);\n        const accessToken = getAccessToken(context)!;\n        const validatedInput = PipelineInputSchema.parse(args.input);\n        if (!context.userPermissions?.includes('pipeline:create')) {\n                throw new GraphQLError('Forbidden', { extensions: { code: 'FORBIDDEN' } });\n        }\n        const newPipeline = await pipelineService.createPipeline(accessToken, validatedInput);\n            return {\n                id: newPipeline.id,\n                user_id: newPipeline.user_id,\n                name: newPipeline.name,\n                created_at: newPipeline.created_at,\n                updated_at: newPipeline.updated_at,\n            } as GraphQLPipeline;\n      } catch (error) {\n        throw processZodError(error, action);\n      }\n    },\n    updatePipeline: async (_parent, args, context) => {\n      const action = `updating pipeline ${args.id}`;\n      try {\n        console.log(`[Mutation.updatePipeline] Attempting to update pipeline ID: ${args.id}`);\n        console.log(`[Mutation.updatePipeline] Input:`, args.input);\n        console.log(`[Mutation.updatePipeline] Context User ID: ${context.currentUser?.id}`);\n        console.log(`[Mutation.updatePipeline] User Permissions from context:`, context.userPermissions);\n\n        requireAuthentication(context);\n        const accessToken = getAccessToken(context)!;\n        const validatedInput = PipelineInputSchema.parse(args.input);\n\n         if (!context.userPermissions?.includes('pipeline:update_any')) {\n          console.error(`[Mutation.updatePipeline] FORBIDDEN: User ${context.currentUser?.id} does NOT have 'pipeline:update_any' permission.`);\n          throw new GraphQLError('Forbidden', { extensions: { code: 'FORBIDDEN' } });\n        }\n        \n        console.log(`[Mutation.updatePipeline] User ${context.currentUser?.id} HAS 'pipeline:update_any' permission. Proceeding with service call.`);\n        const updatedPipeline = await pipelineService.updatePipeline(accessToken, args.id, validatedInput);\n        \n        return {\n          id: updatedPipeline.id,\n          name: updatedPipeline.name,\n        } as GraphQLPipeline;\n      } catch (error) {\n        console.error(`[Mutation.updatePipeline] Error in resolver for pipeline ${args.id}:`, error);\n        if (error instanceof GraphQLError && error.extensions?.code === 'FORBIDDEN') {\n            throw error;\n        }\n        throw processZodError(error, action);\n      }\n    },\n    deletePipeline: async (_parent, args, context) => {\n        const action = `deleting pipeline ${args.id}`;\n      try {\n        console.log(`[Mutation.deletePipeline] Attempting to delete pipeline ID: ${args.id}`);\n        console.log(`[Mutation.deletePipeline] Context User ID: ${context.currentUser?.id}`);\n        console.log(`[Mutation.deletePipeline] User Permissions from context:`, context.userPermissions);\n\n        requireAuthentication(context);\n        const accessToken = getAccessToken(context)!;\n\n        if (!context.userPermissions?.includes('pipeline:delete_any')) {\n          console.error(`[Mutation.deletePipeline] FORBIDDEN: User ${context.currentUser?.id} does NOT have 'pipeline:delete_any' permission.`);\n          throw new GraphQLError('Forbidden', { extensions: { code: 'FORBIDDEN' } });\n        }\n        \n        console.log(`[Mutation.deletePipeline] User ${context.currentUser?.id} HAS 'pipeline:delete_any' permission. Proceeding with service call.`);\n        return await pipelineService.deletePipeline(accessToken, args.id);\n      } catch (error) {\n        console.error(`[Mutation.deletePipeline] Error in resolver for pipeline ${args.id}:`, error);\n        if (error instanceof GraphQLError && error.extensions?.code === 'FORBIDDEN') {\n            throw error;\n        }\n        throw processZodError(error, action);\n      }\n    },\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/mutations/pricingMutations.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'z' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1676,1679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1676,1679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":27,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":27,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":29,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":29,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":29,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":29,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .safeParse on an `error` typed value.","line":29,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `error` typed value.","line":30,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":31,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":31,"endColumn":112},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":31,"column":31,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":31,"endColumn":106},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":31,"column":31,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":31,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `error` typed value.","line":31,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":31,"column":68,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":31,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .path on an `any` value.","line":31,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":31,"column":91,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .join on an `error` typed value.","line":31,"column":102,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":106},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":34,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":34,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `error` typed value.","line":34,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":36,"column":95,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":111},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":37,"column":98,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":114},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":39,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":42,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":41,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":41,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":41,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":45,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":45,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createPriceQuote on an `error` typed value.","line":45,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":45,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":45,"column":114,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":119},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2774,2777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2774,2777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":48,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":69},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2985,2988],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2985,2988],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":57,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":57,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":57,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":57,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":57,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":57,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":61,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":61,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":61,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":61,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":63,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":63,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":63,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":63,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .safeParse on an `error` typed value.","line":63,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":63,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `error` typed value.","line":64,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":66,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":66,"endColumn":113},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":66,"column":31,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":66,"endColumn":107},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":66,"column":31,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":66,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `error` typed value.","line":66,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .errors on an `error` typed value.","line":66,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":66,"column":69,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":66,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .path on an `any` value.","line":66,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":66,"column":92,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":99},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .join on an `error` typed value.","line":66,"column":103,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":107},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":69,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":69,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `error` typed value.","line":69,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":69,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":71,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":75,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":74,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":74,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":74,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":79,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":79,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updatePriceQuote on an `error` typed value.","line":79,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":79,"column":94,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":99},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4347,4350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4347,4350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":82,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":69},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4545,4548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4545,4548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":87,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":87,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":89,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":89,"endColumn":103},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":89,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":89,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deletePriceQuote on an `error` typed value.","line":89,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":89,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":89,"column":96,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":101},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4834,4837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4834,4837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":92,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":69},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'calculatePriceQuotePreview' has no 'await' expression.","line":96,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":96,"endColumn":37,"suggestions":[{"messageId":"removeAsync","fix":{"range":[5026,5178],"text":"(\n    _parent: any, \n    args: { dealId?: string | null, input: PriceQuoteUpdateInput }, \n    context: GraphQLContext\n  ): PriceQuoteType"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5047,5050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5047,5050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":101,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":114,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":114,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":114,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":114,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .safeParse on an `error` typed value.","line":114,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `error` typed value.","line":117,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":117,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":118,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":118,"endColumn":114},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":118,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":118,"endColumn":108},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":118,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":118,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `error` typed value.","line":118,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":118,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":118,"column":70,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":118,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .path on an `any` value.","line":118,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":118,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":118,"column":93,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":118,"endColumn":100},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .join on an `error` typed value.","line":118,"column":104,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":118,"endColumn":108},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":121,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":121,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `error` typed value.","line":121,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":121,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":123,"column":105,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":123,"endColumn":121},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":124,"column":108,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":124,"endColumn":124},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":126,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":126,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .base_minimum_price_mp on an `error` typed value.","line":126,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":128,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":130,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":128,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":128,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":128,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":128,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":128,"column":76,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":128,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":129,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":129,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":129,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":129,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":131,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":131,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .final_offer_price_fop on an `error` typed value.","line":131,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":133,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":133,"endColumn":110},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":133,"column":42,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":133,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculateTotalDirectCost on an `error` typed value.","line":133,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":133,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":134,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":134,"endColumn":126},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":134,"column":40,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":134,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculateTargetPrice on an `error` typed value.","line":134,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":134,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .target_markup_percentage on an `error` typed value.","line":134,"column":96,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":134,"endColumn":120},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":135,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":135,"endColumn":138},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":135,"column":46,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":135,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculateFullTargetPrice on an `error` typed value.","line":135,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":135,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":136,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":136,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":137,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":137,"endColumn":167},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":137,"column":47,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":137,"endColumn":92},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculateDiscountedOfferPrice on an `error` typed value.","line":137,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":137,"endColumn":92},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .overall_discount_percentage on an `error` typed value.","line":137,"column":134,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":137,"endColumn":161},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":138,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":138,"endColumn":111},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":138,"column":53,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":138,"endColumn":102},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculateEffectiveMarkupFopOverMp on an `error` typed value.","line":138,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":102},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":139,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":139,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":139,"column":24,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":139,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .determineEscalationStatus on an `error` typed value.","line":139,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":141,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":147,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":141,"column":43,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":141,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .generateBasicInvoiceSchedule on an `error` typed value.","line":141,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upfront_payment_percentage on an `error` typed value.","line":143,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":143,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upfront_payment_due_days on an `error` typed value.","line":144,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subsequent_installments_count on an `error` typed value.","line":145,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":145,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subsequent_installments_interval_days on an `error` typed value.","line":146,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":152,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":152,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":152,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":152,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":154,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":154,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":154,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":154,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":155,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":155,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `error` typed value.","line":155,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":156,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":156,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":157,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":157,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .target_markup_percentage on an `error` typed value.","line":157,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":158,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":158,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":159,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":159,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .overall_discount_percentage on an `error` typed value.","line":159,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":160,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":160,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upfront_payment_percentage on an `error` typed value.","line":160,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":160,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":161,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":161,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .upfront_payment_due_days on an `error` typed value.","line":161,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":162,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":162,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subsequent_installments_count on an `error` typed value.","line":162,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":162,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":163,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":163,"endColumn":106},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .subsequent_installments_interval_days on an `error` typed value.","line":163,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":163,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":167,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":167,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":168,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":168,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":169,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":169,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":170,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":170,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":171,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":171,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":172,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":172,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `error` typed value.","line":172,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":172,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":173,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":173,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .details on an `error` typed value.","line":173,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":173,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":175,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":182,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":175,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":175,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .additional_costs on an `error` typed value.","line":175,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":175,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":175,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":175,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":176,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":176,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .description on an `error` typed value.","line":176,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":176,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":177,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":177,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":177,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":183,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":189,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":183,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":183,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":183,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":183,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":183,"column":120,"nodeType":"ObjectExpression","messageId":"unsafeReturn","endLine":189,"endColumn":8}],"suppressedMessages":[],"errorCount":166,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { priceQuoteService } from '../../../../../lib/priceQuoteService';\nimport * as priceCalculator from '../../../../../lib/priceCalculator';\nimport type { GraphQLContext } from '../../helpers';\nimport type { PriceQuote as PriceQuoteType, PriceQuoteCreateInput, PriceQuoteUpdateInput, AdditionalCostInput, InvoiceScheduleEntryData } from '../../../../../lib/pricingTypes';\n// import { z } from 'zod'; // z is imported from validators now\nimport { PriceQuoteCreateInputSchema, PriceQuoteUpdateInputSchema } from '../../validators'; \nimport { z } from 'zod';\n\n// Placeholder Zod schemas - these should be moved to and imported from validators.ts\n// const PriceQuoteCreateInputZodSchema = z.object({ // Renamed for clarity\n//   name: z.string().optional().nullable(),\n//   status: z.string().optional().nullable(),\n//   base_minimum_price_mp: z.number().optional().nullable(),\n//   target_markup_percentage: z.number().optional().nullable(),\n//   final_offer_price_fop: z.number().optional().nullable(),\n//   overall_discount_percentage: z.number().optional().nullable(),\n//   upfront_payment_percentage: z.number().optional().nullable(),\n//   upfront_payment_due_days: z.number().int().optional().nullable(),\n//   subsequent_installments_count: z.number().int().optional().nullable(),\n//   subsequent_installments_interval_days: z.number().int().optional().nullable(),\n//   additional_costs: z.array(z.object({ description: z.string(), amount: z.number() })).optional().nullable(),\n// });\n// const PriceQuoteUpdateInputZodSchema = PriceQuoteCreateInputZodSchema.partial(); // Renamed for clarity\n\nexport const pricingMutationResolvers = {\n  createPriceQuote: async (_parent: any, args: { dealId: string, input: PriceQuoteCreateInput }, context: GraphQLContext): Promise<PriceQuoteType> => {\n    if (!context.currentUser || !context.token) throw new Error(\"Unauthorized\");\n    \n    const parseResult = PriceQuoteCreateInputSchema.safeParse(args.input);\n    if (!parseResult.success) {\n      const formattedErrors = parseResult.error.errors.map(e => `${e.path.join('.')}: ${e.message}`).join(', ');\n      throw new Error(`Invalid input: ${formattedErrors}`);\n    }\n    const validatedInput = parseResult.data;\n\n    console.log(\"[createPriceQuote] Args input additional_costs:\", JSON.stringify(args.input?.additional_costs));\n    console.log(\"[createPriceQuote] Validated additional_costs:\", JSON.stringify(validatedInput?.additional_costs));\n\n    const serviceInput: PriceQuoteCreateInput = {\n      ...validatedInput,\n      additional_costs: validatedInput.additional_costs ?? undefined, // Ensure undefined if null\n    };\n\n    try {\n      return await priceQuoteService.createPriceQuote(context.currentUser.id, args.dealId, serviceInput, context.token);\n    } catch (error: any) {\n      console.error(`Error creating price quote for deal ${args.dealId}:`, error);\n      throw new Error(`Failed to create price quote: ${error.message}`);\n    }\n  },\n\n  updatePriceQuote: async (_parent: any, args: { id: string, input: PriceQuoteUpdateInput }, context: GraphQLContext): Promise<PriceQuoteType> => {\n    // TEMPORARY DEBUG THROW: Test if resolver is reached at all\n    // throw new Error(\"[updatePriceQuote] Resolver entry point reached!\");\n\n    // Check for user authentication and essential ID\n    if (!context.currentUser || !context.currentUser.id || !context.token) {\n      throw new Error(\"Unauthorized - User, User ID, or Token missing\");\n    }\n    // Explicitly type userId as string after the guard\n    const userId: string = context.currentUser.id;\n\n    const parseResult = PriceQuoteUpdateInputSchema.safeParse(args.input);\n    if (!parseResult.success) {\n      // Assuming parseResult.error is defined when success is false, as per Zod\n      const formattedErrors = parseResult.error!.errors.map(e => `${e.path.join('.')}: ${e.message}`).join(', ');\n      throw new Error(`Invalid input for update: ${formattedErrors}`);\n    }\n    const validatedInput = parseResult.data;\n    \n    const serviceInput: PriceQuoteUpdateInput = {\n        ...validatedInput,\n        id: args.id, \n        additional_costs: validatedInput.additional_costs ?? undefined,\n    };\n\n    try {\n      // Use the non-nullable userId variable here\n      return await priceQuoteService.updatePriceQuote(args.id, userId, serviceInput, context.token);\n    } catch (error: any) {\n      console.error(`Error updating price quote ${args.id}:`, error);\n      throw new Error(`Failed to update price quote: ${error.message}`);\n    }\n  },\n\n  deletePriceQuote: async (_parent: any, args: { id: string }, context: GraphQLContext): Promise<boolean> => {\n    if (!context.currentUser || !context.token) throw new Error(\"Unauthorized\");\n    try {\n      return await priceQuoteService.deletePriceQuote(args.id, context.currentUser.id, context.token);\n    } catch (error: any) {\n      console.error(`Error deleting price quote ${args.id}:`, error);\n      throw new Error(`Failed to delete price quote: ${error.message}`);\n    }\n  },\n\n  calculatePriceQuotePreview: async (\n    _parent: any, \n    args: { dealId?: string | null, input: PriceQuoteUpdateInput }, \n    context: GraphQLContext\n  ): Promise<PriceQuoteType> => {\n    if (!context.currentUser) throw new Error(\"Unauthorized\");\n    \n    // TEMPORARY: Use a looser schema for additional_costs for debugging this specific preview function\n    // const LooseAdditionalCostSchema = z.object({\n    //   description: z.string().optional().nullable(),\n    //   amount: z.number().optional().nullable()\n    // }).passthrough(); // Allow other fields\n\n    // const LoosePriceQuoteUpdateInputSchemaForPreview = PriceQuoteUpdateInputSchema.extend({\n    //     additional_costs: z.array(LooseAdditionalCostSchema).optional().nullable()\n    // });\n\n    // For preview, we also use PriceQuoteUpdateInputSchema as it allows partial data\n    const parseResult = PriceQuoteUpdateInputSchema.safeParse(args.input);\n    // const parseResult = LoosePriceQuoteUpdateInputSchemaForPreview.safeParse(args.input);\n\n    if (!parseResult.success) {\n        const formattedErrors = parseResult.error.errors.map(e => `${e.path.join('.')}: ${e.message}`).join(', ');\n        throw new Error(`Invalid input for preview: ${formattedErrors}`);\n    }\n    const validatedInput = parseResult.data;\n\n    console.log(\"[calculatePriceQuotePreview] Args input additional_costs:\", JSON.stringify(args.input?.additional_costs));\n    console.log(\"[calculatePriceQuotePreview] Validated additional_costs:\", JSON.stringify(validatedInput?.additional_costs));\n\n    const mp = validatedInput.base_minimum_price_mp ?? 0;\n    // Ensure additional_costs is an array for the calculator, defaulting to empty if null/undefined\n    const additionalCostsForCalc = (validatedInput.additional_costs ?? []).map((ac: AdditionalCostInput) => ({ \n      amount: ac.amount ?? 0 \n    }));\n    const fop = validatedInput.final_offer_price_fop ?? 0;\n\n    const calculated_total_direct_cost = priceCalculator.calculateTotalDirectCost(mp, additionalCostsForCalc);\n    const calculated_target_price_tp = priceCalculator.calculateTargetPrice(mp, validatedInput.target_markup_percentage ?? 0);\n    const calculated_full_target_price_ftp = priceCalculator.calculateFullTargetPrice(calculated_target_price_tp, additionalCostsForCalc);\n    const discountedOfferPriceBase = fop; \n    const calculated_discounted_offer_price = priceCalculator.calculateDiscountedOfferPrice(discountedOfferPriceBase, validatedInput.overall_discount_percentage ?? 0);\n    const calculated_effective_markup_fop_over_mp = priceCalculator.calculateEffectiveMarkupFopOverMp(fop, mp);\n    const escalation = priceCalculator.determineEscalationStatus(fop, mp, calculated_total_direct_cost);\n    \n    const invoice_schedule_entries_data = priceCalculator.generateBasicInvoiceSchedule(\n      calculated_discounted_offer_price, \n      validatedInput.upfront_payment_percentage,\n      validatedInput.upfront_payment_due_days, \n      validatedInput.subsequent_installments_count, \n      validatedInput.subsequent_installments_interval_days\n    );\n\n    const previewQuote: PriceQuoteType = {\n      id: `preview-${Date.now()}`,\n      deal_id: args.dealId || 'temp-deal-id', \n      user_id: context.currentUser.id,\n      version_number: 0, \n      name: validatedInput.name ?? \"Preview Quote\",\n      status: validatedInput.status ?? 'draft',\n      base_minimum_price_mp: mp,\n      target_markup_percentage: validatedInput.target_markup_percentage ?? null,\n      final_offer_price_fop: fop,\n      overall_discount_percentage: validatedInput.overall_discount_percentage ?? null,\n      upfront_payment_percentage: validatedInput.upfront_payment_percentage ?? null,\n      upfront_payment_due_days: validatedInput.upfront_payment_due_days ?? null,\n      subsequent_installments_count: validatedInput.subsequent_installments_count ?? null,\n      subsequent_installments_interval_days: validatedInput.subsequent_installments_interval_days ?? null,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      \n      calculated_total_direct_cost,\n      calculated_target_price_tp,\n      calculated_full_target_price_ftp,\n      calculated_discounted_offer_price,\n      calculated_effective_markup_fop_over_mp,\n      escalation_status: escalation.status,\n      escalation_details: escalation.details,\n      \n      additional_costs: (validatedInput.additional_costs ?? []).map((ac: AdditionalCostInput, index: number) => ({ \n        description: ac.description,\n        amount: ac.amount,\n        id: `temp-ac-${index}`,\n        price_quote_id: `preview-${Date.now()}`,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      })),\n      invoice_schedule_entries: invoice_schedule_entries_data.map((entry: InvoiceScheduleEntryData, index: number) => ({\n        ...entry,\n        id: `temp-is-${index}`,\n        price_quote_id: `preview-${Date.now()}`,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      })),\n    };\n\n    return previewQuote;\n  },\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/mutations/stageMutations.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GeneratedStageType' is defined but never used.","line":5,"column":70,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":11,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":11,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":12,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":12,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":12,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":12,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":13,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":13,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":13,"column":32,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":13,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .parse on an `error` typed value.","line":13,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":13,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":13,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":13,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":14,"column":14,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":14,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":14,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":14,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":17,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":20,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":19,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":19,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_type on an `error` typed value.","line":19,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":21,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":21,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":21,"column":32,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":21,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createStage on an `error` typed value.","line":21,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":21,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":22,"column":13,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":32,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":23,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":23,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":23,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":23,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":24,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":24,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":24,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":24,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":25,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":25,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipeline_id on an `error` typed value.","line":25,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":25,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":26,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":26,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":26,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":27,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":27,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .order on an `error` typed value.","line":27,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":28,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":28,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":28,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":28,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":29,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":29,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_type on an `error` typed value.","line":29,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":30,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":30,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":30,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":31,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":31,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":31,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":34,"column":15,"nodeType":"Identifier","messageId":"unsafeCall","endLine":34,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":38,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":40,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":40,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":41,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":41,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":41,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":41,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":42,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":42,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":42,"column":32,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":42,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .parse on an `error` typed value.","line":42,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":42,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":43,"column":18,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":43,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":43,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":46,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":49,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":48,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":48,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_type on an `error` typed value.","line":48,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":50,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":50,"endColumn":96},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":50,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":50,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updateStage on an `error` typed value.","line":50,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":50,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":50,"column":79,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":50,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":51,"column":13,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":61,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":52,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":52,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":52,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":53,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":53,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":53,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":54,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":54,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipeline_id on an `error` typed value.","line":54,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":55,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":55,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":55,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":56,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":56,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .order on an `error` typed value.","line":56,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":56,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":57,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":57,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":57,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":57,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":58,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":58,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_type on an `error` typed value.","line":58,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":59,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":59,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":59,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":60,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":60,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":60,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":63,"column":15,"nodeType":"Identifier","messageId":"unsafeCall","endLine":63,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":67,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":69,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":69,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":70,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":70,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":70,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":70,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":71,"column":18,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":71,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":71,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":74,"column":13,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":74,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":74,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":74,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deleteStage on an `error` typed value.","line":74,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":74,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":76,"column":15,"nodeType":"Identifier","messageId":"unsafeCall","endLine":76,"endColumn":30}],"suppressedMessages":[],"errorCount":84,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GraphQLError } from 'graphql';\nimport { GraphQLContext, requireAuthentication, getAccessToken, processZodError } from '../../helpers';\nimport { StageCreateSchema, StageUpdateSchema } from '../../validators';\nimport * as stageService from '../../../../../lib/stageService';\nimport type { MutationResolvers, Stage as GraphQLStage, StageType as GeneratedStageType } from '../../../../../lib/generated/graphql';\n\nexport const stageMutations: Pick<MutationResolvers<GraphQLContext>, 'createStage' | 'updateStage' | 'deleteStage'> = {\n    createStage: async (_parent, args, context) => {\n      const action = 'creating stage';\n      try {\n        requireAuthentication(context);\n        const accessToken = getAccessToken(context)!;\n        const validatedInput = StageCreateSchema.parse(args.input);\n        if (!context.userPermissions?.includes('stage:create')) {\n                throw new GraphQLError('Forbidden', { extensions: { code: 'FORBIDDEN' } });\n        }\n        const serviceInput = {\n          ...validatedInput,\n          stage_type: validatedInput.stage_type,\n        };\n        const newStage = await stageService.createStage(accessToken, serviceInput);\n            return {\n                id: newStage.id,\n                user_id: newStage.user_id,\n                pipeline_id: newStage.pipeline_id,\n                name: newStage.name,\n                order: newStage.order,\n                deal_probability: newStage.deal_probability,\n                stage_type: newStage.stage_type,\n                created_at: newStage.created_at,\n                updated_at: newStage.updated_at,\n            } as GraphQLStage;\n      } catch (error) {\n        throw processZodError(error, action);\n      }\n    },\n    updateStage: async (_parent, args, context) => {\n      const action = `updating stage ${args.id}`;\n      try {\n        requireAuthentication(context);\n        const accessToken = getAccessToken(context)!;\n        const validatedInput = StageUpdateSchema.parse(args.input);\n            if (!context.userPermissions?.includes('stage:update_any')) {\n                throw new GraphQLError('Forbidden', { extensions: { code: 'FORBIDDEN' } });\n        }\n        const serviceInput = {\n            ...validatedInput,\n            stage_type: validatedInput.stage_type,\n        };\n        const updatedStage = await stageService.updateStage(accessToken, args.id, serviceInput);\n            return {\n                id: updatedStage.id,\n                user_id: updatedStage.user_id,\n                pipeline_id: updatedStage.pipeline_id,\n                name: updatedStage.name,\n                order: updatedStage.order,\n                deal_probability: updatedStage.deal_probability,\n                stage_type: updatedStage.stage_type,\n                created_at: updatedStage.created_at,\n                updated_at: updatedStage.updated_at,\n            } as GraphQLStage;\n      } catch (error) {\n        throw processZodError(error, action);\n      }\n    },\n    deleteStage: async (_parent, args, context) => {\n        const action = `deleting stage ${args.id}`;\n      try {\n        requireAuthentication(context);\n        const accessToken = getAccessToken(context)!;\n            if (!context.userPermissions?.includes('stage:delete_any')) {\n                throw new GraphQLError('Forbidden', { extensions: { code: 'FORBIDDEN' } });\n        }\n            return await stageService.deleteStage(accessToken, args.id);\n      } catch (error) {\n        throw processZodError(error, action);\n      }\n    },\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/mutations/userProfileMutations.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":10,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":10,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":11,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":11,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":11,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":11,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":12,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":12,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":12,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":12,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":14,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":14,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":15,"column":98,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":15,"endColumn":100},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":19,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":19,"column":90,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":95},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":21,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":25,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":21,"column":42,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":21,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updateUserProfile on an `error` typed value.","line":21,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":21,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":22,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":22,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .input on an `any` value.","line":23,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":23,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":27,"column":103,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":105},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":30,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":30,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":30,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":31,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":31,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":31,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":32,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":32,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .display_name on an `error` typed value.","line":32,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":33,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":33,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar_url on an `error` typed value.","line":33,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":36,"column":99,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":110},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":37,"column":15,"nodeType":"Identifier","messageId":"unsafeCall","endLine":37,"endColumn":30}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GraphQLError } from 'graphql';\nimport { GraphQLContext, requireAuthentication, getAccessToken, processZodError } from '../../helpers';\nimport * as userProfileService from '../../../../../lib/userProfileService';\nimport type { MutationResolvers, User as GraphQLUser, UpdateUserProfileInput } from '../../../../../lib/generated/graphql';\n\nexport const userProfileMutations: Pick<MutationResolvers<GraphQLContext>, 'updateUserProfile'> = {\n    updateUserProfile: async (_parent, args, context: GraphQLContext): Promise<GraphQLUser> => {\n      const actionDescription = 'updating user profile';\n      try {\n        requireAuthentication(context);\n        const currentUser = context.currentUser!;\n        const accessToken = getAccessToken(context)!;\n\n        if (!currentUser.email) {\n          console.error(`[Mutation.updateUserProfile] Critical: Authenticated user ${currentUser.id} has no email.`);\n          throw new GraphQLError('Authenticated user email is missing.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n        }\n        \n        console.log(`[Mutation.updateUserProfile] User: ${currentUser.id}, Input:`, args.input);\n\n        const updatedProfileData = await userProfileService.updateUserProfile(\n          currentUser.id,\n          args.input as UpdateUserProfileInput,\n          accessToken\n        );\n\n        console.log(`[Mutation.updateUserProfile] Successfully updated profile for user ${currentUser.id}`);\n        \n        return {\n          id: currentUser.id,\n          email: currentUser.email,\n          display_name: updatedProfileData.display_name,\n          avatar_url: updatedProfileData.avatar_url,\n        };\n      } catch (error) {\n        console.error(`[Mutation.updateUserProfile] Error ${actionDescription} for user ${context.currentUser?.id}:`, error);\n        throw processZodError(error, actionDescription);\n      }\n    },\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/organization.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'people' has no 'await' expression.","line":10,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":10,"endColumn":17,"suggestions":[{"messageId":"removeAsync","fix":{"range":[616,622],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":11,"column":6,"nodeType":"Identifier","messageId":"unsafeCall","endLine":11,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":12,"column":12,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":12,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":12,"column":26,"nodeType":"Identifier","messageId":"unsafeCall","endLine":12,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1135,1138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1135,1138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":19,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":19,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":20,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":20,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":20,"column":25,"nodeType":"Identifier","messageId":"unsafeCall","endLine":20,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":25,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":25,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":25,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":25,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":34,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":38,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":34,"column":58,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":34,"endColumn":112},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getCustomFieldDefinitions on an `error` typed value.","line":34,"column":87,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":112},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Organization on an `error` typed value.","line":36,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":39,"column":192,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":39,"endColumn":203},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldName on an `error` typed value.","line":39,"column":194,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":203},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":48,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":48,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [definition.fieldName] resolves to an `error` typed value.","line":48,"column":55,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":48,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldName on an `error` typed value.","line":48,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldName on an `error` typed value.","line":49,"column":114,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":123},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldType on an `error` typed value.","line":49,"column":139,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":148},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":52,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":52,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldName on an `error` typed value.","line":61,"column":116,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":61,"endColumn":125},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":62,"column":13,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":62,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldType on an `error` typed value.","line":65,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Text on an `error` typed value.","line":66,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":67,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Number on an `error` typed value.","line":69,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":69,"endColumn":40},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":70,"column":15,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":70,"endColumn":56,"suggestions":[{"messageId":"addBrackets","fix":{"range":[3989,4338],"text":"{ const num = parseFloat(String(rawValue));\n              if (!isNaN(num)) {\n                fieldValue.numberValue = num;\n              } else {\n                console.warn(`[Organization.customFieldValues] organization: ${organizationIdForLog}, Def: ${definition.fieldName}, could not parse number:`, rawValue);\n              }\n              break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":72,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldName on an `error` typed value.","line":74,"column":121,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":130},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Boolean on an `error` typed value.","line":77,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":78,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Date on an `error` typed value.","line":80,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":81,"column":15,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":81,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":81,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Dropdown on an `error` typed value.","line":83,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":85,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":85,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":87,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .MultiSelect on an `error` typed value.","line":90,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":92,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldName on an `error` typed value.","line":96,"column":119,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":128},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldType on an `error` typed value.","line":96,"column":173,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":182},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fieldName on an `error` typed value.","line":98,"column":114,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":98,"endColumn":123},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":99,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":99,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":102,"column":194,"nodeType":"Property","messageId":"anyAssignment","endLine":102,"endColumn":222},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definition on an `error` typed value.","line":102,"column":202,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":212},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":102,"column":224,"nodeType":"Property","messageId":"anyAssignment","endLine":102,"endColumn":242},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":102,"column":231,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":242},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":102,"column":244,"nodeType":"Property","messageId":"anyAssignment","endLine":102,"endColumn":262},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":102,"column":251,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":262},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":102,"column":264,"nodeType":"Property","messageId":"anyAssignment","endLine":102,"endColumn":283},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":102,"column":271,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":283},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":102,"column":285,"nodeType":"Property","messageId":"anyAssignment","endLine":102,"endColumn":301},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":102,"column":292,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":301},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":102,"column":303,"nodeType":"Property","messageId":"anyAssignment","endLine":102,"endColumn":331},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":102,"column":311,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":331},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":105,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":106,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":107,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":107,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":108,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":109,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":109,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":109,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":109,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":112,"column":199,"nodeType":"Property","messageId":"anyAssignment","endLine":112,"endColumn":227},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .definition on an `error` typed value.","line":112,"column":207,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":217},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":112,"column":229,"nodeType":"Property","messageId":"anyAssignment","endLine":112,"endColumn":328},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stringValue on an `error` typed value.","line":112,"column":237,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":248},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .numberValue on an `error` typed value.","line":112,"column":255,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":266},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .booleanValue on an `error` typed value.","line":112,"column":273,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":285},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateValue on an `error` typed value.","line":112,"column":292,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":301},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .selectedOptionValues on an `error` typed value.","line":112,"column":308,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":328}],"suppressedMessages":[],"errorCount":71,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { GraphQLContext } from '../helpers';\nimport { requireAuthentication, getAccessToken } from '../helpers';\nimport { GraphQLError } from 'graphql';\nimport type { OrganizationResolvers, CustomFieldDefinition, CustomFieldValue } from '../../../../lib/generated/graphql';\nimport { CustomFieldEntityType, CustomFieldType } from '../../../../lib/generated/graphql';\nimport * as customFieldDefinitionService from '../../../../lib/customFieldDefinitionService';\nimport { getAuthenticatedClient } from '../../../../lib/serviceUtils';\n\nexport const Organization: OrganizationResolvers<GraphQLContext> = {\n  people: async (_parent: { id: string }, _args: unknown, context: GraphQLContext) => {\n     requireAuthentication(context);\n     const accessToken = getAccessToken(context);\n     if (!accessToken) throw new GraphQLError('Missing access token', { extensions: { code: 'UNAUTHENTICATED' } });\n     console.warn(`Resolver Organization.people not fully implemented - needs service update`);\n     return []; // Return empty array for now\n  },\n\n  customFieldValues: async (parent: { id: string; db_custom_field_values?: Record<string, any> | null }, _args: unknown, context: GraphQLContext): Promise<CustomFieldValue[]> => {\n    requireAuthentication(context);\n    const accessToken = getAccessToken(context);\n    if (!accessToken) {\n      console.error('Organization.customFieldValues: Missing access token');\n      throw new GraphQLError('Missing access token', { extensions: { code: 'UNAUTHENTICATED' } });\n    }\n    const supabase = getAuthenticatedClient(accessToken);\n    const organizationIdForLog = parent.id || 'unknown_organization_id';\n    console.log(`[Organization.customFieldValues] Resolver START for organization: ${organizationIdForLog}`);\n\n    const organizationSpecificValues = parent.db_custom_field_values || {};\n    console.log(`[Organization.customFieldValues] organization: ${organizationIdForLog}, received parent.db_custom_field_values:`, JSON.stringify(organizationSpecificValues));\n\n    try {\n      console.log(`[Organization.customFieldValues] organization: ${organizationIdForLog}, fetching definitions for Organization entity.`);\n      const definitions: CustomFieldDefinition[] = await customFieldDefinitionService.getCustomFieldDefinitions(\n        supabase,\n        CustomFieldEntityType.Organization, // Use enum value\n        false // includeInactive = false\n      );\n      console.log(`[Organization.customFieldValues] organization: ${organizationIdForLog}, loaded ${definitions.length} active Organization definitions:`, JSON.stringify(definitions.map(d => d.fieldName)));\n\n      if (!definitions || definitions.length === 0) {\n        console.log(`[Organization.customFieldValues] organization: ${organizationIdForLog}, no active Organization definitions found. Returning [].`);\n        return [];\n      }\n\n      const mappedValues: CustomFieldValue[] = definitions\n        .map((definition: CustomFieldDefinition) => {\n          const rawValue = organizationSpecificValues[definition.fieldName];\n          console.log(`[Organization.customFieldValues] organization: ${organizationIdForLog}, Def: ${definition.fieldName} (${definition.fieldType}), RawValue from DB:`, rawValue);\n\n          const fieldValue: CustomFieldValue = {\n            definition: definition, \n            stringValue: null,\n            numberValue: null,\n            booleanValue: null,\n            dateValue: null,\n            selectedOptionValues: null,\n          };\n\n          if (rawValue === undefined || rawValue === null) {\n            console.log(`[Organization.customFieldValues] organization: ${organizationIdForLog}, Def: ${definition.fieldName}, rawValue is null/undefined. FieldValue will have nulls.`);\n            return fieldValue; \n          }\n\n          switch (definition.fieldType) {\n            case CustomFieldType.Text: \n              fieldValue.stringValue = String(rawValue);\n              break;\n            case CustomFieldType.Number:\n              const num = parseFloat(String(rawValue));\n              if (!isNaN(num)) {\n                fieldValue.numberValue = num;\n              } else {\n                console.warn(`[Organization.customFieldValues] organization: ${organizationIdForLog}, Def: ${definition.fieldName}, could not parse number:`, rawValue);\n              }\n              break;\n            case CustomFieldType.Boolean:\n              fieldValue.booleanValue = Boolean(rawValue);\n              break;\n            case CustomFieldType.Date:\n              fieldValue.dateValue = rawValue; \n              break;\n            case CustomFieldType.Dropdown: \n              if (Array.isArray(rawValue) && rawValue.length > 0) {\n                fieldValue.selectedOptionValues = [String(rawValue[0])]; \n              } else if (typeof rawValue === 'string') { \n                fieldValue.selectedOptionValues = [rawValue];\n              }\n              break;\n            case CustomFieldType.MultiSelect:\n              if (Array.isArray(rawValue)) {\n                fieldValue.selectedOptionValues = rawValue.map(String);\n              }\n              break;\n            default:\n              console.warn(`[Organization.customFieldValues] organization: ${organizationIdForLog}, Def: ${definition.fieldName}, Unhandled custom field type: ${definition.fieldType as string}`);\n          }\n          console.log(`[Organization.customFieldValues] organization: ${organizationIdForLog}, Def: ${definition.fieldName}, mapped fieldValue:`, JSON.stringify(fieldValue));\n          return fieldValue;\n        });\n      \n      console.log(`[Organization.customFieldValues] organization: ${organizationIdForLog}, mappedValues before filter (${mappedValues.length} items):`, JSON.stringify(mappedValues.map(fv => ({ def: fv.definition.fieldName, sv: fv.stringValue, nv: fv.numberValue, bv: fv.booleanValue, dv: fv.dateValue, sov: fv.selectedOptionValues }))));\n\n      const resolvedValues = mappedValues.filter(fv => \n          fv.stringValue !== null || \n          fv.numberValue !== null || \n          fv.booleanValue !== null || \n          fv.dateValue !== null || \n          (fv.selectedOptionValues && fv.selectedOptionValues.length > 0)\n      );\n      \n      console.log(`[Organization.customFieldValues] organization: ${organizationIdForLog}, resolvedValues after filter (${resolvedValues.length} items):`, JSON.stringify(resolvedValues.map(fv => ({ def: fv.definition.fieldName, val: fv.stringValue || fv.numberValue || fv.booleanValue || fv.dateValue || fv.selectedOptionValues }))));\n      console.log(`[Organization.customFieldValues] Resolver END for organization: ${organizationIdForLog}`);\n      return resolvedValues;\n\n    } catch (error) {\n      console.error(`Error resolving customFieldValues for organization ${organizationIdForLog}:`, error);\n      if (error instanceof GraphQLError) throw error;\n      throw new GraphQLError('Could not resolve custom field values for the organization.', {\n        extensions: { code: 'INTERNAL_SERVER_ERROR' },\n      });\n    }\n  }\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/person.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3606,3609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3606,3609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":71,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":80},{"ruleId":"@typescript-eslint/no-base-to-string","severity":2,"message":"'rawValue' will use Object's default stringification format ('[object Object]') when stringified.","line":137,"column":49,"nodeType":"Identifier","messageId":"baseToString","endLine":137,"endColumn":57},{"ruleId":"@typescript-eslint/no-base-to-string","severity":2,"message":"'rawValue' will use Object's default stringification format ('[object Object]') when stringified.","line":141,"column":47,"nodeType":"Identifier","messageId":"baseToString","endLine":141,"endColumn":55},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"never\" of template literal expression.","line":181,"column":146,"nodeType":"MemberExpression","messageId":"invalidType","endLine":181,"endColumn":166}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Resolvers for Person type fields\nimport { GraphQLError } from 'graphql';\nimport { GraphQLContext, requireAuthentication, getAccessToken } from '../helpers.js';\nimport { organizationService } from '../../../../lib/organizationService.js';\n// Import types with .js extension as required by NodeNext for actual .js files at runtime\nimport type { PersonResolvers, Organization, CustomFieldValue as GraphQLCustomFieldValue, CustomFieldDefinition as GraphQLCustomFieldDefinition, Person as GraphQLPerson, Deal as GraphQLDeal, Maybe } from '../../../../lib/generated/graphql.js'; \nimport { CustomFieldEntityType, CustomFieldType } from '../../../../lib/generated/graphql.js'; // Also with .js\nimport * as customFieldDefinitionService from '../../../../lib/customFieldDefinitionService.js';\nimport { getAuthenticatedClient } from '../../../../lib/serviceUtils.js';\nimport { dealService } from '../../../../lib/dealService.js'; // Keep commented until deals resolver is implemented\n\n// Interface for the parent object IF it has db_custom_field_values.\n// The actual parent for PersonResolvers is GraphQLPerson.\ninterface PersonWithRawCustomFields extends GraphQLPerson { // Renamed for clarity\n  db_custom_field_values?: Record<string, unknown> | null; \n}\n\n// Define parent types for context within these resolvers - Will be removed as types are inferred\n// type PersonOrganizationParent = { \n//   organization_id?: string | null \n// };\n\n// type PersonDealsParent = { \n//   id: string \n// };\n\nexport const Person: PersonResolvers<GraphQLContext> = { // ParentType defaults to GraphQLPerson\n    // Resolver for the nested 'organization' field within Person\n    organization: async (parent: GraphQLPerson, _args: Record<string, never>, context: GraphQLContext): Promise<Maybe<Organization>> => {\n      requireAuthentication(context);\n      const accessToken = getAccessToken(context);\n      if (!accessToken) throw new GraphQLError('Missing access token', { extensions: { code: 'UNAUTHENTICATED' } });\n\n      if (!parent.organization_id) {\n        return null;\n      }\n      try {\n        const orgRecord: Organization | null = await organizationService.getOrganizationById(context.currentUser!.id, parent.organization_id, accessToken) as (Organization | null);\n        if (!orgRecord) {\n          return null;\n        }\n        // orgRecord is already a GraphQL Organization object, which includes fields like activities, deals, etc.\n        // These will be resolved by their respective resolvers on the Organization type.\n        return orgRecord; \n      } catch (e) {\n        console.error('Error fetching Person.organization:', e);\n        return null; \n      }\n    },\n    // Placeholder for deals linked to a person (requires dealService update)\n    deals: async (parent: GraphQLPerson, _args: Record<string, never>, context: GraphQLContext): Promise<Maybe<Array<GraphQLDeal>>> => {\n      requireAuthentication(context);\n      const accessToken = getAccessToken(context);\n      if (!accessToken) throw new GraphQLError('Missing access token', { extensions: { code: 'UNAUTHENTICATED' } });\n\n      if (!parent.id) {\n        console.error('[Person.deals] Person ID is missing from parent object.');\n        return []; // Or throw error, depending on desired behavior for missing parent ID\n      }\n\n      try {\n        console.log(`[Person.deals] Fetching deals for person ID: ${parent.id}`);\n        const deals = await dealService.getDealsByPersonId(parent.id, accessToken);\n        console.log(`[Person.deals] Found ${deals.length} deals for person ID: ${parent.id}`);\n        return deals;\n      } catch (e: any) {\n        console.error(`Error fetching Person.deals for person ID ${parent.id}:`, e);\n        // Optionally, re-throw specific errors or a generic one\n        if (e instanceof GraphQLError) throw e;\n        throw new GraphQLError('Could not fetch deals for the person.', {\n          extensions: { code: 'INTERNAL_SERVER_ERROR', originalError: e.message },\n        });\n      }\n    },\n    customFieldValues: async (parentAsGraphQLPerson: GraphQLPerson, _args: Record<string, never>, context: GraphQLContext): Promise<GraphQLCustomFieldValue[]> => {\n      // Type assertion for parent to access db_custom_field_values\n      const parent = parentAsGraphQLPerson as PersonWithRawCustomFields;\n      \n      requireAuthentication(context);\n      const accessToken = getAccessToken(context)!;\n      const supabase = getAuthenticatedClient(accessToken);\n\n      const personIdForLog = parent.id || 'unknown_person_id';\n      console.log(`[Person.customFieldValues] Resolver START for person: ${personIdForLog}`);\n\n      const personSpecificValues = parent.db_custom_field_values || {};\n      console.log(`[Person.customFieldValues] person: ${personIdForLog}, received parent.db_custom_field_values:`, JSON.stringify(personSpecificValues));\n\n      if (Object.keys(personSpecificValues).length === 0) {\n        console.log(`[Person.customFieldValues] person: ${personIdForLog}, no custom field values found in parent data. Returning [].`);\n        return [];\n      }\n\n      try {\n        console.log(`[Person.customFieldValues] person: ${personIdForLog}, fetching definitions for Person entity.`);\n        \n        const definitions: Array<GraphQLCustomFieldDefinition> = await customFieldDefinitionService.getCustomFieldDefinitions(\n          supabase,\n          CustomFieldEntityType.Person,\n          false \n        ) as GraphQLCustomFieldDefinition[];\n        console.log(`[Person.customFieldValues] person: ${personIdForLog}, loaded ${definitions.length} active Person definitions:`, JSON.stringify(definitions.map(d => d.fieldName)));\n\n        if (!definitions || definitions.length === 0) {\n          console.log(`[Person.customFieldValues] person: ${personIdForLog}, no active Person definitions found. Returning [].`);\n          return [];\n        }\n\n        const mappedValues: GraphQLCustomFieldValue[] = definitions\n          .map((definition: GraphQLCustomFieldDefinition) => {\n            let rawValue: unknown;\n            if (definition.fieldName in personSpecificValues) {\n              rawValue = personSpecificValues[definition.fieldName];\n            } else {\n              console.log(`[Person.customFieldValues] person: ${personIdForLog}, Def: ${definition.fieldName}, fieldName not found in personSpecificValues.`);\n            }\n            \n            console.log(`[Person.customFieldValues] person: ${personIdForLog}, Def: ${definition.fieldName} (${definition.fieldType}), RawValue from DB:`, (rawValue !== null && typeof rawValue === 'object') ? JSON.stringify(rawValue) : rawValue);\n\n            const fieldValue: GraphQLCustomFieldValue = {\n              definition: definition, // Send full definition\n              stringValue: null,\n              numberValue: null,\n              booleanValue: null,\n              dateValue: null,\n              selectedOptionValues: null,\n            };\n\n            if (rawValue === undefined || rawValue === null) {\n              // Retain the definition, but all values will be null\n              console.log(`[Person.customFieldValues] person: ${personIdForLog}, Def: ${definition.fieldName}, rawValue is null/undefined. FieldValue will have nulls.`);\n              return fieldValue; \n            }\n\n            switch (definition.fieldType) {\n              case CustomFieldType.Text: {\n                fieldValue.stringValue = String(rawValue);\n                break;\n              }\n              case CustomFieldType.Number: {\n                const num = parseFloat(String(rawValue)); // Ensure string for parseFloat\n                if (!isNaN(num)) {\n                  fieldValue.numberValue = num;\n                } else {\n                  console.warn(`[Person.customFieldValues] person: ${personIdForLog}, Def: ${definition.fieldName}, could not parse number:`, (rawValue !== null && typeof rawValue === 'object') ? JSON.stringify(rawValue) : rawValue);\n                }\n                break;\n              }\n              case CustomFieldType.Boolean: {\n                fieldValue.booleanValue = Boolean(rawValue);\n                break;\n              }\n              case CustomFieldType.Date: {\n                if (rawValue && (typeof rawValue === 'string' || rawValue instanceof Date)) {\n                  const date = new Date(rawValue);\n                  if (!isNaN(date.getTime())) {\n                    fieldValue.dateValue = date;\n                  } else {\n                    console.warn(`[Person.customFieldValues] person: ${personIdForLog}, Def: ${definition.fieldName}, could not parse date:`, (rawValue !== null && typeof rawValue === 'object') ? JSON.stringify(rawValue) : rawValue);\n                  }\n                } else if (rawValue !== null && rawValue !== undefined) { \n                  console.warn(`[Person.customFieldValues] person: ${personIdForLog}, Def: ${definition.fieldName}, received invalid type for date:`, (rawValue !== null && typeof rawValue === 'object') ? JSON.stringify(rawValue) : rawValue);\n                }\n                break;\n              }\n              case CustomFieldType.Dropdown: {\n                if (Array.isArray(rawValue) && rawValue.length > 0) {\n                  fieldValue.selectedOptionValues = [String(rawValue[0])];\n                } else if (typeof rawValue === 'string') { \n                  fieldValue.selectedOptionValues = [rawValue];\n                }\n                break;\n              }\n              case CustomFieldType.MultiSelect: {\n                if (Array.isArray(rawValue)) {\n                  fieldValue.selectedOptionValues = rawValue.map(String);\n                }\n                break;\n              }\n              default: {\n                console.warn(`[Person.customFieldValues] person: ${personIdForLog}, Def: ${definition.fieldName}, Unhandled custom field type: ${definition.fieldType}`);\n              }\n            }\n            console.log(`[Person.customFieldValues] person: ${personIdForLog}, Def: ${definition.fieldName}, mapped fieldValue:`, JSON.stringify(fieldValue));\n            return fieldValue;\n          });\n        \n        console.log(`[Person.customFieldValues] person: ${personIdForLog}, mappedValues before filter (${mappedValues.length} items):`, JSON.stringify(mappedValues.map(fv => ({ def: fv.definition.fieldName, sv: fv.stringValue, nv: fv.numberValue, bv: fv.booleanValue, dv: fv.dateValue, sov: fv.selectedOptionValues }))));\n\n        const resolvedValues = mappedValues.filter(fv => \n            fv.stringValue !== null || \n            fv.numberValue !== null || \n            fv.booleanValue !== null || \n            fv.dateValue !== null || \n            (fv.selectedOptionValues && fv.selectedOptionValues.length > 0)\n        );\n        \n        console.log(`[Person.customFieldValues] person: ${personIdForLog}, resolvedValues after filter (${resolvedValues.length} items):`, JSON.stringify(resolvedValues.map(fv => ({ def: fv.definition.fieldName, val: fv.stringValue || fv.numberValue || fv.booleanValue || fv.dateValue || fv.selectedOptionValues }))));\n        console.log(`[Person.customFieldValues] Resolver END for person: ${personIdForLog}`);\n        return resolvedValues;\n\n      } catch (error) {\n        console.error('Error resolving customFieldValues for person:', parent.id, error);\n        if (error instanceof GraphQLError) throw error;\n        throw new GraphQLError('Could not resolve custom field values for the person.', {\n          extensions: { code: 'INTERNAL_SERVER_ERROR' },\n        });\n      }\n    }\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/pricing.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AdditionalCost' is defined but never used.","line":4,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InvoiceScheduleEntry' is defined but never used.","line":4,"column":61,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":81},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1082,1085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1082,1085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'PriceQuoteType' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":14,"column":92,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":14,"endColumn":106},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":15,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":15,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":15,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":15,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":17,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":17,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPriceQuoteById on an `error` typed value.","line":17,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":17,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":17,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":17,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":17,"column":97,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":17,"endColumn":102},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1386,1389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1386,1389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":20,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":20,"endColumn":68},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1590,1593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1590,1593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":24,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":24,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":24,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":24,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":26,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":26,"endColumn":113},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":26,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":26,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .listPriceQuotesForDeal on an `error` typed value.","line":26,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":26,"column":82,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":26,"column":106,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":111},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1902,1905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1902,1905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":29,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":78},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2213,2216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2213,2216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'Deal' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":36,"column":86,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":36,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":37,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":37,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_id on an `error` typed value.","line":38,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":41,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":41,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getDealById on an `error` typed value.","line":41,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":41,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_id on an `error` typed value.","line":41,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `error` typed value.","line":41,"column":92,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":97},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2606,2609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2606,2609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_id on an `error` typed value.","line":43,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":43,"column":80,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":43,"column":93,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":100},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2863,2866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2863,2866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":48,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":59},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'User' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":48,"column":86,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":48,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":51,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":56,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":56,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":56,"column":33,"nodeType":"Identifier","messageId":"unsafeCall","endLine":56,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":56,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":56,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":63,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":63,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":63,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":64,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":64,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":64,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":65,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":65,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .display_name on an `error` typed value.","line":65,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":66,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":66,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar_url on an `error` typed value.","line":66,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4252,4255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4252,4255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":70,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":70,"column":80,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":70,"column":93,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":100}],"suppressedMessages":[],"errorCount":55,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { priceQuoteService } from '../../../../lib/priceQuoteService';\n// import { priceCalculator } from '../../../../lib/priceCalculator'; // Not directly used if service handles calculations\nimport type { GraphQLContext } from '../helpers';\nimport type { PriceQuote as PriceQuoteType, AdditionalCost, InvoiceScheduleEntry } from '../../../../lib/pricingTypes'; // Using our TS types\nimport { dealService } from '../../../../lib/dealService'; \nimport { getServiceLevelUserProfileData } from '../../../../lib/userProfileService';\nimport type { Deal } from '../../../../lib/generated/graphql'; // Assuming Deal type is available\nimport type { User } from '../../../../lib/generated/graphql'; // Assuming User type is available or define a suitable one\n// TODO: Import DealService and UserService/UserProfileService types/functions when available for relational resolvers\n// Example: import { dealService } from '../../../../lib/dealService'; \n// Example: import { userProfileService } from '../../../../lib/userProfileService';\n\nexport const Query = {\n  priceQuote: async (_parent: any, args: { id: string }, context: GraphQLContext): Promise<PriceQuoteType | null> => {\n    if (!context.currentUser || !context.token) throw new Error(\"Unauthorized\");\n    try {\n      return await priceQuoteService.getPriceQuoteById(args.id, context.currentUser.id, context.token);\n    } catch (error: any) { \n      console.error(`Error fetching priceQuote by ID ${args.id}:`, error);\n      throw new Error(`Failed to fetch price quote: ${error.message}`);\n    }\n  },\n  priceQuotesForDeal: async (_parent: any, args: { dealId: string }, context: GraphQLContext): Promise<PriceQuoteType[]> => {\n    if (!context.currentUser || !context.token) throw new Error(\"Unauthorized\");\n    try {\n      return await priceQuoteService.listPriceQuotesForDeal(args.dealId, context.currentUser.id, context.token);\n    } catch (error: any) {\n      console.error(`Error fetching priceQuotesForDeal ${args.dealId}:`, error);\n      throw new Error(`Failed to fetch price quotes for deal: ${error.message}`);\n    }\n  },\n};\n\n// Field resolvers for the PriceQuote type\nexport const PriceQuoteResolver = { \n  deal: async (parent: PriceQuoteType, _args: any, context: GraphQLContext): Promise<Deal | null> => {\n    if (!context.currentUser || !context.token) throw new Error(\"Unauthorized\");\n    if (!parent.deal_id) return null;\n    try {\n      // Assuming dealService.getDealById expects userId first, then dealId, then token\n      return await dealService.getDealById(context.currentUser.id, parent.deal_id, context.token);\n    } catch (error: any) {\n      console.error(`Error resolving deal ${parent.deal_id} for quote ${parent.id}:`, error.message);\n      // Decide if to throw, or return null to allow partial responses\n      return null; \n    }\n  },\n  user: async (parent: PriceQuoteType, _args: any, context: GraphQLContext): Promise<User | null> => {\n    // Note: context.currentUser might already have some user info. \n    // However, parent.user_id refers to the quote owner, which might not always be the currentUser making the request (e.g. admin access)\n    if (!parent.user_id) return null;\n    // getServiceLevelUserProfileData does not require a token as it uses the service client\n    // Ensure it's safe to call without further auth checks if context.currentUser might differ from parent.user_id\n    // For now, assume direct call is okay if parent.user_id is present.\n    try {\n      const userProfile = await getServiceLevelUserProfileData(parent.user_id);\n      if (!userProfile) return null;\n      \n      // Adapt userProfile to the GraphQL User type\n      // The User type in generated/graphql might have id, email, name, avatarUrl fields.\n      // ServiceLevelUserProfile has user_id, email, display_name, avatar_url.\n      return {\n        id: userProfile.user_id, // Map user_id to id\n        email: userProfile.email,\n        name: userProfile.display_name, // Map display_name to name\n        avatarUrl: userProfile.avatar_url, // Map avatar_url to avatarUrl\n        // Add any other fields required by the GraphQL User type, possibly with null/default values\n      } as User; // Cast to User, ensure all required fields of User are populated\n    } catch (error: any) {\n      console.error(`Error resolving user ${parent.user_id} for quote ${parent.id}:`, error.message);\n      return null;\n    }\n  },\n  \n  // additional_costs and invoice_schedule_entries are assumed to be populated by the service methods \n  // (e.g., getPriceQuoteById, listPriceQuotesForDeal) directly onto the parent PriceQuote object.\n  // If they were separate service calls, resolvers would look like this:\n  /*\n  additional_costs: async (parent: PriceQuoteType, _args: any, context: GraphQLContext): Promise<AdditionalCost[]> => {\n    if (!context.currentUser || !context.token) throw new Error(\"Unauthorized\");\n    // Example: return await priceQuoteService.getAdditionalCostsForQuote(parent.id, context.currentUser.id, context.token);\n    // For now, assume parent.additional_costs is populated by the primary service call that resolved the PriceQuote.\n    if (parent.additional_costs) return parent.additional_costs;\n    throw new Error ('Additional costs resolver not fully implemented or data not pre-fetched.');\n  },\n  invoice_schedule_entries: async (parent: PriceQuoteType, _args: any, context: GraphQLContext): Promise<InvoiceScheduleEntry[]> => {\n    if (!context.currentUser || !context.token) throw new Error(\"Unauthorized\");\n    // Example: return await priceQuoteService.getInvoiceScheduleEntriesForQuote(parent.id, context.currentUser.id, context.token);\n    if (parent.invoice_schedule_entries) return parent.invoice_schedule_entries;\n    throw new Error ('Invoice schedule entries resolver not fully implemented or data not pre-fetched.');\n  },\n  */\n\n  // Calculated fields are expected to be on the parent object, either from DB or calculated by priceQuoteService.\n  // If a calculated field needed specific logic only possible at GraphQL resolver time (rare), it would go here.\n  // Example: \n  // calculated_total_direct_cost: (parent: PriceQuoteType) => { \n  //   if (parent.calculated_total_direct_cost != null) return parent.calculated_total_direct_cost;\n  //   // Fallback calculation if needed, though service should handle this.\n  //   const mp = parent.base_minimum_price_mp || 0;\n  //   const acItems = parent.additional_costs?.map(ac => ({ amount: ac.amount })) || [];\n  //   return priceCalculator.calculateTotalDirectCost(mp, acItems);\n  // },\n};\n\n// Resolvers for other types like AdditionalCost, MarkupFactor, InvoiceScheduleEntry if they have complex fields.\n// Often, these are simple and don't need explicit field resolvers if data maps directly. ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/query.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GraphQLPerson' is defined but never used.","line":20,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GraphQLOrganization' is defined but never used.","line":21,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GraphQLDeal' is defined but never used.","line":22,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":36,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":36,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":36,"column":39,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":36,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `error` typed value.","line":36,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `error` typed value.","line":38,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `error` typed value.","line":39,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":52},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'GraphQLUser' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":54,"column":66,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":54,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":55,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":55,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":56,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":56,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `error` typed value.","line":56,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":56,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":57,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":57,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":57,"column":27,"nodeType":"Identifier","messageId":"unsafeCall","endLine":57,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":59,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":62,"column":78,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":67,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":67,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":67,"column":31,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":67,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getUserProfile on an `error` typed value.","line":67,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":67,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":70,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":70,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":70,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":71,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":71,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":71,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":72,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":72,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .display_name on an `error` typed value.","line":72,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":73,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":73,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar_url on an `error` typed value.","line":73,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":73,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":76,"column":81,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":79,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":79,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":79,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":80,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":80,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":80,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":91,"column":11,"nodeType":"Identifier","messageId":"unsafeCall","endLine":91,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":92,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":92,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":92,"column":31,"nodeType":"Identifier","messageId":"unsafeCall","endLine":92,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":93,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":93,"endColumn":97},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":93,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":93,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPeople on an `error` typed value.","line":93,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":93,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":93,"column":81,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":95,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":109,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":95,"column":18,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":95,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":95,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":96,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":96,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":96,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":97,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":97,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `any` value.","line":97,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":98,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":98,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `any` value.","line":98,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":98,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":99,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":99,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `any` value.","line":99,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":100,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":100,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .first_name on an `any` value.","line":100,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":101,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":101,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .last_name on an `any` value.","line":101,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":102,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":102,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":102,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":103,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":103,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .phone on an `any` value.","line":103,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":104,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":104,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `any` value.","line":104,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":105,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":105,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .organization_id on an `any` value.","line":105,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":107,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":107,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":107,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":107,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4429,4432],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4429,4432],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":16,"nodeType":"Identifier","messageId":"unsafeCall","endLine":111,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":117,"column":11,"nodeType":"Identifier","messageId":"unsafeCall","endLine":117,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":118,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":118,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":118,"column":31,"nodeType":"Identifier","messageId":"unsafeCall","endLine":118,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":119,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":119,"endColumn":101},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":119,"column":27,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":119,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPersonById on an `error` typed value.","line":119,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":119,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":119,"column":76,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":119,"column":85,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":122,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":135,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":123,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":123,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":123,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":123,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":124,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":124,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":124,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":124,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":125,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":125,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":125,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":125,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":126,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":126,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":126,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":127,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":127,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .first_name on an `error` typed value.","line":127,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":127,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":128,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":128,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .last_name on an `error` typed value.","line":128,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":128,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":129,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":129,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":129,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":129,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":130,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":130,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .phone on an `error` typed value.","line":130,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":130,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":131,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":131,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `error` typed value.","line":131,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":132,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":132,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .organization_id on an `error` typed value.","line":132,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":132,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":134,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":134,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5424,5427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5424,5427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":134,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":134,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5465,5468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5465,5468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":137,"column":16,"nodeType":"Identifier","messageId":"unsafeCall","endLine":137,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":141,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":141,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":142,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":142,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":142,"column":27,"nodeType":"Identifier","messageId":"unsafeCall","endLine":142,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":144,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":144,"endColumn":91},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":144,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":144,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPeople on an `error` typed value.","line":144,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":144,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":144,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":145,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":148,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":145,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":145,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":145,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":145,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":146,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":146,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":146,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":147,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":147,"endColumn":103},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .first_name on an `any` value.","line":147,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .last_name on an `any` value.","line":147,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":147,"column":78,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":150,"column":16,"nodeType":"Identifier","messageId":"unsafeCall","endLine":150,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":156,"column":8,"nodeType":"Identifier","messageId":"unsafeCall","endLine":156,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":157,"column":14,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":157,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":157,"column":28,"nodeType":"Identifier","messageId":"unsafeCall","endLine":157,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":159,"column":16,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":159,"endColumn":103},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":159,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":159,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getOrganizations on an `error` typed value.","line":159,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":159,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":159,"column":87,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":161,"column":10,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":171,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":161,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":161,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":161,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":162,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":162,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":162,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":162,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":163,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":163,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `any` value.","line":163,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":163,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":164,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":164,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `any` value.","line":164,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":165,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":165,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `any` value.","line":165,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":165,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":166,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":166,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":166,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":166,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":167,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":167,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":167,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":167,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":168,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":168,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `any` value.","line":168,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":168,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":169,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":169,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":169,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":169,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":171,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6923,6926],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6923,6926],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":173,"column":17,"nodeType":"Identifier","messageId":"unsafeCall","endLine":173,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":177,"column":8,"nodeType":"Identifier","messageId":"unsafeCall","endLine":177,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":178,"column":14,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":178,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":178,"column":28,"nodeType":"Identifier","messageId":"unsafeCall","endLine":178,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":180,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":180,"endColumn":113},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":180,"column":27,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":180,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getOrganizationById on an `error` typed value.","line":180,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":180,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":180,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":180,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":180,"column":88,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":180,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":180,"column":97,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":180,"endColumn":99},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":183,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":192,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":184,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":184,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":184,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":184,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":185,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":185,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":185,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":185,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":186,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":186,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":186,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":186,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":187,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":187,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":187,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":187,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":188,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":188,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":188,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":188,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":189,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":189,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `error` typed value.","line":189,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":190,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":190,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `error` typed value.","line":190,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":191,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":191,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":191,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7719,7722],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7719,7722],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":191,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":192,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7760,7763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7760,7763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":194,"column":18,"nodeType":"Identifier","messageId":"unsafeCall","endLine":194,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":200,"column":8,"nodeType":"Identifier","messageId":"unsafeCall","endLine":200,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":201,"column":14,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":201,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":201,"column":28,"nodeType":"Identifier","messageId":"unsafeCall","endLine":201,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":203,"column":18,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":203,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":203,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":203,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getDeals on an `error` typed value.","line":203,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":203,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":203,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":204,"column":12,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":219,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":204,"column":19,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":204,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":204,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":204,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":205,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":205,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":205,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":205,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":206,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":206,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `any` value.","line":206,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":206,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":207,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":207,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `any` value.","line":207,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":207,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":208,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":208,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `any` value.","line":208,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":208,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":209,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":209,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":209,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":209,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":210,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":210,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `any` value.","line":210,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":210,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":211,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":211,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expected_close_date on an `any` value.","line":211,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":211,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":212,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":212,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipeline_id on an `any` value.","line":212,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":212,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":213,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":213,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `any` value.","line":213,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":214,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":214,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .person_id on an `any` value.","line":214,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":214,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":215,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":215,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .organization_id on an `any` value.","line":215,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":215,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":216,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":216,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_specific_probability on an `any` value.","line":216,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":216,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":218,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":218,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":218,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8927,8930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8927,8930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":221,"column":18,"nodeType":"Identifier","messageId":"unsafeCall","endLine":221,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":225,"column":8,"nodeType":"Identifier","messageId":"unsafeCall","endLine":225,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":226,"column":14,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":226,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":226,"column":28,"nodeType":"Identifier","messageId":"unsafeCall","endLine":226,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":228,"column":18,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":228,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":228,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":228,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getDealById on an `error` typed value.","line":228,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":228,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentUser on an `any` value.","line":228,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":228,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":228,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":228,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":228,"column":82,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":228,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":230,"column":12,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":245,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":231,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":231,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":231,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":231,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":232,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":232,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":232,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":232,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":233,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":233,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":233,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":233,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":234,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":234,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":234,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":234,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":235,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":235,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":235,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":235,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":236,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":236,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `error` typed value.","line":236,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":236,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":237,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":237,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expected_close_date on an `error` typed value.","line":237,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":237,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":238,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":238,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipeline_id on an `error` typed value.","line":238,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":238,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":239,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":239,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_id on an `error` typed value.","line":239,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":239,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":240,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":240,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .person_id on an `error` typed value.","line":240,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":240,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":241,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":241,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .organization_id on an `error` typed value.","line":241,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":241,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":242,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":242,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_specific_probability on an `error` typed value.","line":242,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":242,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":244,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":244,"endColumn":71},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10072,10075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10072,10075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .custom_field_values on an `any` value.","line":244,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":244,"endColumn":71},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":245,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10115,10118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10115,10118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":247,"column":18,"nodeType":"Identifier","messageId":"unsafeCall","endLine":247,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":252,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":252,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":253,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":253,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":253,"column":27,"nodeType":"Identifier","messageId":"unsafeCall","endLine":253,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":255,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":255,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":255,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":255,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPipelines on an `error` typed value.","line":255,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":255,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":256,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":256,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":256,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":256,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":257,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":257,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":257,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":257,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":258,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":258,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `any` value.","line":258,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":258,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":259,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":259,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":259,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":259,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":260,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":260,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `any` value.","line":260,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":260,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":261,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":261,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `any` value.","line":261,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":261,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":264,"column":15,"nodeType":"Identifier","messageId":"unsafeCall","endLine":264,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipelineId on an `any` value.","line":271,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":271,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":273,"column":13,"nodeType":"Identifier","messageId":"unsafeCall","endLine":273,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":274,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":274,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":274,"column":33,"nodeType":"Identifier","messageId":"unsafeCall","endLine":274,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipelineId on an `any` value.","line":275,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":275,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":276,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":276,"endColumn":101},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":276,"column":37,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":276,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getStagesByPipelineId on an `error` typed value.","line":276,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":276,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipelineId on an `any` value.","line":276,"column":90,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":276,"endColumn":100},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":278,"column":13,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":289,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":278,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":278,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":278,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":278,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":279,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":279,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":279,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":279,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":280,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":280,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `any` value.","line":280,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":280,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":281,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":281,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipeline_id on an `any` value.","line":281,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":281,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":282,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":282,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":282,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":282,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":283,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":283,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .order on an `any` value.","line":283,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":283,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":284,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":284,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `any` value.","line":284,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":284,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":285,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":285,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_type on an `any` value.","line":285,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":285,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":286,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":286,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `any` value.","line":286,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":286,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":287,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":287,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `any` value.","line":287,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":287,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":292,"column":19,"nodeType":"Identifier","messageId":"unsafeCall","endLine":292,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":296,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":296,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":298,"column":13,"nodeType":"Identifier","messageId":"unsafeCall","endLine":298,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":299,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":299,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":299,"column":33,"nodeType":"Identifier","messageId":"unsafeCall","endLine":299,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":300,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":300,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":300,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":300,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getStageById on an `error` typed value.","line":300,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":300,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":300,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":300,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":303,"column":14,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":313,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":304,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":304,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":304,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":304,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":305,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":305,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `error` typed value.","line":305,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":305,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":306,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":306,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipeline_id on an `error` typed value.","line":306,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":306,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":307,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":307,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":307,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":307,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":308,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":308,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .order on an `error` typed value.","line":308,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":308,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":309,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":309,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deal_probability on an `error` typed value.","line":309,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":309,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":310,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":310,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage_type on an `error` typed value.","line":310,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":310,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":311,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":311,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `error` typed value.","line":311,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":311,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":312,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":312,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `error` typed value.","line":312,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":312,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":316,"column":19,"nodeType":"Identifier","messageId":"unsafeCall","endLine":316,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":321,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":321,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":322,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":322,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userPermissions on an `any` value.","line":322,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":322,"endColumn":39}],"suppressedMessages":[],"errorCount":338,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Resolvers for Query operations\nimport { GraphQLError } from 'graphql';\nimport { supabase } from '../../../../lib/supabaseClient';\nimport { personService } from '../../../../lib/personService';\nimport { organizationService } from '../../../../lib/organizationService';\nimport { dealService } from '../../../../lib/dealService';\nimport * as pipelineService from '../../../../lib/pipelineService';\nimport * as stageService from '../../../../lib/stageService';\nimport * as userProfileService from '../../../../lib/userProfileService';\nimport {\n  GraphQLContext, \n  getAccessToken, \n  processZodError, \n  requireAuthentication\n} from '../helpers';\n\n// Import generated types from backend codegen\nimport type {\n    QueryResolvers,\n    Person as GraphQLPerson,\n    Organization as GraphQLOrganization,\n    Deal as GraphQLDeal,\n    Pipeline as GraphQLPipeline,\n    Stage as GraphQLStage,\n    User as GraphQLUser,\n    PersonListItem as GraphQLPersonListItem\n    // Argument types (e.g., QueryPersonArgs) are inferred by QueryResolvers\n} from '../../../../lib/generated/graphql';\n\n\n\nexport const Query: QueryResolvers<GraphQLContext> = {\n    health: () => 'OK',\n    supabaseConnectionTest: async () => {\n      try {\n        const { data, error } = await supabase.auth.getSession();\n        if (error) {\n          console.error('Supabase connection error:', error.message);\n          return `Connection Error: ${error.message}`;\n        }\n        console.log('Supabase getSession data:', data);\n        return 'Successfully connected to Supabase (getSession succeeded)';\n      } catch (error: unknown) {\n        console.error('Unexpected error during Supabase test:', error);\n        let message = \"Unknown error during Supabase test\";\n        if (error instanceof Error) {\n            message = error.message;\n        } else if (typeof error === 'string') {\n            message = error;\n        }\n        return `Unexpected Error: ${message}`;\n      }\n    },\n    me: async (_parent, _args, context: GraphQLContext): Promise<GraphQLUser | null> => {\n      requireAuthentication(context);\n      const currentUser = context.currentUser!;\n      const accessToken = getAccessToken(context)!;\n\n      if (!currentUser.email) {\n        // This case should ideally not happen for an authenticated user if email is a primary identifier.\n        // Log an error and throw, as the GraphQL schema expects a non-null email for the User type.\n        console.error(`[Query.me] Critical: Authenticated user ${currentUser.id} has no email.`);\n        throw new GraphQLError('Authenticated user email is missing.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n      }\n\n      try {\n        const profile = await userProfileService.getUserProfile(currentUser.id, accessToken);\n        \n        return {\n          id: currentUser.id,\n          email: currentUser.email, // Now checked for null/undefined\n          display_name: profile?.display_name || null,\n          avatar_url: profile?.avatar_url || null,    \n        };\n      } catch (error) {\n        console.error(`[Query.me] Error fetching profile for user ${currentUser.id}:`, error);\n        // Fallback: return basic info, but email is guaranteed by the check above.\n        return {\n            id: currentUser.id,\n            email: currentUser.email, // currentUser.email is guaranteed here\n            display_name: null,\n            avatar_url: null,\n        }; \n      }\n    },\n\n    // --- Person Resolvers ---\\\n    people: async (_parent, _args, context) => {\n      const action = 'fetching people list';\n      try {\n          requireAuthentication(context);\n          const accessToken = getAccessToken(context)!;\n          const peopleList = await personService.getPeople(context.currentUser!.id, accessToken);\n          // Map PersonRecord[] to GraphQLPerson[]\n          return peopleList.map(p => ({\n            id: p.id,\n            created_at: p.created_at,\n            updated_at: p.updated_at,\n            user_id: p.user_id,\n            first_name: p.first_name,\n            last_name: p.last_name,\n            email: p.email,\n            phone: p.phone,\n            notes: p.notes,\n            organization_id: p.organization_id,\n            // Make raw DB data available for the Person.customFieldValues resolver\n            db_custom_field_values: (p).custom_field_values,\n            // organization, deals, activities resolved by Person type resolvers\n          })) as any; // Cast to any to allow db_custom_field_values\n      } catch (e) {\n         throw processZodError(e, action);\n      }\n    },\n    person: async (_parent, args, context) => {\n      const action = 'fetching person by ID';\n      try {\n          requireAuthentication(context);\n          const accessToken = getAccessToken(context)!;\n          const p = await personService.getPersonById(context.currentUser!.id, args.id, accessToken);\n          if (!p) return null;\n          // Map PersonRecord to GraphQLPerson\n          return {\n            id: p.id,\n            created_at: p.created_at,\n            updated_at: p.updated_at,\n            user_id: p.user_id,\n            first_name: p.first_name,\n            last_name: p.last_name,\n            email: p.email,\n            phone: p.phone,\n            notes: p.notes,\n            organization_id: p.organization_id,\n            // Make raw DB data available for the Person.customFieldValues resolver\n            db_custom_field_values: (p as any).custom_field_values,\n          } as any; // Cast to any to allow db_custom_field_values\n      } catch (e) {\n         throw processZodError(e, action);\n      }\n    },\n    personList: async (_parent, _args, context) => {\n      requireAuthentication(context);\n      const accessToken = getAccessToken(context)!;\n      try {\n        const people = await personService.getPeople(context.currentUser!.id, accessToken); \n        return people.map(p => ({\n            id: p.id,\n            name: [p.first_name, p.last_name].filter(Boolean).join(' ') || p.email || 'Unnamed Person'\n        })) as GraphQLPersonListItem[];\n      } catch (e) {\n         throw processZodError(e, 'fetching person list for dropdown');\n      }\n    },\n\n    // --- Organization Resolvers ---\\\n    organizations: async (_parent, _args, context) => {\n       requireAuthentication(context);\n       const accessToken = getAccessToken(context)!;\n       try {\n         const orgs = await organizationService.getOrganizations(context.currentUser!.id, accessToken);\n         // Map OrganizationRecord[] to GraphQLOrganization[]\n         return orgs.map(o => ({\n            id: o.id,\n            created_at: o.created_at,\n            updated_at: o.updated_at,\n            user_id: o.user_id,\n            name: o.name,\n            address: o.address,\n            notes: o.notes,\n            db_custom_field_values: (o).custom_field_values,\n            // activities, deals, people resolved by Organization type resolvers\n         })) as any; // Cast to any to allow db_custom_field_values\n       } catch (e) {\n          throw processZodError(e, 'fetching organizations list');\n       }\n    },\n    organization: async (_parent, args, context) => {\n       requireAuthentication(context);\n       const accessToken = getAccessToken(context)!;\n       try {\n          const o = await organizationService.getOrganizationById(context.currentUser!.id, args.id, accessToken);\n          if (!o) return null;\n          // Map OrganizationRecord to GraphQLOrganization\n          return {\n            id: o.id,\n            created_at: o.created_at,\n            updated_at: o.updated_at,\n            user_id: o.user_id,\n            name: o.name,\n            address: o.address,\n            notes: o.notes,\n            db_custom_field_values: (o as any).custom_field_values,\n          } as any; // Cast to any to allow db_custom_field_values\n       } catch (e) {\n           throw processZodError(e, 'fetching organization by ID');\n       }\n    },\n\n    // --- Deal Resolvers ---\\\n    deals: async (_parent, _args, context) => {\n       requireAuthentication(context);\n       const accessToken = getAccessToken(context)!;\n       try {\n           const dealList = await dealService.getDeals(context.currentUser!.id, accessToken);\n           return dealList.map(d => ({\n                id: d.id,\n                user_id: d.user_id!,\n                created_at: d.created_at,\n                updated_at: d.updated_at,\n                name: d.name!, \n                amount: d.amount,\n                expected_close_date: d.expected_close_date,\n                pipeline_id: d.pipeline_id!,\n                stage_id: d.stage_id!, \n                person_id: d.person_id,\n                organization_id: d.organization_id,\n                deal_specific_probability: d.deal_specific_probability,\n                // Make raw DB data available for the Deal.customFieldValues resolver\n                db_custom_field_values: (d).custom_field_values, \n           })) as any; // Cast to any to allow db_custom_field_values, field resolvers will complete the type\n       } catch (e) {\n           throw processZodError(e, 'fetching deals list');\n       }\n    },\n    deal: async (_parent, args, context) => {\n       requireAuthentication(context);\n       const accessToken = getAccessToken(context)!;\n       try {\n           const d = await dealService.getDealById(context.currentUser!.id, args.id, accessToken);\n           if (!d) return null;\n           return {\n                id: d.id,\n                user_id: d.user_id!,\n                created_at: d.created_at,\n                updated_at: d.updated_at,\n                name: d.name!, \n                amount: d.amount,\n                expected_close_date: d.expected_close_date,\n                pipeline_id: d.pipeline_id!,\n                stage_id: d.stage_id!, \n                person_id: d.person_id,\n                organization_id: d.organization_id,\n                deal_specific_probability: d.deal_specific_probability,\n                // Make raw DB data available for the Deal.customFieldValues resolver\n                db_custom_field_values: (d as any).custom_field_values, \n           } as any; // Cast to any, field resolvers will complete the type\n       } catch (e) {\n           throw processZodError(e, 'fetching deal by ID');\n       }\n    },\n    // Pipeline Resolvers\n    pipelines: async (_parent, _args, context: GraphQLContext): Promise<GraphQLPipeline[]> => {\n      requireAuthentication(context);\n      const accessToken = getAccessToken(context)!;\n      try {\n        const pipelineList = await pipelineService.getPipelines(accessToken);\n        return pipelineList.map(p => ({\n          id: p.id,\n          user_id: p.user_id,\n          name: p.name,\n          created_at: p.created_at, \n          updated_at: p.updated_at,\n        })) as GraphQLPipeline[];\n      } catch (e) {\n        throw processZodError(e, 'fetching pipelines list');\n      }\n    },\n    // Ensure there isn't a singular 'pipeline(id: ID!)' resolver here unless also defined in schema\n\n    // Stage Resolvers\n    stages: async (_parent, args, context) => {\n        const action = 'fetching stages for pipeline ' + args.pipelineId;\n        try {\n            requireAuthentication(context);\n            const accessToken = getAccessToken(context)!;\n            if (!args.pipelineId) throw new GraphQLError(\"pipelineId is required\", { extensions: { code: 'BAD_USER_INPUT' } });\n            const stageList = await stageService.getStagesByPipelineId(accessToken, args.pipelineId);\n            // Map Stage from lib/types to GraphQLStage\n            return stageList.map(s => ({\n                id: s.id,\n                user_id: s.user_id,\n                pipeline_id: s.pipeline_id,\n                name: s.name,\n                order: s.order,\n                deal_probability: s.deal_probability,\n                stage_type: s.stage_type,\n                created_at: s.created_at,\n                updated_at: s.updated_at,\n                // pipeline field resolved by Stage type resolver\n            })) as GraphQLStage[];\n        } catch (error) { \n            console.error('[Query.stages] Error during ' + action + ':', error);\n            throw processZodError(error, action); \n        }\n    },\n    stage: async (_parent, args, context) => {\n        const action = 'fetching stage ' + args.id;\n        try {\n            requireAuthentication(context);\n            const accessToken = getAccessToken(context)!;\n            const s = await stageService.getStageById(accessToken, args.id);\n            if (!s) return null;\n            // Map Stage from lib/types to GraphQLStage\n             return {\n                id: s.id,\n                user_id: s.user_id,\n                pipeline_id: s.pipeline_id,\n                name: s.name,\n                order: s.order,\n                deal_probability: s.deal_probability,\n                stage_type: s.stage_type,\n                created_at: s.created_at,\n                updated_at: s.updated_at,\n            } as GraphQLStage;\n        } catch (error) {\n            console.error('[Query.stage] Error during ' + action + ':', error);\n            throw processZodError(error, action);\n        }\n    },\n    // --- My Permissions Query ---\\\n    myPermissions: (_parent, _args, context) => {\n        requireAuthentication(context);\n        return context.userPermissions ?? []; // Already returns string[]\n    },\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/stage.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":9,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":9,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":10,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":10,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":10,"column":25,"nodeType":"Identifier","messageId":"unsafeCall","endLine":10,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":13,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":13,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":13,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":13,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getPipelineById on an `error` typed value.","line":13,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":13,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipeline_id on an `any` value.","line":13,"column":82,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":13,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipeline_id on an `any` value.","line":15,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":15,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":18,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":18,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipeline_id on an `any` value.","line":20,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":20,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":21,"column":13,"nodeType":"Identifier","messageId":"unsafeCall","endLine":21,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pipeline_id on an `any` value.","line":21,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":21,"endColumn":71}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { GraphQLContext } from '../helpers';\nimport { requireAuthentication, processZodError, getAccessToken } from '../helpers';\nimport { GraphQLError } from 'graphql';\nimport * as pipelineService from '../../../../lib/pipelineService';\nimport type { StageResolvers } from '../../../../lib/generated/graphql';\n\nexport const Stage: StageResolvers<GraphQLContext> = {\n  pipeline: async (parent, _args, context) => {\n    requireAuthentication(context);\n    const accessToken = getAccessToken(context)!;\n    \n    try {\n      const pipeline = await pipelineService.getPipelineById(accessToken, parent.pipeline_id);\n      if (!pipeline) {\n         console.error(`Pipeline ${parent.pipeline_id} not found for stage.`);\n         throw new GraphQLError(`Pipeline associated with this stage not found.`, { extensions: { code: 'NOT_FOUND' } });\n      }\n      return pipeline;\n    } catch (e) {\n      console.error(`Error fetching pipeline ${parent.pipeline_id} for stage:`, e);\n      throw processZodError(e, `fetching pipeline ${parent.pipeline_id}`);\n    }\n  }\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/validators.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Open on an `error` typed value.","line":82,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Won on an `error` typed value.","line":83,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Lost on an `error` typed value.","line":84,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":28}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\nimport { StageType as GeneratedStageType } from '../../../lib/generated/graphql'; // Adjusted path\n\n// Zod schema for CustomFieldValueInput\nconst CustomFieldValueInputSchema = z.object({\n  definitionId: z.string().uuid(\"Invalid Definition ID format for custom field value\"),\n  stringValue: z.string().optional().nullable(),\n  numberValue: z.number().optional().nullable(),\n  booleanValue: z.boolean().optional().nullable(),\n  dateValue: z.coerce.date({ errorMap: () => ({ message: \"Invalid date for custom field. Expected a valid date string.\" }) }).optional().nullable(), \n  selectedOptionValues: z.array(z.string()).optional().nullable(),\n}).refine(data => {\n  const valueFields = [\n    data.stringValue,\n    data.numberValue,\n    data.booleanValue,\n    data.dateValue,\n    data.selectedOptionValues\n  ];\n  const providedValueFields = valueFields.filter(v => v !== undefined && v !== null && (!Array.isArray(v) || v.length > 0));\n  // Ensure at most one value field is provided (0 is okay for optional, 1 is for a set value)\n  return providedValueFields.length <= 1;\n}, {\n  message: \"If providing a custom field value, only one of stringValue, numberValue, booleanValue, dateValue, or selectedOptionValues should be set.\",\n  // path: [], // General error, or pick one field e.g., 'stringValue'\n});\n\n// --- Person Schemas ---\nconst PersonBaseSchema = z.object({\n  first_name: z.string().trim().min(1, { message: \"First name cannot be empty if provided\" }).optional().nullable(),\n  last_name: z.string().trim().min(1, { message: \"Last name cannot be empty if provided\" }).optional().nullable(),\n  email: z.string().trim().email({ message: \"Invalid email address\" }).optional().nullable(),\n  phone: z.string().trim().optional().nullable(),\n  notes: z.string().trim().optional().nullable(),\n  organization_id: z.string().uuid({ message: \"Invalid Organization ID format\" }).optional().nullable(),\n  customFields: z.array(CustomFieldValueInputSchema).optional().nullable(),\n});\n\nexport const PersonCreateSchema = PersonBaseSchema.refine(data => data.first_name || data.last_name || data.email, {\n  message: \"At least a first name, last name, or email is required\",\n  path: [\"first_name\"],\n});\n\nexport const PersonUpdateSchema = PersonBaseSchema.partial();\n\n// --- Organization Schemas ---\nexport const OrganizationInputSchema = z.object({\n    name: z.string().trim().min(1, { message: \"Organization name cannot be empty\" }),\n    address: z.string().trim().optional().nullable(),\n    notes: z.string().trim().optional().nullable(),\n    customFields: z.array(CustomFieldValueInputSchema).optional().nullable(),\n});\n\n// --- Deal Schemas ---\n\nexport const DealBaseSchema = z.object({\n  name: z.string().min(1, { message: \"Deal name is required\" }).optional(),\n  amount: z.number().positive(\"Amount must be positive\").optional().nullable(),\n  expected_close_date: z.string().datetime().optional().nullable(),\n  stage_id: z.string().uuid(\"Valid Stage ID is required\").optional(),\n  pipeline_id: z.string().uuid(\"Valid Pipeline ID is required\").optional(),\n  person_id: z.string().uuid(\"Valid Person ID is required\").optional().nullable(),\n  organization_id: z.string().uuid(\"Valid Organization ID is required\").optional().nullable(),\n  deal_specific_probability: z.number().min(0).max(1).optional().nullable(),\n  customFields: z.array(CustomFieldValueInputSchema).optional().nullable(), // Added customFields to Zod schema\n});\n\nexport const DealCreateSchema = DealBaseSchema.merge(z.object({\n  name: z.string().min(1, { message: \"Deal name is required\" }),\n  stage_id: z.string().uuid(\"Valid Stage ID is required\"),\n  pipeline_id: z.string().uuid(\"Valid Pipeline ID is required\"),\n}));\nexport const DealUpdateSchema = DealBaseSchema.partial();\n\n// --- Pipeline Schemas ---\nexport const PipelineInputSchema = z.object({\n    name: z.string().trim().min(1, { message: \"Pipeline name cannot be empty\" }),\n});\n\n// Define StageType enum for Zod validation, using imported GraphQL enum members\nconst StageTypeZodEnum = z.enum([\n    GeneratedStageType.Open,\n    GeneratedStageType.Won,\n    GeneratedStageType.Lost\n], { errorMap: () => ({ message: 'Invalid stage type' }) });\n\n// --- Stage Schemas ---\nconst StageBaseSchema = z.object({\n    name: z.string().trim().min(1, { message: \"Stage name cannot be empty\" }),\n    order: z.number().int().nonnegative({ message: \"Order must be a non-negative integer\"}),\n    pipeline_id: z.string().uuid({ message: \"Invalid Pipeline ID format\" }),\n    deal_probability: z.number().min(0).max(1, { message: \"Probability must be between 0.0 and 1.0\" }).optional().nullable(),\n    stage_type: StageTypeZodEnum.optional(), // Use the new Zod enum\n});\n\nexport const StageCreateSchema = StageBaseSchema;\nexport const StageUpdateSchema = StageBaseSchema.partial().omit({ pipeline_id: true });\n\n// === Activity Validators ===\n\nconst ActivityTypeEnum = z.enum([\n  'TASK',\n  'MEETING',\n  'CALL',\n  'EMAIL',\n  'DEADLINE',\n  // Add any other types defined in the GraphQL enum\n], { errorMap: () => ({ message: 'Invalid activity type' }) });\n\nexport const CreateActivityInputSchema = z.object({\n  type: ActivityTypeEnum,\n  subject: z.string().trim().min(1, { message: 'Subject cannot be empty' }),\n  due_date: z.coerce.date().optional().nullable(),\n  notes: z.string().trim().optional().nullable(), // Trim notes\n  is_done: z.boolean().optional(), // Defaults false in DB\n  deal_id: z.string().uuid({ message: 'Invalid UUID for deal ID' }).optional().nullable(),\n  person_id: z.string().uuid({ message: 'Invalid UUID for person ID' }).optional().nullable(),\n  organization_id: z.string().uuid({ message: 'Invalid UUID for organization ID' }).optional().nullable(),\n}).refine(data => !!data.deal_id || !!data.person_id || !!data.organization_id, {\n  message: 'An activity must be linked to at least one Deal, Person, or Organization.',\n  // path: ['deal_id'], // Add path for better error highlighting if desired, points to first field\n});\n\nexport const UpdateActivityInputSchema = z.object({\n  // All fields are optional for update\n  type: ActivityTypeEnum.optional(),\n  subject: z.string().trim().min(1, { message: 'Subject cannot be empty when provided' }).optional(), // Validate non-empty only if provided\n  due_date: z.coerce.date().optional().nullable(),\n  notes: z.string().trim().nullable().optional(), // Allow explicitly setting notes to null or empty string after trim\n  is_done: z.boolean().optional(),\n  deal_id: z.string().uuid({ message: 'Invalid UUID for deal ID' }).optional().nullable(),\n  person_id: z.string().uuid({ message: 'Invalid UUID for person ID' }).optional().nullable(),\n  organization_id: z.string().uuid({ message: 'Invalid UUID for organization ID' }).optional().nullable(),\n}).refine(data => Object.keys(data).length > 0, {\n    message: 'Update input cannot be empty. Provide at least one field to update.',\n});\n\nexport const ActivityFilterInputSchema = z.object({\n    dealId: z.string().uuid({ message: 'Invalid UUID for filter dealId' }).optional(),\n    personId: z.string().uuid({ message: 'Invalid UUID for filter personId' }).optional(),\n    organizationId: z.string().uuid({ message: 'Invalid UUID for filter organizationId' }).optional(),\n    isDone: z.boolean().optional(),\n}).optional(); // The whole filter object is optional \n\n// --- Pricing Module Schemas ---\n\n// Corresponds to AdditionalCostInput in GraphQL\nexport const AdditionalCostInputSchema = z.object({\n  description: z.string().trim().min(1, { message: \"Description for additional cost cannot be empty\" }),\n  amount: z.number().positive({ message: \"Amount for additional cost must be a positive number\" }),\n});\n\n// Corresponds to PriceQuoteCreateInput in GraphQL\nexport const PriceQuoteCreateInputSchema = z.object({\n  name: z.string().trim().min(1, { message: \"Quote name cannot be empty\" }).optional().nullable(),\n  // status is typically defaulted by the backend\n  base_minimum_price_mp: z.number().min(0, { message: \"Base minimum price cannot be negative\" }).optional().nullable(),\n  target_markup_percentage: z.number().min(0, { message: \"Target markup percentage cannot be negative\" }).optional().nullable(),\n  final_offer_price_fop: z.number().min(0, { message: \"Final offer price cannot be negative\" }).optional().nullable(),\n  overall_discount_percentage: z.number().min(0).max(100, { message: \"Overall discount must be between 0 and 100\" }).optional().nullable(),\n  upfront_payment_percentage: z.number().min(0).max(100, { message: \"Upfront payment percentage must be between 0 and 100\" }).optional().nullable(),\n  upfront_payment_due_days: z.number().int().min(0, { message: \"Upfront payment due days cannot be negative\" }).optional().nullable(),\n  subsequent_installments_count: z.number().int().min(0, { message: \"Subsequent installments count cannot be negative\" }).optional().nullable(),\n  subsequent_installments_interval_days: z.number().int().min(1, { message: \"Subsequent installments interval must be at least 1 day\" }).optional().nullable(),\n  additional_costs: z.array(AdditionalCostInputSchema).optional().nullable(),\n});\n\n// Corresponds to PriceQuoteUpdateInput in GraphQL\nexport const PriceQuoteUpdateInputSchema = PriceQuoteCreateInputSchema.extend({\n  // For updates, most fields are optional and covered by PriceQuoteCreateInputSchema being mostly optional.\n  // We explicitly add status here as it can be changed during an update.\n  status: z.string().trim().min(1, { message: \"Status cannot be empty if provided\"}).optional().nullable(), // e.g., 'draft', 'proposed', 'archived'\n}).partial(); // .partial() makes all fields in the extended schema optional, suitable for updates. ","usedDeprecatedRules":[]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/inngest.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":26,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":26,"endColumn":49,"suggestions":[{"messageId":"removeAsync","fix":{"range":[865,871],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .contactId on an `any` value.","line":42,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":42,"column":89,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .firstName on an `any` value.","line":42,"column":115,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":124},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dealId on an `any` value.","line":59,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":59,"column":82,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stage on an `any` value.","line":59,"column":108,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":113},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .amount on an `any` value.","line":59,"column":136,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":142},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .contactId on an `any` value.","line":59,"column":168,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":177},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function 'handler' has no 'await' expression.","line":68,"column":74,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":68,"endColumn":76,"suggestions":[{"messageId":"removeAsync","fix":{"range":[2490,2496],"text":""},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Inngest } from 'inngest';\nimport type { Handler, HandlerContext } from '@netlify/functions';\n\nif (!process.env.INNGEST_EVENT_KEY) {\n  throw new Error('INNGEST_EVENT_KEY environment variable is not set.');\n}\n\nif (!process.env.INNGEST_SIGNING_KEY) {\n  if (process.env.NODE_ENV === 'production') {\n    throw new Error('INNGEST_SIGNING_KEY environment variable is not set in production.');\n  } else {\n    console.warn('INNGEST_SIGNING_KEY environment variable is not set. Requests will not be signed.');\n  }\n}\n\nexport const inngest = new Inngest({\n  id: 'pipe-cd-crm',\n  eventKey: process.env.INNGEST_EVENT_KEY,\n});\n\nconst helloWorld = inngest.createFunction(\n  { id: 'hello-world' },\n  { event: 'test/hello.world' },\n  async ({ event, step }) => {\n    console.log('[Inngest Fn: hello-world] Received event:', event.name);\n    await step.run('log-event-data', async () => {\n      console.log('[Inngest Fn: hello-world] Event data:', event.data);\n      return { message: 'Logged event data' };\n    });\n    return { event: event.name, body: 'Hello World!' };\n  }\n);\n\nconst logContactCreation = inngest.createFunction(\n  { id: 'log-contact-creation' },\n  { event: 'crm/contact.created' },\n  async ({ event, step }) => {\n    console.log(`[Inngest Fn: log-contact-creation] Received event '${event.name}'`, event.data);\n\n    await step.sleep('wait-a-bit', '50ms'); \n\n    const logMessage = `Contact created: ID=${event.data.contactId}, Email=${event.data.email}, Name=${event.data.firstName}`; \n    console.log(`[Inngest Fn: log-contact-creation] Processed: ${logMessage}`);\n\n    return { success: true, message: logMessage };\n  }\n);\n\nconst logDealCreation = inngest.createFunction(\n  { id: 'log-deal-creation' },\n  { event: 'crm/deal.created' },\n  async ({ event, step }) => {\n    console.log(`[Inngest Fn: log-deal-creation] Received event '${event.name}'`);\n    console.log('[Inngest Fn: log-deal-creation] Event Data:', event.data);\n    console.log('[Inngest Fn: log-deal-creation] User Info:', event.user);\n\n    await step.sleep('wait-a-moment', '100ms'); \n\n    const logMessage = `Deal created: ID=${event.data.dealId}, Name=${event.data.name}, Stage=${event.data.stage}, Amount=${event.data.amount}, ContactID=${event.data.contactId}`; \n    console.log(`[Inngest Fn: log-deal-creation] Processed: ${logMessage}`);\n\n    return { success: true, message: logMessage };\n  }\n);\n\nexport const functions = [helloWorld, logContactCreation, logDealCreation];\n\nexport const handler: Handler = async (_event, _context: HandlerContext) => {\n  console.warn('[inngest.ts handler] Invoked directly by Netlify Dev - this should ideally be handled by Inngest infrastructure (Plugin/Dev Server).');\n  return {\n    statusCode: 200,\n    body: JSON.stringify({ message: 'Inngest functions defined; placeholder handler invoked.' }),\n    headers: { 'Content-Type': 'application/json' },\n  };\n};","usedDeprecatedRules":[]}]