-- Migration to add assigned_to_user_id and is_system_activity to the activities table

-- 1. Add the new columns
ALTER TABLE public.activities
ADD COLUMN assigned_to_user_id uuid NULL REFERENCES public.user_profiles(user_id) ON DELETE SET NULL,
ADD COLUMN is_system_activity BOOLEAN NOT NULL DEFAULT FALSE;

COMMENT ON COLUMN public.activities.is_system_activity IS 'True if this activity was generated by the system.';

-- Rationale for ON DELETE SET NULL:
-- If the assigned user profile is deleted, we don't want to delete the activity,
-- but rather just unassign it. The activity might still be relevant or could be reassigned.

-- 2. Add an index for the new columns
CREATE INDEX idx_activities_assigned_to_user_id ON public.activities(assigned_to_user_id);
CREATE INDEX idx_activities_is_system_activity ON public.activities(is_system_activity);

-- 3. Define RLS Policy for assigned system activities

-- This policy allows an assigned user to see and modify an activity if they are the assignee AND the activity is a system activity.
-- It also allows the original creator (user_id) to manage their activities.

-- Ensure any previous version of a similar policy is dropped before creating the definitive one.
DROP POLICY IF EXISTS "Assigned users can view and update their assigned system activities" ON public.activities;
DROP POLICY IF EXISTS "Assigned users can manage activities assigned to them by the system" ON public.activities;
DROP POLICY IF EXISTS "Users can manage own activities or assigned system activities" ON public.activities; -- New policy name

CREATE POLICY "Users can manage own activities or assigned system activities"
ON public.activities
FOR ALL
USING (
    (auth.uid() = assigned_to_user_id AND is_system_activity = TRUE)
    OR
    (auth.uid() = user_id) -- Creator can always manage (covers non-system activities too)
)
WITH CHECK (
    (auth.uid() = assigned_to_user_id AND is_system_activity = TRUE)
    OR
    (auth.uid() = user_id)
);


-- 4. Grant necessary permissions if they changed (though existing authenticated grant should cover the column)
-- GRANT SELECT (assigned_to_user_id), UPDATE (assigned_to_user_id) ON TABLE public.activities TO authenticated;
-- This is usually not needed as the table-level grant covers new columns.

COMMENT ON COLUMN public.activities.assigned_to_user_id IS 'User to whom this activity is assigned. Nullable.'; 