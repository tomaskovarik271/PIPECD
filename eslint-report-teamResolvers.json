[{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/teamResolvers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1404,1407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1404,1407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Resolvers,\n  Team as GraphQLTeam,\n  User as GraphQLUser,\n  TeamWithMembers as GraphQLTeamWithMembers,\n  TeamMemberEdge as GraphQLTeamMemberEdge,\n  TeamMembersConnection as GraphQLTeamMembersConnection,\n  QueryTeamArgs,\n  QueryTeamsArgs,\n  MutationCreateTeamArgs,\n  MutationUpdateTeamArgs,\n  MutationDeleteTeamArgs,\n  AddTeamMembersInput,\n  RemoveTeamMembersInput\n} from '../../../../lib/generated/graphql';\nimport { GraphQLError } from 'graphql';\nimport { GraphQLContext } from '../index';\nimport * as teamService from '../../../../lib/teamService'; // Import the new service\n\n// Helper to get current user ID, throwing error if not authenticated\nconst getCurrentUserId = (context: GraphQLContext): string => {\n  if (!context.currentUser?.id) {\n    throw new GraphQLError('User is not authenticated', { extensions: { code: 'UNAUTHENTICATED' } });\n  }\n  return context.currentUser.id;\n};\n\n// Helper to map DB team row to GraphQLTeam (excluding relational fields handled by field resolvers)\n// Exported for use in other resolvers like userResolvers.ts\nexport const mapDbTeamToGraphQLTeam = (dbTeam: unknown): (Partial<GraphQLTeam> & { _team_lead_user_id?: string, _created_by_user_id?: string }) | null => {\n  if (!dbTeam || typeof dbTeam !== 'object') return null;\n  // Type guard or assertion might be needed if accessing properties directly on unknown\n  const team = dbTeam as Record<string, any>; // Assert to access properties\n\n  return {\n    id: team.id,\n    name: team.name,\n    description: team.description,\n    createdAt: team.created_at, // Ensure DateTime scalar handles string conversion, map to camelCase\n    updatedAt: team.updated_at, // Map to camelCase\n    // Fields to be resolved by Team field resolvers:\n    // teamLead (based on team.team_lead_user_id)\n    // members (based on team.id)\n    // createdBy (based on team.created_by_user_id)\n\n    // Store these raw IDs on the object for field resolvers to use\n    _team_lead_user_id: team.team_lead_user_id,\n    _created_by_user_id: team.created_by_user_id,\n  };\n}\n\nconst mapDbTeamToGraphQLTeamWithMembers = async (\n  dbTeam: teamService.DbTeam,\n  supabase: GraphQLContext['supabase']\n): Promise<GraphQLTeamWithMembers | null> => {\n  if (!dbTeam) return null;\n\n  const baseGqlTeam = mapDbTeamToGraphQLTeam(dbTeam);\n  if (!baseGqlTeam) return null; // Should not happen if dbTeam is valid\n\n  // Fetch team members (user_id and joined_at from team_members table)\n  const { data: memberLinks, error: memberLinksError } = await supabase\n    .from('team_members')\n    .select('user_id, joined_at, role') // Include role if needed for TeamMemberEdge\n    .eq('team_id', dbTeam.id);\n\n  if (memberLinksError) {\n    console.error(`mapDbTeamToGraphQLTeamWithMembers: Error fetching member links for team ${dbTeam.id}: ${memberLinksError.message}`);\n    throw new GraphQLError('Could not fetch team members.');\n  }\n\n  const edges: GraphQLTeamMemberEdge[] = [];\n  if (memberLinks && memberLinks.length > 0) {\n    const userIds = memberLinks.map(ml => ml.user_id).filter(id => id !== null) as string[];\n    if (userIds.length > 0) {\n      // Fetch user profiles for these user IDs\n      const { data: usersData, error: usersError } = await supabase\n        .from('user_profiles')\n        .select('user_id, display_name, email, avatar_url') // Add other fields for GraphQLUser as needed\n        .in('user_id', userIds);\n\n      if (usersError) {\n        console.error(`mapDbTeamToGraphQLTeamWithMembers: Error fetching user profiles for members of team ${dbTeam.id}: ${usersError.message}`);\n        throw new GraphQLError('Could not fetch member user details.');\n      }\n\n      if (usersData) {\n        for (const memberLink of memberLinks) {\n          const userProfile = usersData.find(u => u.user_id === memberLink.user_id);\n          if (userProfile) {\n            edges.push({\n              user: {\n                id: userProfile.user_id,\n                displayName: userProfile.display_name,\n                email: userProfile.email,\n                avatarUrl: userProfile.avatar_url,\n                // Note: teams and leadingTeams for User type are field-resolved by userResolvers typically\n              } as GraphQLUser, // Cast, ensure all required GraphQLUser fields are present or resolved\n              joinedAt: memberLink.joined_at,\n              // role: memberLink.role, // Add if 'role' is part of TeamMemberEdge in GQL schema\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    ...baseGqlTeam, // Spread basic team properties\n    id: dbTeam.id, // Ensure ID is not lost if baseGqlTeam doesn't include it directly (it should)\n    name: dbTeam.name, // Ensure name is not lost\n    membersConnection: {\n      edges: edges,\n      // pageInfo and totalCount can be added if pagination is implemented for members\n    } as GraphQLTeamMembersConnection,\n  } as GraphQLTeamWithMembers;\n};\n\nexport const teamResolvers: Resolvers<GraphQLContext> = {\n  Query: {\n    team: async (_parent: unknown, args: QueryTeamArgs, context: GraphQLContext): Promise<GraphQLTeam | null> => {\n      const { supabase } = context; // Supabase client from context\n      const { id } = args;\n      try {\n        const dbTeam = await teamService.getTeamById(supabase, id);\n        // mapDbTeamToGraphQLTeam can return null if dbTeam is null, which is fine for a nullable GQL return type.\n        return mapDbTeamToGraphQLTeam(dbTeam) as GraphQLTeam | null;\n      } catch (error: unknown) {\n        const originalError = error instanceof Error ? error : undefined;\n        const errorMessage = originalError ? originalError.message : 'Unknown error fetching team';\n        console.error(`Resolver Query.team: Error fetching team ${id}: ${errorMessage}`);\n        throw new GraphQLError('Could not fetch team.', { \n          extensions: { code: 'INTERNAL_SERVER_ERROR' },\n          originalError \n        });\n      }\n    },\n    teams: async (_parent: unknown, args: QueryTeamsArgs, context: GraphQLContext): Promise<GraphQLTeam[]> => {\n      const { supabase } = context;\n      const { filter, pagination } = args;\n\n      try {\n        // The filter from QueryTeamsArgs (TeamsFilterInput) currently only has a placeholder.\n        // If actual filter fields are added to TeamsFilterInput, teamService.getTeams would need to handle them.\n        const dbTeams = await teamService.getTeams(supabase, filter, pagination);\n        \n        // Filter out nulls that mapDbTeamToGraphQLTeam might produce if a team record is problematic,\n        // although getTeams service function already returns DbTeam[] so individual items shouldn't be null.\n        // The as GraphQLTeam cast assumes mapDbTeamToGraphQLTeam successfully maps or returns null (filtered out).\n        return dbTeams\n          .map(dbTeam => mapDbTeamToGraphQLTeam(dbTeam))\n          .filter(gqlTeam => gqlTeam !== null) as GraphQLTeam[];\n      } catch (error: unknown) {\n        const originalError = error instanceof Error ? error : undefined;\n        const errorMessage = originalError ? originalError.message : 'Unknown error fetching teams';\n        console.error(`Resolver Query.teams: Error fetching teams - ${errorMessage}`);\n        throw new GraphQLError('Could not fetch teams.', { \n          extensions: { code: 'INTERNAL_SERVER_ERROR' },\n          originalError\n        });\n      }\n    },\n    myTeams: async (_parent: unknown, _args: Record<string, never>, context: GraphQLContext): Promise<GraphQLTeam[]> => {\n      const currentUserId = getCurrentUserId(context);\n      const { supabase } = context;\n\n      try {\n        const dbTeams = await teamService.getTeamsForUser(supabase, currentUserId);\n        return dbTeams\n          .map(dbTeam => mapDbTeamToGraphQLTeam(dbTeam))\n          .filter(gqlTeam => gqlTeam !== null) as GraphQLTeam[];\n      } catch (error: unknown) {\n        const originalError = error instanceof Error ? error : undefined;\n        const errorMessage = originalError ? originalError.message : 'Unknown error fetching user teams';\n        console.error(`Resolver Query.myTeams: Error fetching teams for user ${currentUserId} - ${errorMessage}`);\n        throw new GraphQLError('Could not fetch user teams.', { \n          extensions: { code: 'INTERNAL_SERVER_ERROR' },\n          originalError\n        });\n      }\n    },\n    myLedTeams: async (_parent: unknown, _args: Record<string, never>, context: GraphQLContext): Promise<GraphQLTeam[]> => {\n      const currentUserId = getCurrentUserId(context);\n      const { supabase } = context;\n\n      try {\n        const dbTeams = await teamService.getTeamsLedByUser(supabase, currentUserId);\n        return dbTeams\n          .map(dbTeam => mapDbTeamToGraphQLTeam(dbTeam))\n          .filter(gqlTeam => gqlTeam !== null) as GraphQLTeam[];\n      } catch (error: unknown) {\n        const originalError = error instanceof Error ? error : undefined;\n        const errorMessage = originalError ? originalError.message : 'Unknown error fetching led teams';\n        console.error(`Resolver Query.myLedTeams: Error fetching teams led by user ${currentUserId} - ${errorMessage}`);\n        throw new GraphQLError('Could not fetch teams led by user.', { \n          extensions: { code: 'INTERNAL_SERVER_ERROR' },\n          originalError\n        });\n      }\n    }\n  },\n  Mutation: {\n    createTeam: async (_parent: unknown, args: MutationCreateTeamArgs, context: GraphQLContext): Promise<GraphQLTeam> => {\n      const currentUserId = getCurrentUserId(context);\n      const { supabase } = context; // Supabase client from context\n      const { input } = args;\n\n      try {\n        const dbTeam = await teamService.createTeamInDb(supabase, input, currentUserId);\n        \n        const gqlTeam = mapDbTeamToGraphQLTeam(dbTeam);\n        if (!gqlTeam) {\n          // This case should ideally be caught by the service if dbTeam comes back unexpectedly null\n          console.error('Resolver Mutation.createTeam: dbTeam mapped to null, but schema expects non-null Team.');\n          throw new GraphQLError('Failed to process team details after creation.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n        }\n        return gqlTeam as GraphQLTeam;\n      } catch (error: unknown) {\n        const originalError = error instanceof Error ? error : undefined;\n        const errorMessage = originalError ? originalError.message : 'Unknown error creating team';\n        console.error(`Resolver Mutation.createTeam: Error creating team - ${errorMessage}`);\n        throw new GraphQLError('Could not create team.', { \n          extensions: { code: 'INTERNAL_SERVER_ERROR' }, \n          originalError \n        });\n      }\n    },\n    updateTeam: async (_parent: unknown, args: MutationUpdateTeamArgs, context: GraphQLContext): Promise<GraphQLTeam> => {\n      getCurrentUserId(context); \n      const { supabase } = context;\n      const { id, name, description, teamLeadUserId } = args.input; // Destructure all fields\n\n      // Construct payload for the service, carefully handling nulls for NOT NULL fields\n      const servicePayload: { \n        name?: string; \n        description?: string | null; \n        team_lead_user_id?: string | null; \n      } = {};\n\n      if (name !== undefined) {\n        if (name === null) {\n          // Explicitly setting a NOT NULL 'name' to null is an error.\n          // If 'name: null' meant \"don't update name\", it should be omitted from input or handled by Zod validator if one exists.\n          throw new GraphQLError(\"Team name cannot be set to null.\", { extensions: { code: 'BAD_USER_INPUT' }});\n        } else {\n          servicePayload.name = name;\n        }\n      }\n      if (description !== undefined) { // description can be null\n        servicePayload.description = description;\n      }\n      if (teamLeadUserId !== undefined) { // team_lead_user_id can be null\n        servicePayload.team_lead_user_id = teamLeadUserId;\n      }\n      \n      // Cast to the service type. The constructed servicePayload should be compatible.\n      const castedServicePayload = servicePayload as teamService.UpdateTeamDbInput;\n\n      if (Object.keys(castedServicePayload).length === 0) {\n        // GQL layer check for no actual update fields being provided besides ID.\n        try {\n          const dbTeam = await teamService.getTeamById(supabase, id);\n          if (!dbTeam) {\n            throw new GraphQLError('Team not found for no-op update.', { extensions: { code: 'NOT_FOUND' }});\n          }\n          const gqlTeam = mapDbTeamToGraphQLTeam(dbTeam);\n          if (!gqlTeam) {\n            throw new GraphQLError('Failed to process existing team details.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n          }\n          return gqlTeam as GraphQLTeam; // Return current team if no fields to update\n        } catch (error: unknown) {\n          const originalError = error instanceof Error ? error : undefined;\n          const errorMessage = originalError ? originalError.message : 'Unknown error in updateTeam no-op path';\n          console.error(`Resolver Mutation.updateTeam (no-op path): Error fetching team ${id} - ${errorMessage}`);\n          throw new GraphQLError('Could not process update request.', { extensions: { code: 'INTERNAL_SERVER_ERROR' }, originalError });\n        }\n      }\n\n      try {\n        const updatedDbTeam = await teamService.updateTeamInDb(supabase, id, castedServicePayload);\n        const gqlTeam = mapDbTeamToGraphQLTeam(updatedDbTeam);\n        if (!gqlTeam) {\n          console.error(`Resolver Mutation.updateTeam: updatedDbTeam (${id}) mapped to null, schema expects non-null.`);\n          throw new GraphQLError('Failed to process team details after update.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n        }\n        return gqlTeam as GraphQLTeam;\n      } catch (error: unknown) {\n        const originalError = error instanceof Error ? error : undefined;\n        const errorMessage = originalError ? originalError.message : 'Unknown error updating team';\n        console.error(`Resolver Mutation.updateTeam: Error updating team ${id} - ${errorMessage}`);\n        if (errorMessage?.includes('not found or not permitted')) {\n          throw new GraphQLError('Team not found or update not permitted.', { extensions: { code: 'NOT_FOUND' }, originalError });\n        }\n        throw new GraphQLError('Could not update team.', { extensions: { code: 'INTERNAL_SERVER_ERROR' }, originalError });\n      }\n    },\n    deleteTeam: async (_parent: unknown, args: MutationDeleteTeamArgs, context: GraphQLContext): Promise<boolean> => {\n      getCurrentUserId(context);\n      const { supabase } = context;\n      const { id } = args;\n\n      try {\n        const { count } = await teamService.deleteTeamFromDb(supabase, id);\n        console.log(`Resolver deleteTeam: ${count} rows affected for team ID ${id}.`);\n        // If count is 0, it might mean the team was not found or RLS prevented deletion.\n        // The GraphQL schema expects a boolean. We'll return true if no error, \n        // assuming the service throws for actual DB errors.\n        // For a stricter check, one might throw if count === 0:\n        // if (count === 0) {\n        //   throw new GraphQLError('Team not found or could not be deleted.', { extensions: { code: 'NOT_FOUND' } });\n        // }\n        return true; \n      } catch (error: unknown) {\n        const originalError = error instanceof Error ? error : undefined;\n        const errorMessage = originalError ? originalError.message : 'Unknown error deleting team';\n        console.error(`Resolver Mutation.deleteTeam: Error deleting team ${id} - ${errorMessage}`);\n        throw new GraphQLError('Could not delete team.', { \n          extensions: { code: 'INTERNAL_SERVER_ERROR' }, \n          originalError \n        });\n      }\n    },\n    addTeamMembers: async (_parent: unknown, args: { input: AddTeamMembersInput }, context: GraphQLContext): Promise<GraphQLTeamWithMembers> => {\n      getCurrentUserId(context);\n      const { supabase } = context;\n      const { teamId, memberUserIds, role } = args.input;\n\n      if (!memberUserIds || memberUserIds.length === 0) {\n        throw new GraphQLError('No member user IDs provided to add.', { extensions: { code: 'BAD_USER_INPUT' } });\n      }\n\n      try {\n        await teamService.addTeamMembersToDb(supabase, teamId, memberUserIds, role);\n\n        const updatedDbTeam = await teamService.getTeamById(supabase, teamId);\n        if (!updatedDbTeam) {\n          console.error(`Resolver addTeamMembers: Team ${teamId} not found after adding members.`);\n          throw new GraphQLError('Team not found after adding members.', { extensions: { code: 'NOT_FOUND' } });\n        }\n        \n        const gqlTeamWithMembers = await mapDbTeamToGraphQLTeamWithMembers(updatedDbTeam, supabase);\n        if (!gqlTeamWithMembers) {\n           console.error(`Resolver addTeamMembers: Failed to map team ${teamId} to GraphQLTeamWithMembers.`);\n           throw new GraphQLError('Error processing team details after adding members.', { extensions: { code: 'INTERNAL_SERVER_ERROR' }});\n        }\n        return gqlTeamWithMembers;\n      } catch (error: unknown) {\n        const originalError = error instanceof Error ? error : undefined;\n        const errorMessage = (error instanceof Error ? error.message : 'Unknown error adding team members');\n        console.error(`Resolver Mutation.addTeamMembers: Error adding members to team ${teamId} - ${errorMessage}`);\n        // Handle specific errors like PK violation if needed\n        throw new GraphQLError('Could not add members to team.', { \n          extensions: { code: 'INTERNAL_SERVER_ERROR' }, \n          originalError \n        });\n      }\n    },\n    removeTeamMembers: async (_parent: unknown, args: { input: RemoveTeamMembersInput }, context: GraphQLContext): Promise<GraphQLTeamWithMembers> => {\n      getCurrentUserId(context);\n      const { supabase } = context;\n      const { teamId, memberUserIds } = args.input;\n\n      if (!memberUserIds || memberUserIds.length === 0) {\n        throw new GraphQLError('No member user IDs provided to remove.', { extensions: { code: 'BAD_USER_INPUT' } });\n      }\n\n      try {\n        await teamService.removeTeamMembersFromDb(supabase, teamId, memberUserIds);\n\n        const updatedDbTeam = await teamService.getTeamById(supabase, teamId);\n        if (!updatedDbTeam) {\n          console.error(`Resolver removeTeamMembers: Team ${teamId} not found after removing members.`);\n          throw new GraphQLError('Team not found after removing members.', { extensions: { code: 'NOT_FOUND' } });\n        }\n\n        const gqlTeamWithMembers = await mapDbTeamToGraphQLTeamWithMembers(updatedDbTeam, supabase);\n        if (!gqlTeamWithMembers) {\n           console.error(`Resolver removeTeamMembers: Failed to map team ${teamId} to GraphQLTeamWithMembers.`);\n           throw new GraphQLError('Error processing team details after removing members.', { extensions: { code: 'INTERNAL_SERVER_ERROR' }});\n        }\n        return gqlTeamWithMembers;\n\n      } catch (error: unknown) {\n        const originalError = error instanceof Error ? error : undefined;\n        const errorMessage = (error instanceof Error ? error.message : 'Unknown error removing team members');\n        console.error(`Resolver Mutation.removeTeamMembers: Error removing members from team ${teamId} - ${errorMessage}`);\n        throw new GraphQLError('Could not remove members from team.', { \n          extensions: { code: 'INTERNAL_SERVER_ERROR' }, \n          originalError \n        });\n      }\n    },\n  },\n  Team: {\n    teamLead: async (parentTeam: Partial<GraphQLTeam> & { _team_lead_user_id?: string }, _args: Record<string, never>, context: GraphQLContext): Promise<GraphQLUser | null> => {\n      const teamLeadUserId = parentTeam._team_lead_user_id;\n      if (!teamLeadUserId) return null;\n      const { supabase } = context;\n      const { data: userData, error } = await supabase\n        .from('user_profiles') // Assuming user profiles table\n        .select('user_id, display_name, avatar_url, email')\n        .eq('user_id', teamLeadUserId)\n        .single();\n      if (error || !userData) {\n        console.error(`Error fetching team lead profile ${teamLeadUserId}: ${error?.message}`);\n        return null;\n      }\n      return { id: userData.user_id, display_name: userData.display_name, avatar_url: userData.avatar_url, email: userData.email } as GraphQLUser;\n    },\n    members: async (parentTeam: Pick<GraphQLTeam, 'id'>, _args: Record<string, never>, context: GraphQLContext): Promise<GraphQLUser[]> => {\n      const { supabase } = context;\n      const { data: memberLinks, error: memberError } = await supabase\n        .from('team_members')\n        .select('user_id, role') \n        .eq('team_id', parentTeam.id);\n\n      if (memberError) {\n        console.error(`Error fetching members for team ${parentTeam.id}: ${memberError.message}`);\n        return [];\n      }\n      if (!memberLinks || memberLinks.length === 0) return [];\n\n      const userIds = memberLinks.map(ml => ml.user_id);\n      const { data: usersData, error: usersError } = await supabase\n        .from('user_profiles') \n        .select('user_id, display_name, avatar_url, email')\n        .in('user_id', userIds);\n\n      if (usersError) {\n        console.error(`Error fetching member profiles for team ${parentTeam.id}: ${usersError.message}`);\n        return [];\n      }\n      return usersData ? usersData.map(u => ({\n          id: u.user_id,\n          email: u.email || `${u.user_id.substring(0,8)}@placeholder.email`, \n          display_name: u.display_name,\n          avatar_url: u.avatar_url,\n        } as GraphQLUser) \n      ) : [];\n    },\n    createdBy: async (parentTeam: Partial<GraphQLTeam> & { _created_by_user_id?: string }, _args: Record<string, never>, context: GraphQLContext): Promise<GraphQLUser | null> => {\n      const createdByUserId = parentTeam._created_by_user_id;\n      if (!createdByUserId) return null;\n      const { supabase } = context;\n      const { data: userData, error } = await supabase\n        .from('user_profiles') \n        .select('user_id, display_name, avatar_url, email')\n        .eq('user_id', createdByUserId)\n        .single();\n      if (error || !userData) {\n        console.error(`Error fetching creator profile ${createdByUserId}: ${error?.message}`);\n        return null;\n      }\n      return { id: userData.user_id, display_name: userData.display_name, avatar_url: userData.avatar_url, email: userData.email } as GraphQLUser;\n    },\n  },\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]