[{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/teamResolvers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UpdateTeamInput' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PaginationInput' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1242,1245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1242,1245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Resolvers,\n  Team as GraphQLTeam,\n  User as GraphQLUser,\n  CreateTeamInput,\n  UpdateTeamInput,\n  PaginationInput,\n  QueryTeamArgs,\n  QueryTeamsArgs,\n  MutationCreateTeamArgs,\n  MutationUpdateTeamArgs,\n  MutationDeleteTeamArgs,\n  MutationAddTeamMemberArgs,\n  MutationRemoveTeamMemberArgs\n} from '../../../../lib/generated/graphql';\nimport { GraphQLError } from 'graphql';\nimport { GraphQLContext } from '../index';\n\n// Helper to get current user ID, throwing error if not authenticated\nconst getCurrentUserId = (context: GraphQLContext): string => {\n  if (!context.currentUser?.id) {\n    throw new GraphQLError('User is not authenticated', { extensions: { code: 'UNAUTHENTICATED' } });\n  }\n  return context.currentUser.id;\n};\n\n// Helper to map DB team row to GraphQLTeam (excluding relational fields handled by field resolvers)\n// Exported for use in other resolvers like userResolvers.ts\nexport const mapDbTeamToGraphQLTeam = (dbTeam: unknown): (Partial<GraphQLTeam> & { _team_lead_user_id?: string, _created_by_user_id?: string }) | null => {\n  if (!dbTeam || typeof dbTeam !== 'object') return null;\n  // Type guard or assertion might be needed if accessing properties directly on unknown\n  const team = dbTeam as Record<string, any>; // Assert to access properties\n\n  return {\n    id: team.id,\n    name: team.name,\n    description: team.description,\n    createdAt: team.created_at, // Ensure DateTime scalar handles string conversion, map to camelCase\n    updatedAt: team.updated_at, // Map to camelCase\n    // Fields to be resolved by Team field resolvers:\n    // teamLead (based on team.team_lead_user_id)\n    // members (based on team.id)\n    // createdBy (based on team.created_by_user_id)\n\n    // Store these raw IDs on the object for field resolvers to use\n    _team_lead_user_id: team.team_lead_user_id,\n    _created_by_user_id: team.created_by_user_id,\n  };\n}\n\nexport const teamResolvers: Resolvers<GraphQLContext> = {\n  Query: {\n    team: async (_parent: unknown, args: QueryTeamArgs, context: GraphQLContext): Promise<GraphQLTeam | null> => {\n      const { supabase } = context;\n      const { id } = args;\n      // RLS policies on 'teams' table should enforce visibility.\n      const { data: dbTeam, error } = await supabase\n        .from('teams')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) {\n        console.error(`Error fetching team ${id}: ${error.message}`);\n        // If RLS causes a 404-like error (e.g., 0 rows), it might not be a server error.\n        // Supabase errors often have a code (e.g., 'PGRST116' for 0 rows with .single())\n        if (error.code === 'PGRST116') return null; // Not found or not permitted\n        throw new GraphQLError('Could not fetch team.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n      }\n      return mapDbTeamToGraphQLTeam(dbTeam) as GraphQLTeam;\n    },\n    teams: async (_parent: unknown, args: QueryTeamsArgs, context: GraphQLContext): Promise<GraphQLTeam[]> => {\n      const { supabase } = context;\n      let query = supabase.from('teams').select('*');\n\n      if (args.pagination) {\n        const limit = args.pagination.limit ?? 20;\n        const offset = args.pagination.offset ?? 0;\n        query = query.range(offset, offset + limit - 1);\n      }\n      // TODO: Add ordering from args if provided\n      // TODO: Add ordering, e.g., .order('name', { ascending: true })\n\n      const { data: dbTeams, error } = await query;\n\n      if (error) {\n        console.error(`Error fetching teams: ${error.message}`);\n        throw new GraphQLError('Could not fetch teams.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n      }\n      return dbTeams ? dbTeams.map(dbTeam => mapDbTeamToGraphQLTeam(dbTeam) as GraphQLTeam) : [];\n    },\n    myTeams: async (_parent: unknown, _args: Record<string, never>, context: GraphQLContext): Promise<GraphQLTeam[]> => {\n      const currentUserId = getCurrentUserId(context);\n      const { supabase } = context;\n\n      // Fetch team_ids the user is a member of\n      const { data: teamMembers, error: tmError } = await supabase\n        .from('team_members')\n        .select('team_id')\n        .eq('user_id', currentUserId);\n\n      if (tmError) {\n        console.error(`Error fetching team memberships for user ${currentUserId}:`, tmError.message);\n        throw new GraphQLError('Could not fetch user team memberships.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n      }\n\n      if (!teamMembers || teamMembers.length === 0) {\n        return [];\n      }\n\n      const teamIds = teamMembers.map(tm => tm.team_id);\n\n      const { data: teamsData, error: teamsError } = await supabase\n        .from('teams')\n        .select('*') // RLS on teams table will apply\n        .in('id', teamIds);\n\n      if (teamsError) {\n        console.error(`Error fetching teams for user ${currentUserId} with IDs [${teamIds.join(',')}] :`, teamsError.message);\n        throw new GraphQLError('Could not fetch user teams.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n      }\n      \n      return teamsData ? teamsData.map(dbTeam => mapDbTeamToGraphQLTeam(dbTeam) as GraphQLTeam) : [];\n    },\n    myLedTeams: async (_parent: unknown, _args: Record<string, never>, context: GraphQLContext): Promise<GraphQLTeam[]> => {\n      const currentUserId = getCurrentUserId(context);\n      const { supabase } = context;\n\n      const { data: ledTeamsData, error: ledTeamsError } = await supabase\n        .from('teams')\n        .select('*') // RLS on teams table will apply (e.g. team lead can see their team)\n        .eq('team_lead_user_id', currentUserId);\n      \n      if (ledTeamsError) {\n        console.error(`Error fetching teams led by user ${currentUserId}:`, ledTeamsError.message);\n        throw new GraphQLError('Could not fetch teams led by user.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n      }\n\n      return ledTeamsData ? ledTeamsData.map(dbTeam => mapDbTeamToGraphQLTeam(dbTeam) as GraphQLTeam) : [];\n    }\n  },\n  Mutation: {\n    createTeam: async (_parent: unknown, args: MutationCreateTeamArgs, context: GraphQLContext): Promise<GraphQLTeam> => {\n      const currentUserId = getCurrentUserId(context);\n      const { supabase } = context;\n      const { input } = args;\n      const { data: newDbTeam, error } = await supabase\n        .from('teams')\n        .insert({ name: input.name, description: input.description, team_lead_user_id: input.teamLeadUserId, created_by_user_id: currentUserId })\n        .select().single();\n      if (error) { console.error(`Error creating team: ${error.message}`); throw new GraphQLError('Could not create team.'); }\n      \n      const gqlTeam = mapDbTeamToGraphQLTeam(newDbTeam);\n      if (!gqlTeam) {\n        console.error('createTeam: newDbTeam mapped to null, but schema expects non-null Team.');\n        throw new GraphQLError('Failed to create team details after operation.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n      }\n      return gqlTeam as GraphQLTeam;\n    },\n    updateTeam: async (_parent: unknown, args: MutationUpdateTeamArgs, context: GraphQLContext): Promise<GraphQLTeam> => {\n      getCurrentUserId(context); \n      const { supabase } = context;\n      const { id, name, description, teamLeadUserId } = args.input;\n      const updatePayload: Partial<CreateTeamInput & { team_lead_user_id: string }> = {};\n      \n      if (name !== undefined) updatePayload.name = name === null ? undefined : name;\n      if (description !== undefined) updatePayload.description = description === null ? undefined : description;\n      if (teamLeadUserId !== undefined) updatePayload.team_lead_user_id = teamLeadUserId === null ? undefined : teamLeadUserId;\n      \n      if (Object.keys(updatePayload).length === 0) throw new GraphQLError('No update fields provided.');\n      const { data: updatedDbTeam, error } = await supabase.from('teams').update(updatePayload).eq('id', id).select().single();\n      if (error) { \n        console.error(`Error updating team ${id}: ${error.message}`); \n        if (error.code === 'PGRST116') throw new GraphQLError('Team not found or not permitted to update.'); // PGRST116 means 0 rows for .single()\n        throw new GraphQLError('Could not update team.'); \n      }\n\n      const gqlTeam = mapDbTeamToGraphQLTeam(updatedDbTeam);\n      if (!gqlTeam) {\n        console.error(`updateTeam: updatedDbTeam (${id}) mapped to null, but schema expects non-null Team.`);\n        // This implies the team was deleted or became inaccessible between update and map\n        throw new GraphQLError('Failed to process team details after update.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n      }\n      return gqlTeam as GraphQLTeam;\n    },\n    deleteTeam: async (_parent: unknown, args: MutationDeleteTeamArgs, context: GraphQLContext): Promise<boolean> => {\n      getCurrentUserId(context);\n      const { supabase } = context;\n      const { id } = args;\n      const { error } = await supabase.from('teams').delete().eq('id', id);\n      if (error) { console.error(`Error deleting team ${id}: ${error.message}`); throw new GraphQLError('Could not delete team.'); }\n      return true; \n    },\n    addTeamMember: async (_parent: unknown, args: MutationAddTeamMemberArgs, context: GraphQLContext): Promise<GraphQLTeam> => {\n      getCurrentUserId(context);\n      const { supabase } = context;\n      const { teamId, userId } = args;\n      const { error } = await supabase.from('team_members').insert({ team_id: teamId, user_id: userId });\n      if (error) { \n        if (error.code === '23505') throw new GraphQLError('User is already a member.'); \n        if (error.code === '23503') throw new GraphQLError('Team or User not found.');\n        console.error(`Error adding team member: ${error.message}`); \n        throw new GraphQLError('Could not add member.'); \n      }\n      const { data: dbTeam, error: teamError } = await supabase.from('teams').select('*').eq('id', teamId).single();\n      if (teamError) { \n        console.error(`Error refetching team ${teamId} after adding member: ${teamError.message}`); \n        // If the team is not found here, it's an issue. PGRST116 implies 0 rows.\n        if (teamError.code === 'PGRST116') throw new GraphQLError('Team not found after adding member.', { extensions: { code: 'NOT_FOUND'}});\n        throw new GraphQLError('Member added, but failed to refetch team.');\n      }\n\n      const gqlTeam = mapDbTeamToGraphQLTeam(dbTeam);\n      if (!gqlTeam) {\n        console.error(`addTeamMember: dbTeam (${teamId}) mapped to null after adding member, but schema expects non-null Team.`);\n        throw new GraphQLError('Failed to process team details after adding member.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n      }\n      return gqlTeam as GraphQLTeam;\n    },\n    removeTeamMember: async (_parent: unknown, args: MutationRemoveTeamMemberArgs, context: GraphQLContext): Promise<GraphQLTeam> => {\n      getCurrentUserId(context);\n      const { supabase } = context;\n      const { teamId, userId } = args;\n      const { error } = await supabase.from('team_members').delete().match({ team_id: teamId, user_id: userId });\n      if (error) { console.error(`Error removing team member: ${error.message}`); throw new GraphQLError('Could not remove member.'); }\n      \n      const { data: dbTeam, error: teamError } = await supabase.from('teams').select('*').eq('id', teamId).single();\n      if (teamError) { \n        console.error(`Error refetching team ${teamId} after removing member: ${teamError.message}`);\n        if (teamError.code === 'PGRST116') throw new GraphQLError('Team not found after removing member.', { extensions: { code: 'NOT_FOUND'}});\n        throw new GraphQLError('Member removed, but failed to refetch team.');\n      }\n\n      const gqlTeam = mapDbTeamToGraphQLTeam(dbTeam);\n      if (!gqlTeam) {\n        console.error(`removeTeamMember: dbTeam (${teamId}) mapped to null after removing member, but schema expects non-null Team.`);\n        throw new GraphQLError('Failed to process team details after removing member.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n      }\n      return gqlTeam as GraphQLTeam;\n    },\n  },\n  Team: {\n    teamLead: async (parentTeam: Partial<GraphQLTeam> & { _team_lead_user_id?: string }, _args: Record<string, never>, context: GraphQLContext): Promise<GraphQLUser | null> => {\n      const teamLeadUserId = parentTeam._team_lead_user_id;\n      if (!teamLeadUserId) return null;\n      const { supabase } = context;\n      const { data: userData, error } = await supabase\n        .from('user_profiles') // Assuming user profiles table\n        .select('user_id, display_name, avatar_url, email')\n        .eq('user_id', teamLeadUserId)\n        .single();\n      if (error || !userData) {\n        console.error(`Error fetching team lead profile ${teamLeadUserId}: ${error?.message}`);\n        return null;\n      }\n      return { id: userData.user_id, display_name: userData.display_name, avatar_url: userData.avatar_url, email: userData.email } as GraphQLUser;\n    },\n    members: async (parentTeam: Pick<GraphQLTeam, 'id'>, _args: Record<string, never>, context: GraphQLContext): Promise<GraphQLUser[]> => {\n      const { supabase } = context;\n      const { data: memberLinks, error: memberError } = await supabase\n        .from('team_members')\n        .select('user_id, role')\n        .eq('team_id', parentTeam.id);\n\n      if (memberError) {\n        console.error(`Error fetching members for team ${parentTeam.id}: ${memberError.message}`);\n        return [];\n      }\n      if (!memberLinks || memberLinks.length === 0) return [];\n\n      const userIds = memberLinks.map(ml => ml.user_id);\n      const { data: usersData, error: usersError } = await supabase\n        .from('user_profiles')\n        .select('user_id, display_name, avatar_url, email')\n        .in('user_id', userIds);\n\n      if (usersError) {\n        console.error(`Error fetching member profiles for team ${parentTeam.id}: ${usersError.message}`);\n        return [];\n      }\n      return usersData ? usersData.map(u => {\n        return {\n          id: u.user_id,\n          email: u.email || `${u.user_id.substring(0,8)}@placeholder.email`,\n          display_name: u.display_name,\n          avatar_url: u.avatar_url,\n        } as GraphQLUser; \n      }) : [];\n    },\n    createdBy: async (parentTeam: Partial<GraphQLTeam> & { _created_by_user_id?: string }, _args: Record<string, never>, context: GraphQLContext): Promise<GraphQLUser | null> => {\n      const createdByUserId = parentTeam._created_by_user_id;\n      if (!createdByUserId) return null;\n      const { supabase } = context;\n      const { data: userData, error } = await supabase\n        .from('user_profiles')\n        .select('user_id, display_name, avatar_url, email')\n        .eq('user_id', createdByUserId)\n        .single();\n      if (error || !userData) {\n        console.error(`Error fetching creator profile ${createdByUserId}: ${error?.message}`);\n        return null;\n      }\n      return { id: userData.user_id, display_name: userData.display_name, avatar_url: userData.avatar_url, email: userData.email } as GraphQLUser;\n    },\n  },\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]