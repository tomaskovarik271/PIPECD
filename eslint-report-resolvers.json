[{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/dealFollowerResolvers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[746,749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[746,749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3869,3872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3869,3872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.\n- If you really want a type meaning \"any non-nullish value\", you probably want `NonNullable<unknown>` instead.","line":118,"column":67,"nodeType":"TSTypeLiteral","messageId":"bannedTypeMessage","endLine":118,"endColumn":69,"suggestions":[{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"object"},"fix":{"range":[5821,5823],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"unknown"},"fix":{"range":[5821,5823],"text":"unknown"},"desc":"Replace `{}` with `unknown`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"Record<string, never>"},"fix":{"range":[5821,5823],"text":"Record<string, never>"},"desc":"Replace `{}` with `Record<string, never>`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"NonNullable<unknown>"},"fix":{"range":[5821,5823],"text":"NonNullable<unknown>"},"desc":"Replace `{}` with `NonNullable<unknown>`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Resolvers,\n  Deal as GraphQLDeal,\n  User as GraphQLUser,\n  MutationAddDealFollowerArgs,\n  MutationRemoveDealFollowerArgs\n} from '../../../../lib/generated/graphql';\nimport { GraphQLError } from 'graphql';\nimport { GraphQLContext } from '../index'; // Import from the now correctly defined central location\n\n// Helper to get current user ID, throwing error if not authenticated\nconst getCurrentUserId = (context: GraphQLContext): string => {\n  if (!context.currentUser?.id) {\n    throw new GraphQLError('User is not authenticated', { extensions: { code: 'UNAUTHENTICATED' } });\n  }\n  return context.currentUser.id;\n};\n\nexport const dealFollowerResolvers: Resolvers<GraphQLContext> = {\n  Mutation: {\n    addDealFollower: async (_parent: any, args: MutationAddDealFollowerArgs, context: GraphQLContext): Promise<GraphQLDeal | null> => {\n      const currentUserId = getCurrentUserId(context); // Verifies authentication\n      const { dealId, userId: userToFollowId } = args; // userId is the user to be added as follower\n      const { supabase } = context;\n\n      // RLS on deal_followers should handle: \n      // 1. If the dealId exists and is visible to currentUserId.\n      // 2. If userToFollowId exists.\n      // 3. If currentUserId has permission to add userToFollowId (e.g., can add self, or if admin can add others).\n\n      // Check if already a follower to be idempotent\n      const { data: existingFollower, error: selectError } = await supabase\n        .from('deal_followers')\n        .select('deal_id') // Only need to check existence\n        .eq('deal_id', dealId)\n        .eq('user_id', userToFollowId)\n        .maybeSingle();\n\n      if (selectError) {\n        console.error(`addDealFollower: Error checking existing follower for deal ${dealId}, user ${userToFollowId}: ${selectError.message}`);\n        throw new GraphQLError('Could not add follower due to a server error.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n      }\n\n      if (existingFollower) {\n        console.log(`addDealFollower: User ${userToFollowId} is already a follower of deal ${dealId}.`);\n        // Fetch and return the deal as is.\n      } else {\n        const { error: insertError } = await supabase\n          .from('deal_followers')\n          .insert({ deal_id: dealId, user_id: userToFollowId, followed_by_user_id: currentUserId }); // Record who initiated the follow\n\n        if (insertError) {\n          console.error(`addDealFollower: Error adding follower ${userToFollowId} to deal ${dealId}: ${insertError.message}`);\n          if (insertError.code === '23503') { // foreign key violation\n             throw new GraphQLError('Deal or User not found.', { extensions: { code: 'NOT_FOUND' } });\n          }\n          throw new GraphQLError('Could not add follower.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n        }\n        console.log(`addDealFollower: User ${userToFollowId} successfully added as a follower to deal ${dealId} by user ${currentUserId}.`);\n      }\n\n      // Fetch and return the deal. The Deal.followers field resolver will populate the followers list.\n      const { data: dealData, error: dealError } = await supabase\n        .from('deals')\n        .select('*') // RLS on deals table ensures visibility for currentUserId\n        .eq('id', dealId)\n        .single();\n\n      if (dealError) {\n        console.error(`addDealFollower: Error fetching deal ${dealId} after adding follower: ${dealError.message}`);\n        if (dealError.code === 'PGRST116') throw new GraphQLError('Deal not found.', { extensions: { code: 'NOT_FOUND' }});\n        throw new GraphQLError('Follower added, but failed to fetch updated deal.');\n      }\n      // The direct fields of dealData are mapped; relational fields like 'followers' are handled by field resolvers.\n      return dealData as GraphQLDeal; \n    },\n    removeDealFollower: async (_parent: any, args: MutationRemoveDealFollowerArgs, context: GraphQLContext): Promise<GraphQLDeal | null> => {\n      const currentUserId = getCurrentUserId(context);\n      const { dealId, userId: userToUnfollowId } = args;\n      const { supabase } = context;\n\n      // RLS on deal_followers should handle permissions for removal.\n      // (e.g., user can remove self, or deal owner/admin can remove others).\n\n      const { error: deleteError, count } = await supabase\n        .from('deal_followers')\n        .delete({ count: 'exact' })\n        .eq('deal_id', dealId)\n        .eq('user_id', userToUnfollowId);\n\n      if (deleteError) {\n        console.error(`removeDealFollower: Error removing follower ${userToUnfollowId} from deal ${dealId}: ${deleteError.message}`);\n        throw new GraphQLError('Could not remove follower.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n      }\n\n      if (count === 0) {\n        console.warn(`removeDealFollower: Follower ${userToUnfollowId} not found on deal ${dealId}, or RLS prevented deletion.`);\n        // This is not necessarily an error; the state is achieved. Proceed to fetch the deal.\n      } else {\n        console.log(`removeDealFollower: User ${userToUnfollowId} successfully removed as a follower from deal ${dealId} by user ${currentUserId}.`);\n      }\n\n      const { data: dealData, error: dealError } = await supabase\n        .from('deals')\n        .select('*')\n        .eq('id', dealId)\n        .single();\n\n      if (dealError) {\n        console.error(`removeDealFollower: Error fetching deal ${dealId} after removing follower: ${dealError.message}`);\n        if (dealError.code === 'PGRST116') throw new GraphQLError('Deal not found.', { extensions: { code: 'NOT_FOUND' }});\n        throw new GraphQLError('Follower removed, but failed to fetch updated deal.');\n      }\n      return dealData as GraphQLDeal;\n    },\n  },\n  Deal: {\n    followers: async (parentDeal: Pick<GraphQLDeal, 'id'>, _args: {}, context: GraphQLContext): Promise<GraphQLUser[]> => {\n      // getCurrentUserId(context); // Not strictly needed for a read operation if RLS handles visibility of followers\n      const { supabase } = context;\n      const dealId = parentDeal.id;\n\n      if (!dealId) {\n        console.warn('Deal.followers: parentDeal.id is missing.');\n        return [];\n      }\n\n      // RLS on deal_followers (and potentially user_profiles) will determine what is visible.\n      const { data: followerLinks, error: followerError } = await supabase\n        .from('deal_followers')\n        .select('user_id') // Select the user_id of the follower\n        .eq('deal_id', dealId);\n\n      if (followerError) {\n        console.error(`Deal.followers: Error fetching follower links for deal ${dealId}: ${followerError.message}`);\n        // Depending on strictness, might return [] or throw.\n        throw new GraphQLError('Could not fetch follower links.');\n      }\n\n      if (!followerLinks || followerLinks.length === 0) {\n        return [];\n      }\n\n      const userIds = followerLinks.map(fl => fl.user_id).filter(id => id != null) as string[];\n      if (userIds.length === 0) {\n        return [];\n      }\n\n      // Fetch profile details for these user IDs\n      const { data: usersData, error: usersError } = await supabase\n        .from('user_profiles') \n        .select('user_id, display_name, avatar_url, email') \n        .in('user_id', userIds);\n\n      if (usersError) {\n        console.error(`Deal.followers: Error fetching user profiles for followers of deal ${dealId}: ${usersError.message}`);\n        throw new GraphQLError('Could not fetch follower user details.');\n      }\n      if (!usersData) return [];\n\n      return usersData.map(u => ({\n        id: u.user_id, \n        display_name: u.display_name,\n        avatar_url: u.avatar_url,\n        email: u.email || `\\${u.user_id.substring(0,8)}@placeholder.email`, // Corrected template literal escaping for tool\n        // teams field should be resolved by User.teams resolver\n      })) as GraphQLUser[];\n    },\n  },\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/teamResolvers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UpdateTeamInput' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TeamsFilterInput' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PaginationInput' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1002,1005],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1002,1005],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1744,1747],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1744,1747],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2658,2661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2658,2661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3677,3680],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3677,3680],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4374,4377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4374,4377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5467,5470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5467,5470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5917,5920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5917,5920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6998,7001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6998,7001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":154,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7774,7777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7774,7777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.\n- If you really want a type meaning \"any non-nullish value\", you probably want `NonNullable<unknown>` instead.","line":179,"column":97,"nodeType":"TSTypeLiteral","messageId":"bannedTypeMessage","endLine":179,"endColumn":99,"suggestions":[{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"object"},"fix":{"range":[8955,8957],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"unknown"},"fix":{"range":[8955,8957],"text":"unknown"},"desc":"Replace `{}` with `unknown`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"Record<string, never>"},"fix":{"range":[8955,8957],"text":"Record<string, never>"},"desc":"Replace `{}` with `Record<string, never>`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"NonNullable<unknown>"},"fix":{"range":[8955,8957],"text":"NonNullable<unknown>"},"desc":"Replace `{}` with `NonNullable<unknown>`."}]},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.\n- If you really want a type meaning \"any non-nullish value\", you probably want `NonNullable<unknown>` instead.","line":194,"column":65,"nodeType":"TSTypeLiteral","messageId":"bannedTypeMessage","endLine":194,"endColumn":67,"suggestions":[{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"object"},"fix":{"range":[9765,9767],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"unknown"},"fix":{"range":[9765,9767],"text":"unknown"},"desc":"Replace `{}` with `unknown`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"Record<string, never>"},"fix":{"range":[9765,9767],"text":"Record<string, never>"},"desc":"Replace `{}` with `Record<string, never>`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"NonNullable<unknown>"},"fix":{"range":[9765,9767],"text":"NonNullable<unknown>"},"desc":"Replace `{}` with `NonNullable<unknown>`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'memberLink' is assigned a value but never used.","line":218,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":218,"endColumn":25},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.\n- If you really want a type meaning \"any non-nullish value\", you probably want `NonNullable<unknown>` instead.","line":227,"column":99,"nodeType":"TSTypeLiteral","messageId":"bannedTypeMessage","endLine":227,"endColumn":101,"suggestions":[{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"object"},"fix":{"range":[11120,11122],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"unknown"},"fix":{"range":[11120,11122],"text":"unknown"},"desc":"Replace `{}` with `unknown`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"Record<string, never>"},"fix":{"range":[11120,11122],"text":"Record<string, never>"},"desc":"Replace `{}` with `Record<string, never>`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"NonNullable<unknown>"},"fix":{"range":[11120,11122],"text":"NonNullable<unknown>"},"desc":"Replace `{}` with `NonNullable<unknown>`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Resolvers,\n  Team as GraphQLTeam,\n  User as GraphQLUser,\n  CreateTeamInput,\n  UpdateTeamInput,\n  TeamsFilterInput,\n  PaginationInput,\n  QueryTeamArgs,\n  QueryTeamsArgs,\n  MutationCreateTeamArgs,\n  MutationUpdateTeamArgs,\n  MutationDeleteTeamArgs,\n  MutationAddTeamMemberArgs,\n  MutationRemoveTeamMemberArgs,\n  MutationUpdateTeamMemberRoleArgs\n} from '../../../../lib/generated/graphql';\nimport { GraphQLError } from 'graphql';\nimport { GraphQLContext } from '../index';\n\n// Helper to get current user ID, throwing error if not authenticated\nconst getCurrentUserId = (context: GraphQLContext): string => {\n  if (!context.currentUser?.id) {\n    throw new GraphQLError('User is not authenticated', { extensions: { code: 'UNAUTHENTICATED' } });\n  }\n  return context.currentUser.id;\n};\n\n// Helper to map DB team row to GraphQLTeam (excluding relational fields handled by field resolvers)\n// Exported for use in other resolvers like userResolvers.ts\nexport const mapDbTeamToGraphQLTeam = (dbTeam: any): Partial<GraphQLTeam> => {\n  if (!dbTeam) return null;\n  return {\n    id: dbTeam.id,\n    name: dbTeam.name,\n    description: dbTeam.description,\n    created_at: dbTeam.created_at, // Ensure DateTime scalar handles string conversion\n    updated_at: dbTeam.updated_at,\n    // Fields to be resolved by Team field resolvers:\n    // teamLead (based on dbTeam.team_lead_user_id)\n    // members (based on dbTeam.id)\n    // createdBy (based on dbTeam.created_by_user_id)\n\n    // Store these raw IDs on the object for field resolvers to use\n    _team_lead_user_id: dbTeam.team_lead_user_id,\n    _created_by_user_id: dbTeam.created_by_user_id,\n  };\n}\n\nexport const teamResolvers: Resolvers<GraphQLContext> = {\n  Query: {\n    team: async (_parent: any, args: QueryTeamArgs, context: GraphQLContext): Promise<GraphQLTeam | null> => {\n      const { supabase } = context;\n      const { id } = args;\n      // RLS policies on 'teams' table should enforce visibility.\n      const { data: dbTeam, error } = await supabase\n        .from('teams')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) {\n        console.error(`Error fetching team ${id}: ${error.message}`);\n        // If RLS causes a 404-like error (e.g., 0 rows), it might not be a server error.\n        // Supabase errors often have a code (e.g., 'PGRST116' for 0 rows with .single())\n        if (error.code === 'PGRST116') return null; // Not found or not permitted\n        throw new GraphQLError('Could not fetch team.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n      }\n      return mapDbTeamToGraphQLTeam(dbTeam) as GraphQLTeam;\n    },\n    teams: async (_parent: any, args: QueryTeamsArgs, context: GraphQLContext): Promise<GraphQLTeam[]> => {\n      const { supabase } = context;\n      let query = supabase.from('teams').select('*');\n\n      if (args.filter?.nameContains) {\n        query = query.ilike('name', `%${args.filter.nameContains}%`);\n      }\n\n      if (args.pagination) {\n        const limit = args.pagination.limit ?? 20;\n        const offset = args.pagination.offset ?? 0;\n        query = query.range(offset, offset + limit - 1);\n      }\n      // TODO: Add ordering from args if provided\n      // TODO: Add ordering, e.g., .order('name', { ascending: true })\n\n      const { data: dbTeams, error } = await query;\n\n      if (error) {\n        console.error(`Error fetching teams: ${error.message}`);\n        throw new GraphQLError('Could not fetch teams.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n      }\n      return dbTeams ? dbTeams.map(dbTeam => mapDbTeamToGraphQLTeam(dbTeam) as GraphQLTeam) : [];\n    },\n  },\n  Mutation: {\n    createTeam: async (_parent: any, args: MutationCreateTeamArgs, context: GraphQLContext): Promise<GraphQLTeam | null> => {\n      const currentUserId = getCurrentUserId(context);\n      const { supabase } = context;\n      const { input } = args;\n      const { data: newDbTeam, error } = await supabase\n        .from('teams')\n        .insert({ name: input.name, description: input.description, team_lead_user_id: input.teamLeadUserId, created_by_user_id: currentUserId })\n        .select().single();\n      if (error) { console.error(`Error creating team: ${error.message}`); throw new GraphQLError('Could not create team.'); }\n      return mapDbTeamToGraphQLTeam(newDbTeam) as GraphQLTeam;\n    },\n    updateTeam: async (_parent: any, args: MutationUpdateTeamArgs, context: GraphQLContext): Promise<GraphQLTeam | null> => {\n      getCurrentUserId(context); \n      const { supabase } = context;\n      const { id, name, description, teamLeadUserId } = args.input;\n      const updatePayload: Partial<CreateTeamInput & { team_lead_user_id: string }> = {};\n      if (name !== undefined) updatePayload.name = name;\n      if (description !== undefined) updatePayload.description = description;\n      if (teamLeadUserId !== undefined) updatePayload.team_lead_user_id = teamLeadUserId;\n      if (Object.keys(updatePayload).length === 0) throw new GraphQLError('No update fields provided.');\n      const { data: updatedDbTeam, error } = await supabase.from('teams').update(updatePayload).eq('id', id).select().single();\n      if (error) { console.error(`Error updating team ${id}: ${error.message}`); if (error.code === 'PGRST116') throw new GraphQLError('Team not found.'); throw new GraphQLError('Could not update team.'); }\n      return mapDbTeamToGraphQLTeam(updatedDbTeam) as GraphQLTeam;\n    },\n    deleteTeam: async (_parent: any, args: MutationDeleteTeamArgs, context: GraphQLContext): Promise<boolean> => {\n      getCurrentUserId(context);\n      const { supabase } = context;\n      const { id } = args;\n      const { error } = await supabase.from('teams').delete().eq('id', id);\n      if (error) { console.error(`Error deleting team ${id}: ${error.message}`); throw new GraphQLError('Could not delete team.'); }\n      return true; \n    },\n    addTeamMember: async (_parent: any, args: MutationAddTeamMemberArgs, context: GraphQLContext): Promise<GraphQLTeam | null> => {\n      getCurrentUserId(context);\n      const { supabase } = context;\n      const { teamId, userId, role } = args;\n      const { error } = await supabase.from('team_members').insert({ team_id: teamId, user_id: userId, role: role || 'member' });\n      if (error) { \n        if (error.code === '23505') throw new GraphQLError('User is already a member.'); \n        if (error.code === '23503') throw new GraphQLError('Team or User not found.');\n        console.error(`Error adding team member: ${error.message}`); \n        throw new GraphQLError('Could not add member.'); \n      }\n      const { data: dbTeam, error: teamError } = await supabase.from('teams').select('*').eq('id', teamId).single();\n      if (teamError) { console.error(`Error refetching team ${teamId} after adding member: ${teamError.message}`); throw new GraphQLError('Member added, but failed to refetch team.');}\n      return mapDbTeamToGraphQLTeam(dbTeam) as GraphQLTeam;\n    },\n    removeTeamMember: async (_parent: any, args: MutationRemoveTeamMemberArgs, context: GraphQLContext): Promise<GraphQLTeam | null> => {\n      getCurrentUserId(context);\n      const { supabase } = context;\n      const { teamId, userId } = args;\n      const { error } = await supabase.from('team_members').delete().match({ team_id: teamId, user_id: userId });\n      if (error) { console.error(`Error removing team member: ${error.message}`); throw new GraphQLError('Could not remove member.'); }\n      const { data: dbTeam, error: teamError } = await supabase.from('teams').select('*').eq('id', teamId).single();\n      if (teamError) throw new GraphQLError('Member removed, but failed to refetch team.');\n      return mapDbTeamToGraphQLTeam(dbTeam) as GraphQLTeam;\n    },\n    updateTeamMemberRole: async (_parent: any, args: MutationUpdateTeamMemberRoleArgs, context: GraphQLContext): Promise<GraphQLTeam | null> => {\n      getCurrentUserId(context);\n      const { supabase } = context;\n      const { teamId, userId, role } = args;\n      if (!role) throw new GraphQLError('Role is required to update.', { extensions: { code: 'BAD_USER_INPUT'}});\n      \n      const { error } = await supabase\n        .from('team_members')\n        .update({ role })\n        .match({ team_id: teamId, user_id: userId });\n\n      if (error) {\n        console.error(`Error updating team member role: ${error.message}`);\n        throw new GraphQLError('Could not update team member role.');\n      }\n\n      const { data: dbTeam, error: teamError } = await supabase.from('teams').select('*').eq('id', teamId).single();\n      if (teamError) { \n        console.error(`Error refetching team ${teamId} after updating member role: ${teamError.message}`);\n        throw new GraphQLError('Member role updated, but failed to refetch team.');\n      }\n      return mapDbTeamToGraphQLTeam(dbTeam) as GraphQLTeam;\n    },\n  },\n  Team: {\n    teamLead: async (parentTeam: Partial<GraphQLTeam> & { _team_lead_user_id?: string }, _args: {}, context: GraphQLContext): Promise<GraphQLUser | null> => {\n      const teamLeadUserId = parentTeam._team_lead_user_id;\n      if (!teamLeadUserId) return null;\n      const { supabase } = context;\n      const { data: userData, error } = await supabase\n        .from('user_profiles') // Assuming user profiles table\n        .select('user_id, display_name, avatar_url, email')\n        .eq('user_id', teamLeadUserId)\n        .single();\n      if (error || !userData) {\n        console.error(`Error fetching team lead profile ${teamLeadUserId}: ${error?.message}`);\n        return null;\n      }\n      return { id: userData.user_id, display_name: userData.display_name, avatar_url: userData.avatar_url, email: userData.email } as GraphQLUser;\n    },\n    members: async (parentTeam: Pick<GraphQLTeam, 'id'>, _args: {}, context: GraphQLContext): Promise<GraphQLUser[]> => {\n      const { supabase } = context;\n      const { data: memberLinks, error: memberError } = await supabase\n        .from('team_members')\n        .select('user_id, role')\n        .eq('team_id', parentTeam.id);\n\n      if (memberError) {\n        console.error(`Error fetching members for team ${parentTeam.id}: ${memberError.message}`);\n        return [];\n      }\n      if (!memberLinks || memberLinks.length === 0) return [];\n\n      const userIds = memberLinks.map(ml => ml.user_id);\n      const { data: usersData, error: usersError } = await supabase\n        .from('user_profiles')\n        .select('user_id, display_name, avatar_url, email')\n        .in('user_id', userIds);\n\n      if (usersError) {\n        console.error(`Error fetching member profiles for team ${parentTeam.id}: ${usersError.message}`);\n        return [];\n      }\n      return usersData ? usersData.map(u => {\n        const memberLink = memberLinks.find(ml => ml.user_id === u.user_id);\n        return {\n          id: u.user_id,\n          email: u.email || `${u.user_id.substring(0,8)}@placeholder.email`,\n          display_name: u.display_name,\n          avatar_url: u.avatar_url,\n        } as GraphQLUser; \n      }) : [];\n    },\n    createdBy: async (parentTeam: Partial<GraphQLTeam> & { _created_by_user_id?: string }, _args: {}, context: GraphQLContext): Promise<GraphQLUser | null> => {\n      const createdByUserId = parentTeam._created_by_user_id;\n      if (!createdByUserId) return null;\n      const { supabase } = context;\n      const { data: userData, error } = await supabase\n        .from('user_profiles')\n        .select('user_id, display_name, avatar_url, email')\n        .eq('user_id', createdByUserId)\n        .single();\n      if (error || !userData) {\n        console.error(`Error fetching creator profile ${createdByUserId}: ${error?.message}`);\n        return null;\n      }\n      return { id: userData.user_id, display_name: userData.display_name, avatar_url: userData.avatar_url, email: userData.email } as GraphQLUser;\n    },\n  },\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tomaskovarik/059_PIPECD/PIPECD/netlify/functions/graphql/resolvers/userResolvers.ts","messages":[{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.\n- If you really want a type meaning \"any non-nullish value\", you probably want `NonNullable<unknown>` instead.","line":12,"column":63,"nodeType":"TSTypeLiteral","messageId":"bannedTypeMessage","endLine":12,"endColumn":65,"suggestions":[{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"object"},"fix":{"range":[383,385],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"unknown"},"fix":{"range":[383,385],"text":"unknown"},"desc":"Replace `{}` with `unknown`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"Record<string, never>"},"fix":{"range":[383,385],"text":"Record<string, never>"},"desc":"Replace `{}` with `Record<string, never>`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"NonNullable<unknown>"},"fix":{"range":[383,385],"text":"NonNullable<unknown>"},"desc":"Replace `{}` with `NonNullable<unknown>`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Resolvers,\n  User as GraphQLUser,\n  Team as GraphQLTeam\n} from '../../../../lib/generated/graphql';\nimport { GraphQLContext } from '../index';\nimport { mapDbTeamToGraphQLTeam } from './teamResolvers';\nimport { GraphQLError } from 'graphql';\n\nexport const userResolvers: Resolvers<GraphQLContext> = {\n  User: {\n    teams: async (parentUser: Pick<GraphQLUser, 'id'>, _args: {}, context: GraphQLContext): Promise<GraphQLTeam[]> => {\n      console.log(`User.teams: Fetching teams for user ${parentUser.id}`);\n      const { supabase } = context;\n\n      if (!parentUser.id) {\n        console.warn('User.teams: parentUser.id is missing.');\n        return [];\n      }\n\n      try {\n        // Fetch team_ids the user is a member of\n        const { data: teamMembers, error: tmError } = await supabase\n          .from('team_members')\n          .select('team_id')\n          .eq('user_id', parentUser.id);\n\n        if (tmError) {\n          console.error(`User.teams: Error fetching team memberships for user ${parentUser.id}:`, tmError.message);\n          throw new GraphQLError('Could not fetch team memberships.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n        }\n\n        if (!teamMembers || teamMembers.length === 0) {\n          console.log(`User.teams: User ${parentUser.id} is not a member of any teams.`);\n          return [];\n        }\n\n        const teamIds = teamMembers.map(tm => tm.team_id);\n\n        // Fetch details for those teams\n        // RLS on 'teams' table should apply here for the user making the query (context.currentUser)\n        // not necessarily for parentUser.id if an admin is querying another user's teams.\n        // The mapDbTeamToGraphQLTeam expects full team objects.\n        const { data: teamsData, error: tError } = await supabase\n          .from('teams')\n          .select('*') // RLS will filter this based on the logged-in user's permissions\n          .in('id', teamIds);\n\n        if (tError) {\n          console.error(`User.teams: Error fetching teams for user ${parentUser.id} with IDs [${teamIds.join(', ')}]:`, tError.message);\n          throw new GraphQLError('Could not fetch teams.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n        }\n        \n        if (!teamsData) {\n            return [];\n        }\n\n        // Map DB data to GraphQL types\n        // The mapDbTeamToGraphQLTeam helper returns Partial<GraphQLTeam>\n        // but the schema expects GraphQLTeam[]. We cast it as GraphQLTeam,\n        // assuming the mapped fields + field resolvers will complete the object.\n        return teamsData.map(dbTeam => mapDbTeamToGraphQLTeam(dbTeam) as GraphQLTeam);\n\n      } catch (error) {\n        console.error(`User.teams: Unexpected error for user ${parentUser.id}:`, error);\n        if (error instanceof GraphQLError) throw error;\n        throw new GraphQLError('An unexpected error occurred while fetching user teams.', { extensions: { code: 'INTERNAL_SERVER_ERROR' } });\n      }\n    },\n  },\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]