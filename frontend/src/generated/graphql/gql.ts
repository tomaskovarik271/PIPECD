/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation CreatePersonOrgRole($input: CreatePersonOrganizationalRoleInput!) {\n    createPersonOrganizationalRole(input: $input) {\n      id\n      roleTitle\n      department\n      seniorityLevel\n      budgetAuthorityUsd\n      teamSize\n      startDate\n      isPrimaryRole\n      notes\n    }\n  }\n": typeof types.CreatePersonOrgRoleDocument,
    "\n  mutation CreateStakeholderAnalysis($input: CreateStakeholderAnalysisInput!) {\n    createStakeholderAnalysis(input: $input) {\n      id\n      influenceScore\n      decisionAuthority\n      engagementLevel\n      approachStrategy\n      nextBestAction\n    }\n  }\n": typeof types.CreateStakeholderAnalysisDocument,
    "\n  query GetPersonOrganizationalRoles($personId: ID!) {\n    personOrganizationalRoles(personId: $personId) {\n      id\n      roleTitle\n      department\n      seniorityLevel\n      budgetAuthorityUsd\n      teamSize\n      startDate\n      endDate\n      isPrimaryRole\n      notes\n      organization {\n        id\n        name\n      }\n    }\n  }\n": typeof types.GetPersonOrganizationalRolesDocument,
    "\n  mutation CreatePersonOrgRoleEdit($input: CreatePersonOrganizationalRoleInput!) {\n    createPersonOrganizationalRole(input: $input) {\n      id\n      roleTitle\n      department\n      seniorityLevel\n      isPrimaryRole\n      person {\n        id\n        first_name\n        last_name\n      }\n      organization {\n        id\n        name\n      }\n    }\n  }\n": typeof types.CreatePersonOrgRoleEditDocument,
    "\n  mutation UpdatePersonOrgRole($id: ID!, $input: CreatePersonOrganizationalRoleInput!) {\n    updatePersonOrganizationalRole(id: $id, input: $input) {\n      id\n      roleTitle\n      department\n      seniorityLevel\n      budgetAuthorityUsd\n      teamSize\n      startDate\n      endDate\n      isPrimaryRole\n      notes\n      organization {\n        id\n        name\n      }\n    }\n  }\n": typeof types.UpdatePersonOrgRoleDocument,
    "\n  mutation DeletePersonOrganizationalRole($id: ID!) {\n    deletePersonOrganizationalRole(id: $id)\n  }\n": typeof types.DeletePersonOrganizationalRoleDocument,
    "\n  query GetAgentThoughts($conversationId: ID!, $limit: Int) {\n    agentThoughts(conversationId: $conversationId, limit: $limit) {\n      id\n      conversationId\n      type\n      content\n      metadata\n      timestamp\n    }\n  }\n": typeof types.GetAgentThoughtsDocument,
    "\n  mutation UpdateUserProfile($input: UpdateUserProfileInput!) {\n    updateUserProfile(input: $input) {\n      id\n      email\n      display_name\n      avatar_url\n    }\n  }\n": typeof types.UpdateUserProfileDocument,
    "\n  query AnalyzeCrossEntityNetwork(\n    $includeDeals: Boolean\n    $includeLeads: Boolean\n    $includeOrganizations: Boolean\n    $includePeople: Boolean\n    $dealIds: [ID!]\n    $leadIds: [ID!]\n    $organizationIds: [ID!]\n    $personIds: [ID!]\n    $maxDegrees: Int\n  ) {\n    analyzeCrossEntityNetwork(\n      includeDeals: $includeDeals\n      includeLeads: $includeLeads\n      includeOrganizations: $includeOrganizations\n      includePeople: $includePeople\n      dealIds: $dealIds\n      leadIds: $leadIds\n      organizationIds: $organizationIds\n      personIds: $personIds\n      maxDegrees: $maxDegrees\n    ) {\n      totalNodes\n      totalRelationships\n      nodeBreakdown {\n        dealCount\n        leadCount\n        organizationCount\n        personCount\n      }\n      deals {\n        id\n        name\n        amount\n        expected_close_date\n        currentWfmStatus {\n          name\n          color\n        }\n      }\n      leads {\n        id\n        name\n        lead_score\n        qualificationStatus\n        estimated_value\n      }\n      organizations {\n        id\n        name\n        address\n      }\n      people {\n        id\n        first_name\n        last_name\n        email\n        organization_id\n      }\n      relationships {\n        id\n        sourceType\n        sourceId\n        targetType\n        targetId\n        relationshipType\n        strength\n      }\n      networkInsights\n      clusterAnalysis\n      pathAnalysis\n    }\n  }\n": typeof types.AnalyzeCrossEntityNetworkDocument,
    "\n  query GetPersonCustomFieldDefinitions {\n    customFieldDefinitions(entityType: PERSON, includeInactive: false) {\n      id\n      fieldName\n      fieldLabel\n      fieldType\n      dropdownOptions { value label }\n    }\n  }\n": typeof types.GetPersonCustomFieldDefinitionsDocument,
    "\n  query GetStakeholderAnalyses($organizationId: ID) {\n    stakeholderAnalyses(organizationId: $organizationId) {\n      id\n      influenceScore\n      decisionAuthority\n      engagementLevel\n      approachStrategy\n      nextBestAction\n      createdAt\n      updatedAt\n      person {\n        id\n        first_name\n        last_name\n      }\n      organization {\n        id\n        name\n      }\n    }\n  }\n": typeof types.GetStakeholderAnalysesDocument,
    "\n  query GetMe {\n    me {\n      id\n      email\n      display_name\n      avatar_url\n    }\n  }\n": typeof types.GetMeDocument,
};
const documents: Documents = {
    "\n  mutation CreatePersonOrgRole($input: CreatePersonOrganizationalRoleInput!) {\n    createPersonOrganizationalRole(input: $input) {\n      id\n      roleTitle\n      department\n      seniorityLevel\n      budgetAuthorityUsd\n      teamSize\n      startDate\n      isPrimaryRole\n      notes\n    }\n  }\n": types.CreatePersonOrgRoleDocument,
    "\n  mutation CreateStakeholderAnalysis($input: CreateStakeholderAnalysisInput!) {\n    createStakeholderAnalysis(input: $input) {\n      id\n      influenceScore\n      decisionAuthority\n      engagementLevel\n      approachStrategy\n      nextBestAction\n    }\n  }\n": types.CreateStakeholderAnalysisDocument,
    "\n  query GetPersonOrganizationalRoles($personId: ID!) {\n    personOrganizationalRoles(personId: $personId) {\n      id\n      roleTitle\n      department\n      seniorityLevel\n      budgetAuthorityUsd\n      teamSize\n      startDate\n      endDate\n      isPrimaryRole\n      notes\n      organization {\n        id\n        name\n      }\n    }\n  }\n": types.GetPersonOrganizationalRolesDocument,
    "\n  mutation CreatePersonOrgRoleEdit($input: CreatePersonOrganizationalRoleInput!) {\n    createPersonOrganizationalRole(input: $input) {\n      id\n      roleTitle\n      department\n      seniorityLevel\n      isPrimaryRole\n      person {\n        id\n        first_name\n        last_name\n      }\n      organization {\n        id\n        name\n      }\n    }\n  }\n": types.CreatePersonOrgRoleEditDocument,
    "\n  mutation UpdatePersonOrgRole($id: ID!, $input: CreatePersonOrganizationalRoleInput!) {\n    updatePersonOrganizationalRole(id: $id, input: $input) {\n      id\n      roleTitle\n      department\n      seniorityLevel\n      budgetAuthorityUsd\n      teamSize\n      startDate\n      endDate\n      isPrimaryRole\n      notes\n      organization {\n        id\n        name\n      }\n    }\n  }\n": types.UpdatePersonOrgRoleDocument,
    "\n  mutation DeletePersonOrganizationalRole($id: ID!) {\n    deletePersonOrganizationalRole(id: $id)\n  }\n": types.DeletePersonOrganizationalRoleDocument,
    "\n  query GetAgentThoughts($conversationId: ID!, $limit: Int) {\n    agentThoughts(conversationId: $conversationId, limit: $limit) {\n      id\n      conversationId\n      type\n      content\n      metadata\n      timestamp\n    }\n  }\n": types.GetAgentThoughtsDocument,
    "\n  mutation UpdateUserProfile($input: UpdateUserProfileInput!) {\n    updateUserProfile(input: $input) {\n      id\n      email\n      display_name\n      avatar_url\n    }\n  }\n": types.UpdateUserProfileDocument,
    "\n  query AnalyzeCrossEntityNetwork(\n    $includeDeals: Boolean\n    $includeLeads: Boolean\n    $includeOrganizations: Boolean\n    $includePeople: Boolean\n    $dealIds: [ID!]\n    $leadIds: [ID!]\n    $organizationIds: [ID!]\n    $personIds: [ID!]\n    $maxDegrees: Int\n  ) {\n    analyzeCrossEntityNetwork(\n      includeDeals: $includeDeals\n      includeLeads: $includeLeads\n      includeOrganizations: $includeOrganizations\n      includePeople: $includePeople\n      dealIds: $dealIds\n      leadIds: $leadIds\n      organizationIds: $organizationIds\n      personIds: $personIds\n      maxDegrees: $maxDegrees\n    ) {\n      totalNodes\n      totalRelationships\n      nodeBreakdown {\n        dealCount\n        leadCount\n        organizationCount\n        personCount\n      }\n      deals {\n        id\n        name\n        amount\n        expected_close_date\n        currentWfmStatus {\n          name\n          color\n        }\n      }\n      leads {\n        id\n        name\n        lead_score\n        qualificationStatus\n        estimated_value\n      }\n      organizations {\n        id\n        name\n        address\n      }\n      people {\n        id\n        first_name\n        last_name\n        email\n        organization_id\n      }\n      relationships {\n        id\n        sourceType\n        sourceId\n        targetType\n        targetId\n        relationshipType\n        strength\n      }\n      networkInsights\n      clusterAnalysis\n      pathAnalysis\n    }\n  }\n": types.AnalyzeCrossEntityNetworkDocument,
    "\n  query GetPersonCustomFieldDefinitions {\n    customFieldDefinitions(entityType: PERSON, includeInactive: false) {\n      id\n      fieldName\n      fieldLabel\n      fieldType\n      dropdownOptions { value label }\n    }\n  }\n": types.GetPersonCustomFieldDefinitionsDocument,
    "\n  query GetStakeholderAnalyses($organizationId: ID) {\n    stakeholderAnalyses(organizationId: $organizationId) {\n      id\n      influenceScore\n      decisionAuthority\n      engagementLevel\n      approachStrategy\n      nextBestAction\n      createdAt\n      updatedAt\n      person {\n        id\n        first_name\n        last_name\n      }\n      organization {\n        id\n        name\n      }\n    }\n  }\n": types.GetStakeholderAnalysesDocument,
    "\n  query GetMe {\n    me {\n      id\n      email\n      display_name\n      avatar_url\n    }\n  }\n": types.GetMeDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreatePersonOrgRole($input: CreatePersonOrganizationalRoleInput!) {\n    createPersonOrganizationalRole(input: $input) {\n      id\n      roleTitle\n      department\n      seniorityLevel\n      budgetAuthorityUsd\n      teamSize\n      startDate\n      isPrimaryRole\n      notes\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePersonOrgRole($input: CreatePersonOrganizationalRoleInput!) {\n    createPersonOrganizationalRole(input: $input) {\n      id\n      roleTitle\n      department\n      seniorityLevel\n      budgetAuthorityUsd\n      teamSize\n      startDate\n      isPrimaryRole\n      notes\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateStakeholderAnalysis($input: CreateStakeholderAnalysisInput!) {\n    createStakeholderAnalysis(input: $input) {\n      id\n      influenceScore\n      decisionAuthority\n      engagementLevel\n      approachStrategy\n      nextBestAction\n    }\n  }\n"): (typeof documents)["\n  mutation CreateStakeholderAnalysis($input: CreateStakeholderAnalysisInput!) {\n    createStakeholderAnalysis(input: $input) {\n      id\n      influenceScore\n      decisionAuthority\n      engagementLevel\n      approachStrategy\n      nextBestAction\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPersonOrganizationalRoles($personId: ID!) {\n    personOrganizationalRoles(personId: $personId) {\n      id\n      roleTitle\n      department\n      seniorityLevel\n      budgetAuthorityUsd\n      teamSize\n      startDate\n      endDate\n      isPrimaryRole\n      notes\n      organization {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPersonOrganizationalRoles($personId: ID!) {\n    personOrganizationalRoles(personId: $personId) {\n      id\n      roleTitle\n      department\n      seniorityLevel\n      budgetAuthorityUsd\n      teamSize\n      startDate\n      endDate\n      isPrimaryRole\n      notes\n      organization {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreatePersonOrgRoleEdit($input: CreatePersonOrganizationalRoleInput!) {\n    createPersonOrganizationalRole(input: $input) {\n      id\n      roleTitle\n      department\n      seniorityLevel\n      isPrimaryRole\n      person {\n        id\n        first_name\n        last_name\n      }\n      organization {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePersonOrgRoleEdit($input: CreatePersonOrganizationalRoleInput!) {\n    createPersonOrganizationalRole(input: $input) {\n      id\n      roleTitle\n      department\n      seniorityLevel\n      isPrimaryRole\n      person {\n        id\n        first_name\n        last_name\n      }\n      organization {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdatePersonOrgRole($id: ID!, $input: CreatePersonOrganizationalRoleInput!) {\n    updatePersonOrganizationalRole(id: $id, input: $input) {\n      id\n      roleTitle\n      department\n      seniorityLevel\n      budgetAuthorityUsd\n      teamSize\n      startDate\n      endDate\n      isPrimaryRole\n      notes\n      organization {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePersonOrgRole($id: ID!, $input: CreatePersonOrganizationalRoleInput!) {\n    updatePersonOrganizationalRole(id: $id, input: $input) {\n      id\n      roleTitle\n      department\n      seniorityLevel\n      budgetAuthorityUsd\n      teamSize\n      startDate\n      endDate\n      isPrimaryRole\n      notes\n      organization {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeletePersonOrganizationalRole($id: ID!) {\n    deletePersonOrganizationalRole(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeletePersonOrganizationalRole($id: ID!) {\n    deletePersonOrganizationalRole(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAgentThoughts($conversationId: ID!, $limit: Int) {\n    agentThoughts(conversationId: $conversationId, limit: $limit) {\n      id\n      conversationId\n      type\n      content\n      metadata\n      timestamp\n    }\n  }\n"): (typeof documents)["\n  query GetAgentThoughts($conversationId: ID!, $limit: Int) {\n    agentThoughts(conversationId: $conversationId, limit: $limit) {\n      id\n      conversationId\n      type\n      content\n      metadata\n      timestamp\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUserProfile($input: UpdateUserProfileInput!) {\n    updateUserProfile(input: $input) {\n      id\n      email\n      display_name\n      avatar_url\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserProfile($input: UpdateUserProfileInput!) {\n    updateUserProfile(input: $input) {\n      id\n      email\n      display_name\n      avatar_url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AnalyzeCrossEntityNetwork(\n    $includeDeals: Boolean\n    $includeLeads: Boolean\n    $includeOrganizations: Boolean\n    $includePeople: Boolean\n    $dealIds: [ID!]\n    $leadIds: [ID!]\n    $organizationIds: [ID!]\n    $personIds: [ID!]\n    $maxDegrees: Int\n  ) {\n    analyzeCrossEntityNetwork(\n      includeDeals: $includeDeals\n      includeLeads: $includeLeads\n      includeOrganizations: $includeOrganizations\n      includePeople: $includePeople\n      dealIds: $dealIds\n      leadIds: $leadIds\n      organizationIds: $organizationIds\n      personIds: $personIds\n      maxDegrees: $maxDegrees\n    ) {\n      totalNodes\n      totalRelationships\n      nodeBreakdown {\n        dealCount\n        leadCount\n        organizationCount\n        personCount\n      }\n      deals {\n        id\n        name\n        amount\n        expected_close_date\n        currentWfmStatus {\n          name\n          color\n        }\n      }\n      leads {\n        id\n        name\n        lead_score\n        qualificationStatus\n        estimated_value\n      }\n      organizations {\n        id\n        name\n        address\n      }\n      people {\n        id\n        first_name\n        last_name\n        email\n        organization_id\n      }\n      relationships {\n        id\n        sourceType\n        sourceId\n        targetType\n        targetId\n        relationshipType\n        strength\n      }\n      networkInsights\n      clusterAnalysis\n      pathAnalysis\n    }\n  }\n"): (typeof documents)["\n  query AnalyzeCrossEntityNetwork(\n    $includeDeals: Boolean\n    $includeLeads: Boolean\n    $includeOrganizations: Boolean\n    $includePeople: Boolean\n    $dealIds: [ID!]\n    $leadIds: [ID!]\n    $organizationIds: [ID!]\n    $personIds: [ID!]\n    $maxDegrees: Int\n  ) {\n    analyzeCrossEntityNetwork(\n      includeDeals: $includeDeals\n      includeLeads: $includeLeads\n      includeOrganizations: $includeOrganizations\n      includePeople: $includePeople\n      dealIds: $dealIds\n      leadIds: $leadIds\n      organizationIds: $organizationIds\n      personIds: $personIds\n      maxDegrees: $maxDegrees\n    ) {\n      totalNodes\n      totalRelationships\n      nodeBreakdown {\n        dealCount\n        leadCount\n        organizationCount\n        personCount\n      }\n      deals {\n        id\n        name\n        amount\n        expected_close_date\n        currentWfmStatus {\n          name\n          color\n        }\n      }\n      leads {\n        id\n        name\n        lead_score\n        qualificationStatus\n        estimated_value\n      }\n      organizations {\n        id\n        name\n        address\n      }\n      people {\n        id\n        first_name\n        last_name\n        email\n        organization_id\n      }\n      relationships {\n        id\n        sourceType\n        sourceId\n        targetType\n        targetId\n        relationshipType\n        strength\n      }\n      networkInsights\n      clusterAnalysis\n      pathAnalysis\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPersonCustomFieldDefinitions {\n    customFieldDefinitions(entityType: PERSON, includeInactive: false) {\n      id\n      fieldName\n      fieldLabel\n      fieldType\n      dropdownOptions { value label }\n    }\n  }\n"): (typeof documents)["\n  query GetPersonCustomFieldDefinitions {\n    customFieldDefinitions(entityType: PERSON, includeInactive: false) {\n      id\n      fieldName\n      fieldLabel\n      fieldType\n      dropdownOptions { value label }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetStakeholderAnalyses($organizationId: ID) {\n    stakeholderAnalyses(organizationId: $organizationId) {\n      id\n      influenceScore\n      decisionAuthority\n      engagementLevel\n      approachStrategy\n      nextBestAction\n      createdAt\n      updatedAt\n      person {\n        id\n        first_name\n        last_name\n      }\n      organization {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetStakeholderAnalyses($organizationId: ID) {\n    stakeholderAnalyses(organizationId: $organizationId) {\n      id\n      influenceScore\n      decisionAuthority\n      engagementLevel\n      approachStrategy\n      nextBestAction\n      createdAt\n      updatedAt\n      person {\n        id\n        first_name\n        last_name\n      }\n      organization {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMe {\n    me {\n      id\n      email\n      display_name\n      avatar_url\n    }\n  }\n"): (typeof documents)["\n  query GetMe {\n    me {\n      id\n      email\n      display_name\n      avatar_url\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;