"""
Activity Reminders and Notifications GraphQL Schema
"""

# Enums
enum ReminderType {
  EMAIL
  IN_APP
  PUSH
}

enum NotificationType {
  ACTIVITY_REMINDER
  ACTIVITY_OVERDUE
  DEAL_ASSIGNED
  LEAD_ASSIGNED
  SYSTEM_ANNOUNCEMENT
  CUSTOM
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

# Types
type UserReminderPreferences {
  id: ID!
  userId: ID!
  
  # Email reminder settings
  emailRemindersEnabled: Boolean!
  emailReminderMinutesBefore: Int!
  emailDailyDigestEnabled: Boolean!
  emailDailyDigestTime: String! # Time format: "HH:MM:SS"
  
  # In-app notification settings
  inAppRemindersEnabled: Boolean!
  inAppReminderMinutesBefore: Int!
  
  # Push notification settings
  pushRemindersEnabled: Boolean!
  pushReminderMinutesBefore: Int!
  
  # Overdue activity notifications
  overdueNotificationsEnabled: Boolean!
  overdueNotificationFrequencyHours: Int!
  
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ActivityReminder {
  id: ID!
  activityId: ID!
  userId: ID!
  reminderType: ReminderType!
  scheduledFor: DateTime!
  isSent: Boolean!
  sentAt: DateTime
  failedAttempts: Int!
  lastError: String
  reminderContent: JSON
  createdAt: DateTime!
  updatedAt: DateTime!
  
  # Resolved fields
  activity: Activity
  user: User
}

type Notification {
  id: ID!
  userId: ID!
  title: String!
  message: String!
  notificationType: NotificationType!
  isRead: Boolean!
  readAt: DateTime
  entityType: String
  entityId: ID
  actionUrl: String
  metadata: JSON
  priority: NotificationPriority!
  expiresAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  
  # Resolved fields
  user: User
}

type NotificationSummary {
  totalCount: Int!
  unreadCount: Int!
  notifications: [Notification!]!
}

# Input Types
input UpdateUserReminderPreferencesInput {
  emailRemindersEnabled: Boolean
  emailReminderMinutesBefore: Int
  emailDailyDigestEnabled: Boolean
  emailDailyDigestTime: String
  inAppRemindersEnabled: Boolean
  inAppReminderMinutesBefore: Int
  pushRemindersEnabled: Boolean
  pushReminderMinutesBefore: Int
  overdueNotificationsEnabled: Boolean
  overdueNotificationFrequencyHours: Int
}

input CreateNotificationInput {
  userId: ID!
  title: String!
  message: String!
  notificationType: NotificationType!
  entityType: String
  entityId: ID
  actionUrl: String
  metadata: JSON
  priority: NotificationPriority
  expiresAt: DateTime
}

input NotificationFilterInput {
  isRead: Boolean
  notificationType: NotificationType
  priority: NotificationPriority
  entityType: String
  entityId: ID
}

# Extend existing types
extend type Query {
  # User reminder preferences
  myReminderPreferences: UserReminderPreferences
  
  # Activity reminders (for admin/debugging)
  activityReminders(activityId: ID): [ActivityReminder!]!
  
  # Notifications
  myNotifications(filter: NotificationFilterInput, limit: Int, offset: Int): NotificationSummary!
  notification(id: ID!): Notification
  
  # Notification counts for UI badges
  unreadNotificationCount: Int!
}

extend type Mutation {
  # User reminder preferences
  updateMyReminderPreferences(input: UpdateUserReminderPreferencesInput!): UserReminderPreferences!
  
  # Notifications
  markNotificationAsRead(id: ID!): Notification!
  markAllNotificationsAsRead: Int! # Returns count of notifications marked as read
  deleteNotification(id: ID!): Boolean!
  createNotification(input: CreateNotificationInput!): Notification! # Admin only
  
  # Activity reminder management (system use)
  scheduleActivityReminder(activityId: ID!, reminderType: ReminderType!, scheduledFor: DateTime!): ActivityReminder!
  cancelActivityReminder(id: ID!): Boolean!
}

# Subscriptions for real-time notifications (future enhancement)
extend type Subscription {
  notificationAdded(userId: ID!): Notification!
  notificationUpdated(userId: ID!): Notification!
} 